#+TITLE: The LENS.WSN package
#+AUTHOR: Dr. John A.R. Williams
#+EMAIL: J.A.R.Williams@aston.ac.uk
#+LINK: hs http://www.lispworks.com/reference/HyperSpec//%s
#+STYLE: <link rel="stylesheet" type="text/css" href="clod.css" />
#+STARTUP: showall
#+OPTIONS: toc:4 H:10 @:t tags:nil

# link target 2: <<lens.wsn>>
# link target: <<package lens.wsn>>


* Internal Package: =lens.wsn=                                           :package:

- Uses:
    [[package common-lisp][common-lisp]], [[package common-lisp-user][common-lisp
    user]], [[package lens][lens]]
- Used by:
    [[package lens.wsn.mac.802.15.4][lens.wsn.mac.802.15.4]], [[package
    lens.wsn.mac.tmac][lens.wsn.mac.tmac]], [[package
    lens.wsn.mac.tuneable][lens.wsn.mac.tuneable]], [[package
    lens.wsn.routing.multipath-rings][lens.wsn.routing.multipath-rings]], [[package
    lens.wsn.routing.leach][lens.wsn.routing.leach]]


** Description

LENS Wireless Sensor Networks


** External Symbols




*** External Classes

-----

# link target 2: <<app-net-control-info>>
# link target: <<class app-net-control-info>>


**** Class: =app-net-control-info=                                            :class:


***** Inheritance

- Parent classes:
    [[class standard-object][standard-object]]
- Precedence list:
    [[class app-net-control-info][app-net-control-info]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

We need to pass information between app and communication
 layer which is external to the packet i.e. not carried by a real
 packet (e.g., which is the destination, or what was the RSSI for the
 packet received) but this information is related to the specific
 packet.


***** Direct Slots

# link target 2: <<rssi>>
# link target: <<slot rssi>>


****** Slot: =rssi=                                                              :slot:

- Value type: =float=
- Initial value: =NIL=
- Initargs: rssi
- Allocation: instance


******* Description

the RSSI of the received packet


******* Accessors

-----

# link target 2: <<rssi>>
# link target: <<slot-accessor rssi>>


******** Slot Accessor: =rssi=                                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(rssi object)
#+END_SRC


********* Methods

- (=rssi= (mac-radio-control-info          [[class mac-radio-control
  info][=lens.wsn:mac-radio-control-info=]]))
- (=rssi= (net-mac-control-info          [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))
- (=rssi= (app-net-control-info          [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<lqi>>
# link target: <<slot lqi>>


****** Slot: =lqi=                                                               :slot:

- Value type: =float=
- Initial value: =NIL=
- Initargs: lqi
- Allocation: instance


******* Description

the LQI of the received packet


******* Accessors

-----

# link target 2: <<lqi>>
# link target: <<slot-accessor lqi>>


******** Slot Accessor: =lqi=                                             :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(lqi object)
#+END_SRC


********* Methods

- (=lqi= (mac-radio-control-info         [[class mac-radio-control
  info][=lens.wsn:mac-radio-control-info=]]))
- (=lqi= (net-mac-control-info         [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))
- (=lqi= (app-net-control-info         [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<source>>
# link target: <<slot source>>


****** Internal Slot: =source=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: source
- Allocation: instance


******* Description

the routing layer source of the received packet


******* Accessors

-----

# link target 2: <<source>>
# link target: <<slot-accessor source>>


******** Internal Slot Accessor: =source=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(source object)
#+END_SRC


********* Methods

- (=source= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=source= (app-net-control-info            [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<destination>>
# link target: <<slot destination>>


****** Internal Slot: =destination=                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: destination
- Allocation: instance


******* Description

the routing layer dest of the packet to be sent


******* Accessors

-----

# link target 2: <<destination>>
# link target: <<slot-accessor destination>>


******** Internal Slot Accessor: =destination=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(destination object)
#+END_SRC


********* Methods

- (=destination= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=destination= (app-net-control-info                 [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))








-----

# link target 2: <<application>>
# link target: <<class application>>


**** Class: =application=                                                     :class:


***** Inheritance

- Parent classes:
    [[class wsn-module][wsn-module]]
- Precedence list:
    [[class application][application]], [[class wsn-module][wsn-module]], [[class
    with-timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class throughput-test][throughput-test]], [[class connectivity
    map][connectivity-map]], [[class simple-aggregation][simple-aggregation]],
    [[class value-reporting][value-reporting]], [[class value-propagation][value
    propagation]]


***** Parameters

- applicationid :: a =symbol=.  NIL
- priority :: a =integer=. Default: =1=. NIL
- header-overhead :: a =integer=. Default: =8=. in bytes
- payload-overhead :: a =integer=. Default: =12=. in bytes

***** Description

Application core module connects to sensors for measurements
  and to communication module for sending/receiving data.


***** Direct Slots

# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target: <<slot-accessor node>>


******** Slot Accessor: =node=                                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(node module)
#+END_SRC


********* Description

Return the node module for a particular submodule


********* Methods

- (=node= (instance [[class comms-module][=lens.wsn:comms-module=]]))
- (=node= (application [[class application][=lens.wsn:application=]]))
- (=node= (sensor [[class sensor][=lens.wsn::sensor=]]))
- (=node= (module [[class wsn-module][=lens.wsn:wsn-module=]]))





# link target 2: <<applicationid>>
# link target: <<slot applicationid>>


****** Slot: =applicationid=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: id
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

-----

# link target 2: <<applicationid>>
# link target: <<slot-accessor applicationid>>


******** Slot Accessor: =applicationid=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(applicationid object)
#+END_SRC


********* Methods

- (=applicationid= (application [[class application][=lens.wsn:application=]]))
- (=applicationid= (application-packet                   [[class application
  packet][=lens.wsn:application-packet=]]))





# link target 2: <<priority>>
# link target: <<slot priority>>


****** Slot: =priority=                                                          :slot:

- Value type: =integer=
- Initial value: =1=
- Initargs: priority
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

-----

# link target 2: <<priority>>
# link target: <<slot-accessor priority>>


******** Slot Accessor: =priority=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(priority object)
#+END_SRC


********* Methods

- (=priority= (throughput-test              [[class throughput
  test][=lens.wsn::throughput-test=]]))
- (=priority= (connectivity-map              [[class connectivity
  map][=lens.wsn::connectivity-map=]]))
- (=priority= (simple-aggregation              [[class simple
  aggregation][=lens.wsn::simple-aggregation=]]))
- (=priority= (application [[class application][=lens.wsn:application=]]))





# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =integer=
- Initial value: =8=
- Initargs: header-overhead
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

in bytes


******* Accessors

-----

# link target 2: <<header-overhead>>
# link target: <<slot-accessor header-overhead>>


******** Slot Accessor: =header-overhead=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(header-overhead object)
#+END_SRC


********* Methods

- (=header-overhead= (comms-module                     [[class comms
  module][=lens.wsn:comms-module=]]))
- (=header-overhead= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=header-overhead= (application [[class
  application][=lens.wsn:application=]]))
- (=header-overhead= (wireless-signal-end                     [[class wireless
  signal-end][=lens.wsn::wireless-signal-end=]]))





# link target 2: <<payload-overhead>>
# link target: <<slot payload-overhead>>


****** Slot: =payload-overhead=                                                  :slot:

- Value type: =integer=
- Initial value: =12=
- Initargs: payload-overhead
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

in bytes


******* Accessors

-----

# link target 2: <<payload-overhead>>
# link target: <<slot-accessor payload-overhead>>


******** Slot Accessor: =payload-overhead=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(payload-overhead object)
#+END_SRC


********* Methods

- (=payload-overhead= (application [[class
  application][=lens.wsn:application=]]))





# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<application-packet>>
# link target: <<class application-packet>>


**** Class: =application-packet=                                              :class:


***** Inheritance

- Parent classes:
    [[class packet][packet]]
- Precedence list:
    [[class application-packet][application-packet]], [[class packet][packet]],
    [[class message][message]], [[class event][event]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class aggregate-application-packet][aggregate-application-packet]]


***** Description

A generic application packet. If defining your own
  packet you have to extend from this packet. You do not have to use
  the fields already defined, and you can always define your own
  size.


***** Direct Slots

# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: applicationid
- Allocation: instance


******* Description

virtual app uses application ID to filter packet delivery.


******* Accessors

-----

# link target 2: <<applicationid>>
# link target: <<slot-accessor applicationid>>


******** Slot Accessor: =applicationid=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(applicationid object)
#+END_SRC


********* Methods

- (=applicationid= (application [[class application][=lens.wsn:application=]]))
- (=applicationid= (application-packet                   [[class application
  packet][=lens.wsn:application-packet=]]))





# link target 2: <<encapsulated-packet>>
# link target: <<slot encapsulated-packet>>


****** Slot: =encapsulated-packet=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: payload
- Allocation: instance


******* Description

Higher level encapsulated protocol packet.


******* Accessors

-----

# link target 2: <<payload>>
# link target: <<slot-accessor payload>>


******** Slot Accessor: =payload=                                         :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(payload object)
#+END_SRC


********* Methods

- (=payload= (application-packet             [[class application
  packet][=lens.wsn:application-packet=]]))





# link target 2: <<sequence-number>>
# link target: <<slot sequence-number>>


****** Slot: =sequence-number=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: sequence-number, seqnum
- Allocation: instance


******* Description

a field to distinguish between packets


******* Accessors

-----

# link target 2: <<sequence-number>>
# link target: <<slot-accessor sequence-number>>


******** Slot Accessor: =sequence-number=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sequence-number object)
#+END_SRC


********* Methods

- (=sequence-number= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=sequence-number= (application-packet                     [[class
  application-packet][=lens.wsn:application-packet=]]))



-----

# link target 2: <<sequence-number>>
# link target: <<slot-accessor sequence-number>>


******** Slot Accessor: =sequence-number=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sequence-number object)
#+END_SRC


********* Methods

- (=sequence-number= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=sequence-number= (application-packet                     [[class
  application-packet][=lens.wsn:application-packet=]]))





# link target 2: <<byte-length>>
# link target: <<slot byte-length>>


****** Inherited Slot: =byte-length=                                             :slot:

- Value type: =fixnum=
- Initial value: =20=
- Initargs: byte-length
- Allocation: instance


******* Accessors

-----

# link target 2: <<byte-length>>
# link target: <<slot-accessor byte-length>>


******** Inherited Slot Accessor: =byte-length=                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(byte-length entity)
#+END_SRC


********* Description

Return the length in whole octets (8 bit bytes) of
  an =entity=. For a [[packet]] the length should include the length
  of all encapsulated packets together with its overhead.


********* Methods

- (=byte-length= (packet-buffer [[class packet-buffer][=packet-buffer=]]))
- (=byte-length= (v [[class bit-vector][=bit-vector=]]))
- (=byte-length= (pkt (eql lens.wsn.mac.802.15.4::mac802.15.4-gts-request
  packet)))
- (=byte-length= (pkt (eql lens.wsn.mac.802.15.4::mac802.15.4-ack-packet)))
- (=byte-length= (pkt (eql lens.wsn.mac.802.15.4::mac802.15.4-associate
  packet)))
- (=byte-length= (pkt                 [[class mac802.15.4-protocol
  packet][=lens.wsn.mac.802.15.4::mac802.15.4-protocol-packet=]]))
- (=byte-length= (pkt                 [[class mac802.15.4-beacon
  packet][=lens.wsn.mac.802.15.4::mac802.15.4-beacon-packet=]]))
- (=byte-length= (mac802.15.4-gts-request-packet                 [[class
  mac802.15.4-gts-request-packet][=lens.wsn.mac.802.15.4::mac802.15.4-gts
  request-packet=]]))
- (=byte-length= (mac802.15.4-ack-packet                 [[class mac802.15.4
  ack-packet][=lens.wsn.mac.802.15.4::mac802.15.4-ack-packet=]]))
- (=byte-length= (mac802.15.4-associate-packet                 [[class
  mac802.15.4-associate-packet][=lens.wsn.mac.802.15.4::mac802.15.4-associate
  packet=]]))
- (=byte-length= (pkt                 [[class aggregate-application
  packet][=lens.wsn.routing.leach::aggregate-application-packet=]]))
- (=byte-length= (packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=byte-length= (application-packet                 [[class application
  packet][=lens.wsn:application-packet=]]))
- (=byte-length= (pkt                 [[class wireless-signal
  end][=lens.wsn::wireless-signal-end=]]))







***** Indirect Slots

# link target 2: <<bit-error-p>>
# link target: <<slot bit-error-p>>


****** Inherited Slot: =bit-error-p=                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The result of error modelling after the packet is
sent through a channel that has a nonzero packet error rate (PER) or
bit error rate (BER). It is up to the receiver to examine this flag
after having received the packet, and to act upon it.


# link target 2: <<reception-start-p>>
# link target: <<slot reception-start-p>>


****** Slot: =reception-start-p=                                                 :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: deliver-on-reception-start
- Allocation: instance


******* Description

Identify whether this packet represents the start
or the end of the reception after the packet travelled through a
channel with a data rate. This flag is controlled by the
deliver-on-reception-start flag of the receiving gate.


# link target 2: <<control-info>>
# link target: <<slot control-info>>


****** Inherited Slot: =control-info=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: control-info
- Allocation: instance


******* Description

Additional data to be passed with packet between
    protocol layers.


# link target 2: <<duration>>
# link target: <<slot duration>>


****** Internal Slot: =duration=                                                 :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Duration of last transmission


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** Inherited Slot: =timestamp=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Slot: =to=                                                                :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Slot: =from=                                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** Inherited Slot: =creation-time=                                           :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** Inherited Slot: =root-event=                                              :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Slot: =schedule-id=                                                       :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Slot: =priority=                                                          :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** Inherited Slot: =arrival-time=                                            :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** Inherited Slot: =sent-time=                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Slot: =rank=                                                              :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)





-----

# link target 2: <<bypass-mac>>
# link target: <<class bypass-mac>>


**** Class: =bypass-mac=                                                      :class:


***** Inheritance

- Parent classes:
    [[class mac][mac]]
- Precedence list:
    [[class bypass-mac][bypass-mac]], [[class mac][mac]], [[class comms
    module][comms-module]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters



***** Description

Not documented.


***** Direct Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =8=
- Initargs: none
- Allocation: instance


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** Inherited Slot: =buffer-size=                                             :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<max-mac-frame-size>>
# link target: <<slot max-mac-frame-size>>


****** Slot: =max-mac-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target: <<slot radio>>


****** Slot: =radio=                                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<phy-delay-for-valid-cs>>
# link target: <<slot phy-delay-for-valid-cs>>


****** Slot: =phy-delay-for-valid-cs=                                            :slot:

- Value type: =time-type=
- Initial value: =1.28e-4=
- Initargs: none
- Allocation: instance


# link target 2: <<address>>
# link target: <<slot address>>


****** Slot: =address=                                                           :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

MAC address - will default to nodeid.


# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Slot: =buffer=                                                            :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<bypass-routing>>
# link target: <<class bypass-routing>>


**** Class: =bypass-routing=                                                  :class:


***** Inheritance

- Parent classes:
    [[class routing][routing]]
- Precedence list:
    [[class bypass-routing][bypass-routing]], [[class routing][routing]], [[class
    comms-module][comms-module]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters



***** Description

Not documented.


***** Direct Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =10=
- Initargs: none
- Allocation: instance


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** Inherited Slot: =buffer-size=                                             :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance


# link target 2: <<max-net-frame-size>>
# link target: <<slot max-net-frame-size>>


****** Slot: =max-net-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Slot: =buffer=                                                            :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<comms-module>>
# link target: <<class comms-module>>


**** Class: =comms-module=                                                    :class:


***** Inheritance

- Parent classes:
    [[class wsn-module][wsn-module]]
- Precedence list:
    [[class comms-module][comms-module]], [[class wsn-module][wsn-module]], [[class
    with-timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class radio][radio]], [[class mac][mac]], [[class routing][routing]]


***** Parameters

- buffer-size :: a =integer=. Default: =32=. Size of TX buffer
- header-overhead :: a =integer=. Default: =10=. in bytes

***** Description

Not documented.


***** Direct Slots

# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Slot: =buffer=                                                            :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


******* Accessors

-----

# link target 2: <<buffer>>
# link target: <<slot-accessor buffer>>


******** Slot Accessor: =buffer=                                          :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(buffer object)
#+END_SRC


********* Methods

- (=buffer= (comms-module [[class comms-module][=lens.wsn:comms-module=]]))





# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** Inherited Slot: =buffer-size=                                             :slot:

- Value type: =integer=
- Initial value: =32=
- Initargs: buffer-size
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Size of TX buffer


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


******* Accessors

-----

# link target 2: <<packet-history>>
# link target: <<slot-accessor packet-history>>


******** Slot Accessor: =packet-history=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(packet-history object)
#+END_SRC


********* Methods

- (=packet-history= (comms-module [[class comms-module][=lens.wsn:comms
  module=]]))





# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<last-sequence-number>>
# link target: <<slot-accessor last-sequence-number>>


******** Slot Accessor: =last-sequence-number=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(last-sequence-number object)
#+END_SRC


********* Methods

- (=last-sequence-number= (comms-module                          [[class comms
  module][=lens.wsn:comms-module=]]))





# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =integer=
- Initial value: =10=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (units b)


******* Description

in bytes


******* Accessors

-----

# link target 2: <<header-overhead>>
# link target: <<slot-accessor header-overhead>>


******** Slot Accessor: =header-overhead=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(header-overhead object)
#+END_SRC


********* Methods

- (=header-overhead= (comms-module                     [[class comms
  module][=lens.wsn:comms-module=]]))
- (=header-overhead= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=header-overhead= (application [[class
  application][=lens.wsn:application=]]))
- (=header-overhead= (wireless-signal-end                     [[class wireless
  signal-end][=lens.wsn::wireless-signal-end=]]))







***** Indirect Slots

# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<communications>>
# link target: <<class communications>>


**** Class: =communications=                                                  :class:


***** Inheritance

- Parent classes:
    [[class compound-module][compound-module]]
- Precedence list:
    [[class communications][communications]], [[class compound-module][compound
    module]], [[class module][module]], [[class component][component]], [[class
    parameter-object][parameter-object]], [[class entity-with-signals][entity-with
    signals]], [[class owned-object][owned-object]], [[class named-object][named
    object]], [[class lens-object][lens-object]], [[class standard-object][standard
    object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters



***** Description

Communications module


***** Direct Slots



***** Indirect Slots

# link target 2: <<channels>>
# link target: <<slot channels>>


****** Slot: =channels=                                                          :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<submodules>>
# link target: <<slot submodules>>


****** Slot: =submodules=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<leach-routing>>
# link target: <<class leach-routing>>


**** Class: =leach-routing=                                                   :class:


***** Inheritance

- Parent classes:
    [[class routing][routing]]
- Precedence list:
    [[class leach-routing][leach-routing]], [[class routing][routing]], [[class
    comms-module][comms-module]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- sink-network-address :: a =integer=.  NIL
- applicationid :: a =symbol=. Default: ='THROUGHPUT-TEST=. Default destination application for aggregates
- percentage :: a =real=.  NIL
- round-length :: a =time-type=.  NIL
- slot-length :: a =real=.  NIL
- adv-packet-size :: a =fixnum=. Default: =9=. NIL
- join-packet-size :: a =fixnum=. Default: =9=. NIL
- tdma-packet-size :: a =fixnum=. Default: =150=. NIL
- data-packet-size :: a =fixnum=. Default: =9=. NIL
- sensibility :: a =float=. Default: =-95=. dBm
- aggr-consumption :: a =float=. Default: =5.e-9=. Energy per bit used in transmitting aggregate data packet from cluster head

***** Description

Not documented.


***** Direct Slots

# link target 2: <<sink-network-address>>
# link target: <<slot sink-network-address>>


****** Slot: =sink-network-address=                                              :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

-----

# link target 2: <<sink-network-address>>
# link target: <<slot-accessor sink-network-address>>


******** Slot Accessor: =sink-network-address=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sink-network-address entity)
#+END_SRC


********* Description

Address of sink node for reporting applications


********* Methods

- (=sink-network-address= (simple-aggregation                          [[class
  simple-aggregation][=lens.wsn::simple-aggregation=]]))
- (=sink-network-address= (value-reporting                          [[class
  value-reporting][=lens.wsn::value-reporting=]]))
- (=sink-network-address= (leach-routing                          [[class leach
  routing][=lens.wsn:leach-routing=]]))
- (=sink-network-address= (entity [[class
  application][=lens.wsn:application=]]))
- (=sink-network-address= (node [[class node][=lens.wsn:node=]]))
- (=sink-network-address= (instance [[class wsn-module][=lens.wsn:wsn
  module=]]))





# link target 2: <<applicationid>>
# link target: <<slot applicationid>>


****** Slot: =applicationid=                                                     :slot:

- Value type: =symbol=
- Initial value: ='LENS.WSN::THROUGHPUT-TEST=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Default destination application for aggregates


# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =14=
- Initargs: none
- Allocation: instance


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** Inherited Slot: =buffer-size=                                             :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance


# link target 2: <<max-net-frame-size>>
# link target: <<slot max-net-frame-size>>


****** Slot: =max-net-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<percentage>>
# link target: <<slot percentage>>


****** Slot: =percentage=                                                        :slot:

- Value type: =real=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<round-length>>
# link target: <<slot round-length>>


****** Slot: =round-length=                                                      :slot:

- Value type: =time-type=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<slot-length>>
# link target: <<slot slot-length>>


****** Slot: =slot-length=                                                       :slot:

- Value type: =real=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<adv-packet-size>>
# link target: <<slot adv-packet-size>>


****** Slot: =adv-packet-size=                                                   :slot:

- Value type: =fixnum=
- Initial value: =9=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<join-packet-size>>
# link target: <<slot join-packet-size>>


****** Slot: =join-packet-size=                                                  :slot:

- Value type: =fixnum=
- Initial value: =9=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<tdma-packet-size>>
# link target: <<slot tdma-packet-size>>


****** Slot: =tdma-packet-size=                                                  :slot:

- Value type: =fixnum=
- Initial value: =150=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<data-packet-size>>
# link target: <<slot data-packet-size>>


****** Slot: =data-packet-size=                                                  :slot:

- Value type: =fixnum=
- Initial value: =9=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<round-number>>
# link target: <<slot round-number>>


****** Slot: =round-number=                                                      :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<round-number>>
# link target: <<slot-accessor round-number>>


******** Slot Accessor: =round-number=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(round-number object)
#+END_SRC


********* Methods

- (=round-number= (leach-routing                  [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<probability>>
# link target: <<slot probability>>


****** Slot: =probability=                                                       :slot:

- Value type: =float=
- Initial value: =0.0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<probability>>
# link target: <<slot-accessor probability>>


******** Slot Accessor: =probability=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(probability object)
#+END_SRC


********* Methods

- (=probability= (leach-routing [[class leach-routing][=lens.wsn:leach
  routing=]]))





# link target 2: <<sensibility>>
# link target: <<slot sensibility>>


****** Slot: =sensibility=                                                       :slot:

- Value type: =float=
- Initial value: =-95=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

dBm


******* Accessors

-----

# link target 2: <<sensibility>>
# link target: <<slot-accessor sensibility>>


******** Slot Accessor: =sensibility=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sensibility object)
#+END_SRC


********* Methods

- (=sensibility= (leach-routing [[class leach-routing][=lens.wsn:leach
  routing=]]))





# link target 2: <<aggr-consumption>>
# link target: <<slot aggr-consumption>>


****** Slot: =aggr-consumption=                                                  :slot:

- Value type: =float=
- Initial value: =5.e-9=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Energy per bit used in transmitting aggregate data packet from cluster head


******* Accessors

-----

# link target 2: <<aggr-consumption>>
# link target: <<slot-accessor aggr-consumption>>


******** Slot Accessor: =aggr-consumption=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(aggr-consumption object)
#+END_SRC


********* Methods

- (=aggr-consumption= (leach-routing                      [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<aggregate-buffer>>
# link target: <<slot aggregate-buffer>>


****** Slot: =aggregate-buffer=                                                  :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Stacked up application packets for sending as aggregate


******* Accessors

-----

# link target 2: <<aggregate-buffer>>
# link target: <<slot-accessor aggregate-buffer>>


******** Slot Accessor: =aggregate-buffer=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(aggregate-buffer object)
#+END_SRC


********* Methods

- (=aggregate-buffer= (leach-routing                      [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<temp-tx-buffer>>
# link target: <<slot temp-tx-buffer>>


****** Slot: =temp-tx-buffer=                                                    :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Temp buffer for packets received before cluster formed


******* Accessors

-----

# link target 2: <<temp-tx-buffer>>
# link target: <<slot-accessor temp-tx-buffer>>


******** Slot Accessor: =temp-tx-buffer=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(temp-tx-buffer object)
#+END_SRC


********* Methods

- (=temp-tx-buffer= (leach-routing                    [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<cluster-members>>
# link target: <<slot cluster-members>>


****** Slot: =cluster-members=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<cluster-members>>
# link target: <<slot-accessor cluster-members>>


******** Slot Accessor: =cluster-members=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cluster-members object)
#+END_SRC


********* Methods

- (=cluster-members= (leach-routing                     [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<cluster-head-candidates>>
# link target: <<slot cluster-head-candidates>>


****** Slot: =cluster-head-candidates=                                           :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<cluster-head-candidates>>
# link target: <<slot-accessor cluster-head-candidates>>


******** Slot Accessor: =cluster-head-candidates=                         :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cluster-head-candidates object)
#+END_SRC


********* Methods

- (=cluster-head-candidates= (leach-routing                             [[class
  leach-routing][=lens.wsn:leach-routing=]]))





# link target 2: <<powers>>
# link target: <<slot powers>>


****** Slot: =powers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<powers>>
# link target: <<slot-accessor powers>>


******** Slot Accessor: =powers=                                          :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(powers object)
#+END_SRC


********* Methods

- (=powers= (leach-routing [[class leach-routing][=lens.wsn:leach-routing=]]))





# link target 2: <<cluster-length>>
# link target: <<slot cluster-length>>


****** Slot: =cluster-length=                                                    :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<cluster-head-p>>
# link target: <<slot cluster-head-p>>


****** Slot: =cluster-head-p=                                                    :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<cluster-head-p>>
# link target: <<slot-accessor cluster-head-p>>


******** Slot Accessor: =cluster-head-p=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cluster-head-p object)
#+END_SRC


********* Methods

- (=cluster-head-p= (leach-routing                    [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<end-form-cluster>>
# link target: <<slot end-form-cluster>>


****** Slot: =end-form-cluster=                                                  :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<end-form-cluster>>
# link target: <<slot-accessor end-form-cluster>>


******** Slot Accessor: =end-form-cluster=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(end-form-cluster object)
#+END_SRC


********* Methods

- (=end-form-cluster= (leach-routing                      [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<ct-p>>
# link target: <<slot ct-p>>


****** Slot: =ct-p=                                                              :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Slot: =buffer=                                                            :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<mac>>
# link target: <<class mac>>


**** Class: =mac=                                                             :class:


***** Inheritance

- Parent classes:
    [[class comms-module][comms-module]]
- Precedence list:
    [[class mac][mac]], [[class comms-module][comms-module]], [[class wsn
    module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class mac802.15.4][mac802.15.4]], [[class tmac][tmac]], [[class tuneable
    mac][tuneable-mac]], [[class bypass-mac][bypass-mac]]


***** Parameters

- max-mac-frame-size :: a =integer=. Default: =0=. in bytes
- address :: a =integer=.  MAC address - will default to nodeid.
- phy-delay-for-valid-cs :: a =time-type=. Default: =1.28e-4=. NIL

***** Description

Not documented.


***** Direct Slots

# link target 2: <<max-mac-frame-size>>
# link target: <<slot max-mac-frame-size>>


****** Slot: =max-mac-frame-size=                                                :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: max-mac-frame-size
- Allocation: instance
- Parameter: t
- Properties: (units b)


******* Description

in bytes


******* Accessors

-----

# link target 2: <<max-mac-frame-size>>
# link target: <<slot-accessor max-mac-frame-size>>


******** Slot Accessor: =max-mac-frame-size=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(max-mac-frame-size object)
#+END_SRC


********* Methods

- (=max-mac-frame-size= (mac [[class mac][=lens.wsn:mac=]]))





# link target 2: <<address>>
# link target: <<slot address>>


****** Slot: =address=                                                           :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

MAC address - will default to nodeid.


******* Accessors

-----

# link target 2: <<mac-address>>
# link target: <<slot-accessor mac-address>>


******** Slot Accessor: =mac-address=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(mac-address object)
#+END_SRC


********* Methods

- (=mac-address= (radio [[class radio][=lens.wsn:radio=]]))
- (=mac-address= (node [[class node][=lens.wsn:node=]]))
- (=mac-address= (mac [[class mac][=lens.wsn:mac=]]))





# link target 2: <<phy-delay-for-valid-cs>>
# link target: <<slot phy-delay-for-valid-cs>>


****** Slot: =phy-delay-for-valid-cs=                                            :slot:

- Value type: =time-type=
- Initial value: =1.28e-4=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

-----

# link target 2: <<phy-delay-for-valid-cs>>
# link target: <<slot-accessor phy-delay-for-valid-cs>>


******** Slot Accessor: =phy-delay-for-valid-cs=                          :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(phy-delay-for-valid-cs object)
#+END_SRC


********* Methods

- (=phy-delay-for-valid-cs= (mac [[class mac][=lens.wsn:mac=]]))





# link target: <<slot radio>>


****** Slot: =radio=                                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target: <<slot-accessor radio>>


******** Slot Accessor: =radio=                                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(radio object)
#+END_SRC


********* Methods

- (=radio= (mac [[class mac][=lens.wsn:mac=]]))







***** Indirect Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =integer=
- Initial value: =10=
- Initargs: none
- Allocation: instance


******* Description

in bytes


# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** Inherited Slot: =buffer-size=                                             :slot:

- Value type: =integer=
- Initial value: =32=
- Initargs: buffer-size
- Allocation: instance


******* Description

Size of TX buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Slot: =buffer=                                                            :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<mac-control-command>>
# link target: <<class mac-control-command>>


**** Class: =mac-control-command=                                             :class:


***** Inheritance

- Parent classes:
    [[class communications-control-command][communications-control-command]]
- Precedence list:
    [[class mac-control-command][mac-control-command]], [[class communications
    control-command][communications-control-command]], [[class message][message]],
    [[class event][event]], [[class owned-object][owned-object]], [[class named
    object][named-object]], [[class lens-object][lens-object]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<argument>>
# link target: <<slot argument>>


****** Slot: =argument=                                                          :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: argument
- Allocation: instance


******* Description

Additional arguments with command


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** Inherited Slot: =timestamp=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Slot: =to=                                                                :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Slot: =from=                                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** Inherited Slot: =creation-time=                                           :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** Inherited Slot: =root-event=                                              :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Slot: =schedule-id=                                                       :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Slot: =priority=                                                          :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** Inherited Slot: =arrival-time=                                            :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** Inherited Slot: =sent-time=                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Slot: =rank=                                                              :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name, command
- Allocation: instance


******* Description

Command is held as message name





-----

# link target 2: <<mac-control-message>>
# link target: <<class mac-control-message>>


**** Class: =mac-control-message=                                             :class:


***** Inheritance

- Parent classes:
    [[class communications-control-message][communications-control-message]]
- Precedence list:
    [[class mac-control-message][mac-control-message]], [[class communications
    control-message][communications-control-message]], [[class message][message]],
    [[class event][event]], [[class owned-object][owned-object]], [[class named
    object][named-object]], [[class lens-object][lens-object]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<argument>>
# link target: <<slot argument>>


****** Slot: =argument=                                                          :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: argument
- Allocation: instance


******* Description

Additional arguments with command


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** Inherited Slot: =timestamp=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Slot: =to=                                                                :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Slot: =from=                                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** Inherited Slot: =creation-time=                                           :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** Inherited Slot: =root-event=                                              :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Slot: =schedule-id=                                                       :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Slot: =priority=                                                          :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** Inherited Slot: =arrival-time=                                            :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** Inherited Slot: =sent-time=                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Slot: =rank=                                                              :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name, command
- Allocation: instance


******* Description

Command is held as message name





-----

# link target 2: <<mac-packet>>
# link target: <<class mac-packet>>


**** Class: =mac-packet=                                                      :class:


***** Inheritance

- Parent classes:
    [[class wsn-packet][wsn-packet]]
- Precedence list:
    [[class mac-packet][mac-packet]], [[class wsn-packet][wsn-packet]], [[class
    packet][packet]], [[class message][message]], [[class event][event]], [[class
    owned-object][owned-object]], [[class named-object][named-object]], [[class
    lens-object][lens-object]], [[class standard-object][standard-object]], [[class
    slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class mac802.15.4-packet][mac802.15.4-packet]], [[class tmac-packet][tmac
    packet]]


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<sequence-number>>
# link target: <<slot sequence-number>>


****** Slot: =sequence-number=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: sequence-number, seqnum
- Allocation: instance


******* Description

a field to distinguish between packets


# link target 2: <<destination>>
# link target: <<slot destination>>


****** Internal Slot: =destination=                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: destination
- Allocation: instance


******* Description

the destination address of the packet to be sent


# link target 2: <<source>>
# link target: <<slot source>>


****** Internal Slot: =source=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: source
- Allocation: instance


******* Description

the  source address of the received packet


# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: byte-length, header-overhead
- Allocation: instance


******* Description

In bytes


# link target 2: <<bit-error-p>>
# link target: <<slot bit-error-p>>


****** Inherited Slot: =bit-error-p=                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The result of error modelling after the packet is
sent through a channel that has a nonzero packet error rate (PER) or
bit error rate (BER). It is up to the receiver to examine this flag
after having received the packet, and to act upon it.


# link target 2: <<reception-start-p>>
# link target: <<slot reception-start-p>>


****** Slot: =reception-start-p=                                                 :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: deliver-on-reception-start
- Allocation: instance


******* Description

Identify whether this packet represents the start
or the end of the reception after the packet travelled through a
channel with a data rate. This flag is controlled by the
deliver-on-reception-start flag of the receiving gate.


# link target 2: <<control-info>>
# link target: <<slot control-info>>


****** Inherited Slot: =control-info=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: control-info
- Allocation: instance


******* Description

Additional data to be passed with packet between
    protocol layers.


# link target 2: <<duration>>
# link target: <<slot duration>>


****** Internal Slot: =duration=                                                 :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Duration of last transmission


# link target 2: <<encapsulated-packet>>
# link target: <<slot encapsulated-packet>>


****** Slot: =encapsulated-packet=                                               :slot:

- Value type: =packet=
- Initial value: =NIL=
- Initargs: encapsulated-packet
- Allocation: instance


******* Description

Higher level encapsulated protocol packet.


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** Inherited Slot: =timestamp=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Slot: =to=                                                                :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Slot: =from=                                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** Inherited Slot: =creation-time=                                           :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** Inherited Slot: =root-event=                                              :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Slot: =schedule-id=                                                       :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Slot: =priority=                                                          :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** Inherited Slot: =arrival-time=                                            :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** Inherited Slot: =sent-time=                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Slot: =rank=                                                              :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<mac-radio-control-info>>
# link target: <<class mac-radio-control-info>>


**** Class: =mac-radio-control-info=                                          :class:


***** Inheritance

- Parent classes:
    [[class standard-object][standard-object]]
- Precedence list:
    [[class mac-radio-control-info][mac-radio-control-info]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots

# link target 2: <<rssi>>
# link target: <<slot rssi>>


****** Slot: =rssi=                                                              :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: rssi
- Allocation: instance


******* Description

the RSSI of the received packet


******* Accessors

-----

# link target 2: <<rssi>>
# link target: <<slot-accessor rssi>>


******** Slot Accessor: =rssi=                                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(rssi object)
#+END_SRC


********* Methods

- (=rssi= (mac-radio-control-info          [[class mac-radio-control
  info][=lens.wsn:mac-radio-control-info=]]))
- (=rssi= (net-mac-control-info          [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))
- (=rssi= (app-net-control-info          [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<lqi>>
# link target: <<slot lqi>>


****** Slot: =lqi=                                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: lqi
- Allocation: instance


******* Description

the LQI of the received packet


******* Accessors

-----

# link target 2: <<lqi>>
# link target: <<slot-accessor lqi>>


******** Slot Accessor: =lqi=                                             :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(lqi object)
#+END_SRC


********* Methods

- (=lqi= (mac-radio-control-info         [[class mac-radio-control
  info][=lens.wsn:mac-radio-control-info=]]))
- (=lqi= (net-mac-control-info         [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))
- (=lqi= (app-net-control-info         [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))








-----

# link target 2: <<mac802.15.4>>
# link target: <<class mac802.15.4>>


**** Class: =mac802.15.4=                                                     :class:


***** Inheritance

- Parent classes:
    [[class mac][mac]]
- Precedence list:
    [[class mac802.15.4][mac802.15.4]], [[class mac][mac]], [[class comms
    module][comms-module]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- print-state-transitions :: a =boolean=.  Debugging parameter
- max-mac-frame-size :: a =t=. Default: =0=. NIL
- header-overhead :: a =t=. Default: =14=. NIL
- buffer-size :: a =t=. Default: =32=. NIL
- enable-slotted-csma :: a =boolean=. Default: =T=. NIL
- enable-cap :: a =boolean=. Default: =T=. NIL
- is-ffd :: a =boolean=.  NIL
- is-pan-coordinator :: a =boolean=.  NIL
- battery-life-extension :: a =boolean=.  NIL
- frame-order :: a =fixnum=. Default: =4=. NIL
- beacon-order :: a =fixnum=. Default: =6=. NIL
- unit-backoff-period :: a =fixnum=. Default: =20=. NIL
- base-slot-duration :: a =fixnum=. Default: =60=. NIL
- num-superframe-slots :: a =fixnum=. Default: =16=. NIL
- min-be :: a =fixnum=. Default: =5=. NIL
- max-be :: a =fixnum=. Default: =7=. NIL
- max-csma-backoffs :: a =fixnum=. Default: =4=. NIL
- max-frame-retries :: a =fixnum=. Default: =2=. NIL
- max-lost-beacons :: a =fixnum=. Default: =4=. NIL
- min-cap-length :: a =fixnum=. Default: =440=. NIL
- request-gts :: a =fixnum=. Default: =0=. NIL
- guard-time :: a =time-type=. Default: =0.001=. NIL

***** Description

IEEE802.15.4 MAC implementation


***** Direct Slots

# link target 2: <<print-state-transitions>>
# link target: <<slot print-state-transitions>>


****** Slot: =print-state-transitions=                                           :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Debugging parameter


# link target 2: <<max-mac-frame-size>>
# link target: <<slot max-mac-frame-size>>


****** Slot: =max-mac-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =14=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** Inherited Slot: =buffer-size=                                             :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<enable-slotted-csma>>
# link target: <<slot enable-slotted-csma>>


****** Slot: =enable-slotted-csma=                                               :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<enable-cap>>
# link target: <<slot enable-cap>>


****** Slot: =enable-cap=                                                        :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<is-ffd>>
# link target: <<slot is-ffd>>


****** Slot: =is-ffd=                                                            :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<is-pan-coordinator>>
# link target: <<slot is-pan-coordinator>>


****** Slot: =is-pan-coordinator=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<battery-life-extension>>
# link target: <<slot battery-life-extension>>


****** Slot: =battery-life-extension=                                            :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<frame-order>>
# link target: <<slot frame-order>>


****** Slot: =frame-order=                                                       :slot:

- Value type: =fixnum=
- Initial value: =4=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<beacon-order>>
# link target: <<slot beacon-order>>


****** Slot: =beacon-order=                                                      :slot:

- Value type: =fixnum=
- Initial value: =6=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<unit-backoff-period>>
# link target: <<slot unit-backoff-period>>


****** Slot: =unit-backoff-period=                                               :slot:

- Value type: =fixnum=
- Initial value: =20=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<base-slot-duration>>
# link target: <<slot base-slot-duration>>


****** Slot: =base-slot-duration=                                                :slot:

- Value type: =fixnum=
- Initial value: =60=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<base-superframe-duration>>
# link target: <<slot base-superframe-duration>>


****** Slot: =base-superframe-duration=                                          :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<num-superframe-slots>>
# link target: <<slot num-superframe-slots>>


****** Slot: =num-superframe-slots=                                              :slot:

- Value type: =fixnum=
- Initial value: =16=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<min-be>>
# link target: <<slot min-be>>


****** Slot: =min-be=                                                            :slot:

- Value type: =fixnum=
- Initial value: =5=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<max-be>>
# link target: <<slot max-be>>


****** Slot: =max-be=                                                            :slot:

- Value type: =fixnum=
- Initial value: =7=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<max-csma-backoffs>>
# link target: <<slot max-csma-backoffs>>


****** Slot: =max-csma-backoffs=                                                 :slot:

- Value type: =fixnum=
- Initial value: =4=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<max-frame-retries>>
# link target: <<slot max-frame-retries>>


****** Slot: =max-frame-retries=                                                 :slot:

- Value type: =fixnum=
- Initial value: =2=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<max-lost-beacons>>
# link target: <<slot max-lost-beacons>>


****** Slot: =max-lost-beacons=                                                  :slot:

- Value type: =fixnum=
- Initial value: =4=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<min-cap-length>>
# link target: <<slot min-cap-length>>


****** Slot: =min-cap-length=                                                    :slot:

- Value type: =fixnum=
- Initial value: =440=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<request-gts>>
# link target: <<slot request-gts>>


****** Slot: =request-gts=                                                       :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<guard-time>>
# link target: <<slot guard-time>>


****** Slot: =guard-time=                                                        :slot:

- Value type: =time-type=
- Initial value: =0.001=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<next-packet-try>>
# link target: <<slot next-packet-try>>


****** Slot: =next-packet-try=                                                   :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<next-packet-time>>
# link target: <<slot next-packet-time>>


****** Slot: =next-packet-time=                                                  :slot:

- Value type: =time-type=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<locked-gts>>
# link target: <<slot locked-gts>>


****** Slot: =locked-gts=                                                        :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<associated-pan>>
# link target: <<slot associated-pan>>


****** Slot: =associated-pan=                                                    :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

ID of current PAN (-1 if not associated)


# link target 2: <<state>>
# link target: <<slot state>>


****** Slot: =state=                                                             :slot:

- Value type: =mac802.15.4-state=
- Initial value: ='LENS.WSN.MAC.802.15.4::SETUP=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<state>>
# link target: <<slot-accessor state>>


******** Slot Accessor: =state=                                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(state instance)
#+END_SRC


********* Description

Return current state of instance


********* Methods

- (=state= (mac802.15.4 [[class mac802.15.4][=lens.wsn:mac802.15.4=]]))
- (=state= (tmac [[class tmac][=lens.wsn:tmac=]]))
- (=state= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))
- (=state= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<next-state>>
# link target: <<slot next-state>>


****** Slot: =next-state=                                                        :slot:

- Value type: =mac802.15.4-state=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

will be switched after csma-ca algorithm


# link target 2: <<cap-length>>
# link target: <<slot cap-length>>


****** Slot: =cap-length=                                                        :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

duration of CAP interval (in number of superframe slots)


# link target 2: <<mac-bsn>>
# link target: <<slot mac-bsn>>


****** Slot: =mac-bsn=                                                           :slot:

- Value type: =integer=
- Initial value: =(RANDOM 255)=
- Initargs: none
- Allocation: instance


******* Description

beacon sequence number (unused)


# link target 2: <<next-packet-retries>>
# link target: <<slot next-packet-retries>>


****** Slot: =next-packet-retries=                                               :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Description

number of retries left for next packet to be sent


# link target 2: <<lost-beacons>>
# link target: <<slot lost-beacons>>


****** Slot: =lost-beacons=                                                      :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Description

number of consequitive lost beacon packets


# link target 2: <<frame-interval>>
# link target: <<slot frame-interval>>


****** Slot: =frame-interval=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

duration of active part of the frame (in symbols)


# link target 2: <<beacon-interval>>
# link target: <<slot beacon-interval>>


****** Slot: =beacon-interval=                                                   :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

duration of the whole frame (in symbols)


# link target 2: <<csma-number-backoffs>>
# link target: <<slot csma-number-backoffs>>


****** Slot: =csma-number-backoffs=                                              :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<csma-contention-window-length>>
# link target: <<slot csma-contention-window-length>>


****** Slot: =csma-contention-window-length=                                     :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<csma-backoff-exponent>>
# link target: <<slot csma-backoff-exponent>>


****** Slot: =csma-backoff-exponent=                                             :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<cap-end>>
# link target: <<slot cap-end>>


****** Slot: =cap-end=                                                           :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Absolute time of end of CAP period for current frame


# link target 2: <<current-frame-start>>
# link target: <<slot current-frame-start>>


****** Slot: =current-frame-start=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Absolute recorded start time of the current frame


# link target 2: <<gts-start>>
# link target: <<slot gts-start>>


****** Slot: =gts-start=                                                         :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


# link target 2: <<gts-end>>
# link target: <<slot gts-end>>


****** Slot: =gts-end=                                                           :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


# link target 2: <<gts-length>>
# link target: <<slot gts-length>>


****** Slot: =gts-length=                                                        :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


# link target 2: <<gts-list>>
# link target: <<slot gts-list>>


****** Slot: =gts-list=                                                          :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<next-packet-response>>
# link target: <<slot next-packet-response>>


****** Slot: =next-packet-response=                                              :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Duration of timeout for receiving a reply after sending a packet


# link target 2: <<next-packet-state>>
# link target: <<slot next-packet-state>>


****** Slot: =next-packet-state=                                                 :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<associated-devices>>
# link target: <<slot associated-devices>>


****** Slot: =associated-devices=                                                :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

List of associated devices for PAN coordinator


# link target 2: <<beacon-packet>>
# link target: <<slot beacon-packet>>


****** Slot: =beacon-packet=                                                     :slot:

- Value type: =mac802.15.4-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<associate-request-packet>>
# link target: <<slot associate-request-packet>>


****** Slot: =associate-request-packet=                                          :slot:

- Value type: =mac802.15.4-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<next-packet>>
# link target: <<slot next-packet>>


****** Slot: =next-packet=                                                       :slot:

- Value type: =mac802.15.4-data-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target: <<slot gts-spec>>


****** Slot: =gts-spec=                                                          :slot:

- Value type: =vector=
- Initial value: =(MAKE-ARRAY 0 :ADJUSTABLE T)=
- Initargs: none
- Allocation: instance


******* Description

list of GTS specifications (for PAN coordinator)


# link target 2: <<attempt-tx>>
# link target: <<slot attempt-tx>>


****** Slot: =attempt-tx=                                                        :slot:

- Value type: =t=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target: <<slot radio>>


****** Slot: =radio=                                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<phy-delay-for-valid-cs>>
# link target: <<slot phy-delay-for-valid-cs>>


****** Slot: =phy-delay-for-valid-cs=                                            :slot:

- Value type: =time-type=
- Initial value: =1.28e-4=
- Initargs: none
- Allocation: instance


# link target 2: <<address>>
# link target: <<slot address>>


****** Slot: =address=                                                           :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

MAC address - will default to nodeid.


# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Slot: =buffer=                                                            :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<mobility>>
# link target: <<class mobility>>


**** Class: =mobility=                                                        :class:


***** Inheritance

- Parent classes:
    [[class wsn-module][wsn-module]]
- Precedence list:
    [[class mobility][mobility]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class no-mobility][no-mobility]], [[class line-mobility][line-mobility]]


***** Parameters

- location :: a =coord=.  current location initalized from parameter file
- orientation :: a =lens.wsn::orientation=. Default: =(MAKE-ORIENTATION)=. current orientation initialized from parameter gile

***** Description

Not documented.


***** Direct Slots

# link target 2: <<location>>
# link target: <<slot location>>


****** Slot: =location=                                                          :slot:

- Value type: =coord=
- Initial value: =NIL=
- Initargs: location
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

current location initalized from parameter file


******* Accessors

-----

# link target 2: <<location>>
# link target: <<slot-accessor location>>


******** Slot Accessor: =location=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(location object)
#+END_SRC


********* Methods

- (=location= (node [[class node][=lens.wsn:node=]]))
- (=location= (mobility [[class mobility][=lens.wsn:mobility=]]))





# link target: <<slot orientation>>


****** Slot: =orientation=                                                       :slot:

- Value type: =orientation=
- Initial value: =(LENS.WSN::MAKE-ORIENTATION)=
- Initargs: orientation
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

current orientation initialized from parameter gile


******* Accessors

-----

# link target: <<slot-accessor orientation>>


******** Slot Accessor: =orientation=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(orientation object)
#+END_SRC


********* Methods

- (=orientation= (mobility [[class mobility][=lens.wsn:mobility=]]))





# link target 2: <<static-p>>
# link target: <<slot static-p>>


****** Slot: =static-p=                                                          :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: static-p
- Allocation: instance


******* Accessors

-----

# link target 2: <<static-p>>
# link target: <<slot-accessor static-p>>


******** Slot Accessor: =static-p=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(static-p object)
#+END_SRC


********* Methods

- (=static-p= (mobility [[class mobility][=lens.wsn:mobility=]]))







***** Indirect Slots

# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<multipath-rings-routing>>
# link target: <<class multipath-rings-routing>>


**** Class: =multipath-rings-routing=                                         :class:


***** Inheritance

- Parent classes:
    [[class routing][routing]]
- Precedence list:
    [[class multipath-rings-routing][multipath-rings-routing]], [[class
    routing][routing]], [[class comms-module][comms-module]], [[class wsn
    module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- setup-overhead :: a =integer=. Default: =13=. NIL
- setup-frame-size :: a =fixnum=. Default: =13=. NIL
- setup-timeout :: a =time-type=. Default: =0.05d0=. NIL

***** Description

Not documented.


***** Direct Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =14=
- Initargs: none
- Allocation: instance


# link target 2: <<setup-overhead>>
# link target: <<slot setup-overhead>>


****** Slot: =setup-overhead=                                                    :slot:

- Value type: =integer=
- Initial value: =13=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

-----

# link target 2: <<setup-overhead>>
# link target: <<slot-accessor setup-overhead>>


******** Slot Accessor: =setup-overhead=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(setup-overhead object)
#+END_SRC


********* Methods

- (=setup-overhead= (multipath-rings-routing                    [[class
  multipath-rings-routing][=lens.wsn:multipath-rings-routing=]]))





# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** Inherited Slot: =buffer-size=                                             :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance


# link target 2: <<max-net-frame-size>>
# link target: <<slot max-net-frame-size>>


****** Slot: =max-net-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<setup-frame-size>>
# link target: <<slot setup-frame-size>>


****** Slot: =setup-frame-size=                                                  :slot:

- Value type: =fixnum=
- Initial value: =13=
- Initargs: setup-frame-size
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

-----

# link target 2: <<setup-frame-size>>
# link target: <<slot-accessor setup-frame-size>>


******** Slot Accessor: =setup-frame-size=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(setup-frame-size object)
#+END_SRC


********* Methods

- (=setup-frame-size= (multipath-rings-routing                      [[class
  multipath-rings-routing][=lens.wsn:multipath-rings-routing=]]))





# link target 2: <<setup-timeout>>
# link target: <<slot setup-timeout>>


****** Slot: =setup-timeout=                                                     :slot:

- Value type: =time-type=
- Initial value: =0.05d0=
- Initargs: setup-timeout
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

-----

# link target 2: <<setup-timeout>>
# link target: <<slot-accessor setup-timeout>>


******** Slot Accessor: =setup-timeout=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(setup-timeout object)
#+END_SRC


********* Methods

- (=setup-timeout= (multipath-rings-routing                   [[class multipath
  rings-routing][=lens.wsn:multipath-rings-routing=]]))





# link target 2: <<current-sink>>
# link target: <<slot current-sink>>


****** Slot: =current-sink=                                                      :slot:

- Value type: =mprings-sink=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<current-sink>>
# link target: <<slot-accessor current-sink>>


******** Slot Accessor: =current-sink=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(current-sink object)
#+END_SRC


********* Methods

- (=current-sink= (multipath-rings-routing                  [[class multipath
  rings-routing][=lens.wsn:multipath-rings-routing=]]))





# link target 2: <<connected-p>>
# link target: <<slot connected-p>>


****** Inherited Slot: =connected-p=                                             :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<connected-p>>
# link target: <<slot-accessor connected-p>>


******** Inherited Slot Accessor: =connected-p=                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(connected-p instance)
#+END_SRC


********* Methods

- (=connected-p= (gate [[class gate][=gate=]]))
- (=connected-p= (multipath-rings-routing                 [[class multipath
  rings-routing][=lens.wsn:multipath-rings-routing=]]))





# link target 2: <<tmp-sink>>
# link target: <<slot tmp-sink>>


****** Slot: =tmp-sink=                                                          :slot:

- Value type: =mprings-sink=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Used during setup




***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Slot: =buffer=                                                            :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<net-mac-control-info>>
# link target: <<class net-mac-control-info>>


**** Class: =net-mac-control-info=                                            :class:


***** Inheritance

- Parent classes:
    [[class standard-object][standard-object]]
- Precedence list:
    [[class net-mac-control-info][net-mac-control-info]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

We need to pass information between routing and MAC
  which is external to the packet i.e. not carried by a real
  packet (e.g., what is the next hop, or what was the RSSI for the
  packet received) but this information is related to the specific
  packet.


***** Direct Slots

# link target 2: <<rssi>>
# link target: <<slot rssi>>


****** Slot: =rssi=                                                              :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: rssi
- Allocation: instance


******* Description

the RSSI of the received packet


******* Accessors

-----

# link target 2: <<rssi>>
# link target: <<slot-accessor rssi>>


******** Slot Accessor: =rssi=                                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(rssi object)
#+END_SRC


********* Methods

- (=rssi= (mac-radio-control-info          [[class mac-radio-control
  info][=lens.wsn:mac-radio-control-info=]]))
- (=rssi= (net-mac-control-info          [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))
- (=rssi= (app-net-control-info          [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<lqi>>
# link target: <<slot lqi>>


****** Slot: =lqi=                                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: lqi
- Allocation: instance


******* Description

the LQI of the received packet


******* Accessors

-----

# link target 2: <<lqi>>
# link target: <<slot-accessor lqi>>


******** Slot Accessor: =lqi=                                             :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(lqi object)
#+END_SRC


********* Methods

- (=lqi= (mac-radio-control-info         [[class mac-radio-control
  info][=lens.wsn:mac-radio-control-info=]]))
- (=lqi= (net-mac-control-info         [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))
- (=lqi= (app-net-control-info         [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<next-hop>>
# link target: <<slot next-hop>>


****** Slot: =next-hop=                                                          :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: next-hop
- Allocation: instance


******* Accessors

-----

# link target 2: <<next-hop>>
# link target: <<slot-accessor next-hop>>


******** Slot Accessor: =next-hop=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(next-hop object)
#+END_SRC


********* Methods

- (=next-hop= (net-mac-control-info              [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))





# link target 2: <<last-hop>>
# link target: <<slot last-hop>>


****** Slot: =last-hop=                                                          :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: last-hop
- Allocation: instance


******* Accessors

-----

# link target 2: <<last-hop>>
# link target: <<slot-accessor last-hop>>


******** Slot Accessor: =last-hop=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(last-hop object)
#+END_SRC


********* Methods

- (=last-hop= (net-mac-control-info              [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))








-----

# link target: <<class network>>


**** Inherited Class: =network=                                               :class:


***** Inheritance

- Parent classes:
    [[class compound-module][compound-module]]
- Precedence list:
    [[class network][network]], [[class compound-module][compound-module]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class tictoc12][tictoc12]], [[class tictoc10][tictoc10]], [[class
    tictoc8][tictoc8]], [[class tictoc4][tictoc4]], [[class tictoc2][tictoc2]],
    [[class tictoc1][tictoc1]], [[class wsn][wsn]]


***** Parameters



***** Description

Base class for networks. This is the required type
  for the top-level [[compound-module]] of a simulation network and it
  is required that it has no gate specification. It is specified in
  the =network= simulation parameter.


***** Direct Slots

# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<channels>>
# link target: <<slot channels>>


****** Slot: =channels=                                                          :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<submodules>>
# link target: <<slot submodules>>


****** Slot: =submodules=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target: <<class network>>


**** Inherited Class: =network=                                               :class:


***** Inheritance

- Parent classes:
    [[class compound-module][compound-module]]
- Precedence list:
    [[class network][network]], [[class compound-module][compound-module]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class tictoc12][tictoc12]], [[class tictoc10][tictoc10]], [[class
    tictoc8][tictoc8]], [[class tictoc4][tictoc4]], [[class tictoc2][tictoc2]],
    [[class tictoc1][tictoc1]], [[class wsn][wsn]]


***** Parameters



***** Description

Base class for networks. This is the required type
  for the top-level [[compound-module]] of a simulation network and it
  is required that it has no gate specification. It is specified in
  the =network= simulation parameter.


***** Direct Slots

# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<channels>>
# link target: <<slot channels>>


****** Slot: =channels=                                                          :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<submodules>>
# link target: <<slot submodules>>


****** Slot: =submodules=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<network-control-command>>
# link target: <<class network-control-command>>


**** Class: =network-control-command=                                         :class:


***** Inheritance

- Parent classes:
    [[class communications-control-command][communications-control-command]]
- Precedence list:
    [[class network-control-command][network-control-command]], [[class
    communications-control-command][communications-control-command]], [[class
    message][message]], [[class event][event]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<argument>>
# link target: <<slot argument>>


****** Slot: =argument=                                                          :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: argument
- Allocation: instance


******* Description

Additional arguments with command


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** Inherited Slot: =timestamp=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Slot: =to=                                                                :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Slot: =from=                                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** Inherited Slot: =creation-time=                                           :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** Inherited Slot: =root-event=                                              :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Slot: =schedule-id=                                                       :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Slot: =priority=                                                          :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** Inherited Slot: =arrival-time=                                            :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** Inherited Slot: =sent-time=                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Slot: =rank=                                                              :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name, command
- Allocation: instance


******* Description

Command is held as message name





-----

# link target 2: <<network-control-message>>
# link target: <<class network-control-message>>


**** Class: =network-control-message=                                         :class:


***** Inheritance

- Parent classes:
    [[class communications-control-message][communications-control-message]]
- Precedence list:
    [[class network-control-message][network-control-message]], [[class
    communications-control-message][communications-control-message]], [[class
    message][message]], [[class event][event]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class multipath-rings-routing-control-message][multipath-rings-routing
    control-message]]


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<argument>>
# link target: <<slot argument>>


****** Slot: =argument=                                                          :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: argument
- Allocation: instance


******* Description

Additional arguments with command


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** Inherited Slot: =timestamp=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Slot: =to=                                                                :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Slot: =from=                                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** Inherited Slot: =creation-time=                                           :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** Inherited Slot: =root-event=                                              :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Slot: =schedule-id=                                                       :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Slot: =priority=                                                          :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** Inherited Slot: =arrival-time=                                            :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** Inherited Slot: =sent-time=                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Slot: =rank=                                                              :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name, command
- Allocation: instance


******* Description

Command is held as message name





-----

# link target: <<class node>>


**** Class: =node=                                                            :class:


***** Inheritance

- Parent classes:
    [[class compound-module][compound-module]]
- Precedence list:
    [[class node][node]], [[class compound-module][compound-module]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- network-address :: a =t=.  NIL
- startup-offset :: a =time-type=. Default: =0.0d0=. Node offset startup delay in seconds
- startup-randomization :: a =time-type=. Default: =0.05d0=. node startup randomisation, in seconds

***** Description

Not documented.


***** Direct Slots

# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target: <<slot-accessor network>>


******** Inherited Slot Accessor: =network=                               :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(network object)
#+END_SRC


********* Methods

- (=network= (node [[class node][=lens.wsn:node=]]))
- (=network= (instance [[class t][=t=]]))
- (=network= (simulation [[class simulation][=simulation=]]))





# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<nodeid>>
# link target: <<slot-accessor nodeid>>


******** Slot Accessor: =nodeid=                                          :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(nodeid object)
#+END_SRC


********* Methods

- (=nodeid= (node [[class node][=lens.wsn:node=]]))





# link target 2: <<network-address>>
# link target: <<slot network-address>>


****** Slot: =network-address=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

-----

# link target 2: <<network-address>>
# link target: <<slot-accessor network-address>>


******** Slot Accessor: =network-address=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(network-address object)
#+END_SRC


********* Methods

- (=network-address= (instance [[class routing][=lens.wsn:routing=]]))
- (=network-address= (node [[class node][=lens.wsn:node=]]))





# link target 2: <<startup-offset>>
# link target: <<slot startup-offset>>


****** Slot: =startup-offset=                                                    :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Node offset startup delay in seconds


******* Accessors

-----

# link target 2: <<startup-offset>>
# link target: <<slot-accessor startup-offset>>


******** Slot Accessor: =startup-offset=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(startup-offset object)
#+END_SRC


********* Methods

- (=startup-offset= (node [[class node][=lens.wsn:node=]]))





# link target 2: <<startup-randomization>>
# link target: <<slot startup-randomization>>


****** Slot: =startup-randomization=                                             :slot:

- Value type: =time-type=
- Initial value: =0.05d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

node startup randomisation, in seconds


******* Accessors

-----

# link target 2: <<startup-randomization>>
# link target: <<slot-accessor startup-randomization>>


******** Slot Accessor: =startup-randomization=                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(startup-randomization object)
#+END_SRC


********* Methods

- (=startup-randomization= (node [[class node][=lens.wsn:node=]]))







***** Indirect Slots

# link target 2: <<channels>>
# link target: <<slot channels>>


****** Slot: =channels=                                                          :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<submodules>>
# link target: <<slot submodules>>


****** Slot: =submodules=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target: <<class physical-process>>


**** Class: =physical-process=                                                :class:


***** Inheritance

- Parent classes:
    [[class module][module]]
- Precedence list:
    [[class physical-process][physical-process]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class direct-node-physical-process][direct-node-physical-process]], [[class
    scenario-physical-process][scenario-physical-process]]


***** Parameters

- description :: a =string=.  Description of physical process - default 
- function :: a =(eval :type function)=. Default: =#'(LAMBDA (M C TM)
                                                       (DECLARE
                                                        (IGNORE M C TM))
                                                       (UNIFORM 0.0 1.0))=. a real function of measurand, location and time

***** Description

Not documented.


***** Direct Slots

# link target 2: <<description>>
# link target: <<slot description>>


****** Slot: =description=                                                       :slot:

- Value type: =string=
- Initial value: =NIL=
- Initargs: description
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Description of physical process - default 


******* Accessors

-----

# link target 2: <<description>>
# link target: <<slot-accessor description>>


******** Slot Accessor: =description=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(description object)
#+END_SRC


********* Methods

- (=description= (physical-process                 [[class physical
  process][=lens.wsn:physical-process=]]))





# link target: <<slot function>>


****** Inherited Slot: =function=                                                :slot:

- Value type: =function=
- Initial value: =#'(LAMBDA (LENS.WSN::M LENS.WSN::C LENS.WSN::TM)             
         (DECLARE (IGNORE LENS.WSN::M LENS.WSN::C LENS.WSN::TM))               
       (UNIFORM 0.0 1.0))=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (format (eval type function))


******* Description

a real function of measurand, location and time


******* Accessors

-----

# link target 2: <<physical-process-function>>
# link target: <<slot-accessor physical-process-function>>


******** Slot Accessor: =physical-process-function=                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(physical-process-function object)
#+END_SRC


********* Methods

- (=physical-process-function= (physical-process                              
  [[class physical-process][=lens.wsn:physical-process=]]))







***** Indirect Slots

# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target: <<class radio>>


**** Class: =radio=                                                           :class:


***** Inheritance

- Parent classes:
    [[class comms-module][comms-module]]
- Precedence list:
    [[class radio][radio]], [[class comms-module][comms-module]], [[class wsn
    module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- address :: a =integer=.  MAC address - will default to node index.
- parameters-file :: a =pathname=.  the file that contains most radio parameters
- initial-mode :: a =symbol=.  we can choose an rx-mode to begin with. Modes are
         defined in the RadioParametersFile. nil means use
         the first mode defined)
- state :: a =symbol=. Default: ='RX=. we can choose a radio state to begin
          with. RX and TX are always there. according to the radio
          defined we can choose from a different set of sleep states
- initial-tx-output-power :: a =float=.  we can choose a Txpower to begin with. Possible tx
    power values are defined in the RadioParametersFile. nil
    means use the first tx power defined (which is also the highest)
- initial-sleep-level :: a =symbol=.  we can choose a sleep level which will be used
    when a transition to SLEEP state is requested. nil means
    use first level defined (will usually be the fastest and most
    energy consuming sleep state)
- carrier-frequency :: a =float=. Default: =2.4e9=. the carrier frequency (in Hz) to begin with.
- collision-model :: a =symbol=. Default: ='ADDITIVE-INTERFERENCE-MODEL=. none, simple, additive or advance interference
- cca-threshold :: a =float=. Default: =-95=. the threshold of the RSSI register (in dBm) were
    above it channel is NOT clear
- symbols-for-rssi :: a =integer=. Default: =8=. NIL
- carrier-sense-interrupt-enabled :: a =boolean=.  NIL
- max-phy-frame-size :: a =fixnum=. Default: =1024=. in bytes
- avg-busy-frame :: a =time-type=. Default: =1.0d0=. integration time for measuring avg busy time
- processing-delay :: a =time-type=. Default: =1.d-5=. delay to pass packets/messages/interrupts to upper layer

***** Description

Not documented.


***** Direct Slots

# link target 2: <<address>>
# link target: <<slot address>>


****** Slot: =address=                                                           :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

MAC address - will default to node index.


******* Accessors

-----

# link target 2: <<mac-address>>
# link target: <<slot-accessor mac-address>>


******** Slot Accessor: =mac-address=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(mac-address object)
#+END_SRC


********* Methods

- (=mac-address= (radio [[class radio][=lens.wsn:radio=]]))
- (=mac-address= (node [[class node][=lens.wsn:node=]]))
- (=mac-address= (mac [[class mac][=lens.wsn:mac=]]))





# link target 2: <<parameters-file>>
# link target: <<slot parameters-file>>


****** Slot: =parameters-file=                                                   :slot:

- Value type: =pathname=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

the file that contains most radio parameters


******* Accessors

-----

# link target 2: <<parameters-file>>
# link target: <<slot-accessor parameters-file>>


******** Slot Accessor: =parameters-file=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(parameters-file object)
#+END_SRC


********* Methods

- (=parameters-file= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<initial-mode>>
# link target: <<slot initial-mode>>


****** Slot: =initial-mode=                                                      :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

we can choose an rx-mode to begin with. Modes are
         defined in the RadioParametersFile. nil means use
         the first mode defined)


# link target 2: <<state>>
# link target: <<slot state>>


****** Slot: =state=                                                             :slot:

- Value type: =symbol=
- Initial value: ='LENS.WSN:RX=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

we can choose a radio state to begin
          with. RX and TX are always there. according to the radio
          defined we can choose from a different set of sleep states


******* Accessors

-----

# link target 2: <<state>>
# link target: <<slot-accessor state>>


******** Slot Accessor: =state=                                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(state instance)
#+END_SRC


********* Description

Return current state of instance


********* Methods

- (=state= (mac802.15.4 [[class mac802.15.4][=lens.wsn:mac802.15.4=]]))
- (=state= (tmac [[class tmac][=lens.wsn:tmac=]]))
- (=state= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))
- (=state= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<initial-tx-output-power>>
# link target: <<slot initial-tx-output-power>>


****** Slot: =initial-tx-output-power=                                           :slot:

- Value type: =float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

we can choose a Txpower to begin with. Possible tx
    power values are defined in the RadioParametersFile. nil
    means use the first tx power defined (which is also the highest)


# link target 2: <<initial-sleep-level>>
# link target: <<slot initial-sleep-level>>


****** Slot: =initial-sleep-level=                                               :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

we can choose a sleep level which will be used
    when a transition to SLEEP state is requested. nil means
    use first level defined (will usually be the fastest and most
    energy consuming sleep state)


# link target 2: <<carrier-frequency>>
# link target: <<slot carrier-frequency>>


****** Slot: =carrier-frequency=                                                 :slot:

- Value type: =float=
- Initial value: =2.4e9=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (units hz)


******* Description

the carrier frequency (in Hz) to begin with.


******* Accessors

-----

# link target 2: <<carrier-frequency>>
# link target: <<slot-accessor carrier-frequency>>


******** Slot Accessor: =carrier-frequency=                               :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(carrier-frequency object)
#+END_SRC


********* Methods

- (=carrier-frequency= (radio [[class radio][=lens.wsn:radio=]]))
- (=carrier-frequency= (wireless-signal-start                       [[class
  wireless-signal-start][=lens.wsn::wireless-signal-start=]]))





# link target 2: <<encoding>>
# link target: <<slot encoding>>


****** Slot: =encoding=                                                          :slot:

- Value type: =encoding-type=
- Initial value: ='LENS.WSN::NRZ=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<encoding>>
# link target: <<slot-accessor encoding>>


******** Slot Accessor: =encoding=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(encoding object)
#+END_SRC


********* Methods

- (=encoding= (radio [[class radio][=lens.wsn:radio=]]))
- (=encoding= (wireless-signal-start              [[class wireless-signal
  start][=lens.wsn::wireless-signal-start=]]))





# link target 2: <<collision-model>>
# link target: <<slot collision-model>>


****** Slot: =collision-model=                                                   :slot:

- Value type: =symbol=
- Initial value: ='LENS.WSN:ADDITIVE-INTERFERENCE-MODEL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

none, simple, additive or advance interference


******* Accessors

-----

# link target 2: <<collision-model>>
# link target: <<slot-accessor collision-model>>


******** Slot Accessor: =collision-model=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(collision-model object)
#+END_SRC


********* Methods

- (=collision-model= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<cca-threshold>>
# link target: <<slot cca-threshold>>


****** Slot: =cca-threshold=                                                     :slot:

- Value type: =float=
- Initial value: =-95=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

the threshold of the RSSI register (in dBm) were
    above it channel is NOT clear


******* Accessors

-----

# link target 2: <<cca-threshold>>
# link target: <<slot-accessor cca-threshold>>


******** Slot Accessor: =cca-threshold=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cca-threshold object)
#+END_SRC


********* Methods

- (=cca-threshold= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<symbols-for-rssi>>
# link target: <<slot symbols-for-rssi>>


****** Slot: =symbols-for-rssi=                                                  :slot:

- Value type: =integer=
- Initial value: =8=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

-----

# link target 2: <<symbols-for-rssi>>
# link target: <<slot-accessor symbols-for-rssi>>


******** Slot Accessor: =symbols-for-rssi=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(symbols-for-rssi object)
#+END_SRC


********* Methods

- (=symbols-for-rssi= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<carrier-sense-interrupt-enabled>>
# link target: <<slot carrier-sense-interrupt-enabled>>


****** Slot: =carrier-sense-interrupt-enabled=                                   :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

-----

# link target 2: <<carrier-sense-interrupt-enabled>>
# link target: <<slot-accessor carrier-sense-interrupt-enabled>>


******** Slot Accessor: =carrier-sense-interrupt-enabled=                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(carrier-sense-interrupt-enabled object)
#+END_SRC


********* Methods

- (=carrier-sense-interrupt-enabled= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<max-phy-frame-size>>
# link target: <<slot max-phy-frame-size>>


****** Slot: =max-phy-frame-size=                                                :slot:

- Value type: =fixnum=
- Initial value: =1024=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (units b)


******* Description

in bytes


******* Accessors

-----

# link target 2: <<max-phy-frame-size>>
# link target: <<slot-accessor max-phy-frame-size>>


******** Slot Accessor: =max-phy-frame-size=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(max-phy-frame-size object)
#+END_SRC


********* Methods

- (=max-phy-frame-size= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =6=
- Initargs: none
- Allocation: instance


******* Description

in bytes - 802.15.4=6bytes


# link target 2: <<avg-busy-frame>>
# link target: <<slot avg-busy-frame>>


****** Slot: =avg-busy-frame=                                                    :slot:

- Value type: =time-type=
- Initial value: =1.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (units s)


******* Description

integration time for measuring avg busy time


******* Accessors

-----

# link target 2: <<avg-busy-frame>>
# link target: <<slot-accessor avg-busy-frame>>


******** Slot Accessor: =avg-busy-frame=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(avg-busy-frame object)
#+END_SRC


********* Methods

- (=avg-busy-frame= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<avg-busy>>
# link target: <<slot avg-busy>>


****** Slot: =avg-busy=                                                          :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<avg-busy>>
# link target: <<slot-accessor avg-busy>>


******** Slot Accessor: =avg-busy=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(avg-busy object)
#+END_SRC


********* Methods

- (=avg-busy= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** Inherited Slot: =buffer-size=                                             :slot:

- Value type: =t=
- Initial value: =16=
- Initargs: none
- Allocation: instance


# link target: <<slot wireless-channel>>


****** Slot: =wireless-channel=                                                  :slot:

- Value type: =gate=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Gate to directly send wireless messages
               to. Messages from the wireless layer will be send
               direct to fromWireless input gate in radio module


******* Accessors

-----

# link target: <<slot-accessor wireless-channel>>


******** Slot Accessor: =wireless-channel=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(wireless-channel object)
#+END_SRC


********* Methods

- (=wireless-channel= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<tx-levels>>
# link target: <<slot tx-levels>>


****** Slot: =tx-levels=                                                         :slot:

- Value type: =sequence=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<tx-levels>>
# link target: <<slot-accessor tx-levels>>


******** Slot Accessor: =tx-levels=                                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(tx-levels object)
#+END_SRC


********* Methods

- (=tx-levels= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<rx-modes>>
# link target: <<slot rx-modes>>


****** Slot: =rx-modes=                                                          :slot:

- Value type: =sequence=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<rx-modes>>
# link target: <<slot-accessor rx-modes>>


******** Slot Accessor: =rx-modes=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(rx-modes object)
#+END_SRC


********* Methods

- (=rx-modes= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<sleep-levels>>
# link target: <<slot sleep-levels>>


****** Slot: =sleep-levels=                                                      :slot:

- Value type: =sequence=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<sleep-levels>>
# link target: <<slot-accessor sleep-levels>>


******** Slot Accessor: =sleep-levels=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sleep-levels object)
#+END_SRC


********* Methods

- (=sleep-levels= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<transitions>>
# link target: <<slot transitions>>


****** Slot: =transitions=                                                       :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Power and delay for transitions between states stored in p-list of p-lists - access is (getf (getf args to) from)


******* Accessors

-----

# link target 2: <<transitions>>
# link target: <<slot-accessor transitions>>


******** Slot Accessor: =transitions=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(transitions object)
#+END_SRC


********* Methods

- (=transitions= (radio [[class radio][=lens.wsn:radio=]]))





# link target: <<slot tx-level>>


****** Slot: =tx-level=                                                          :slot:

- Value type: =tx-level=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target: <<slot-accessor tx-level>>


******** Slot Accessor: =tx-level=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(tx-level object)
#+END_SRC


********* Methods

- (=tx-level= (radio [[class radio][=lens.wsn:radio=]]))





# link target: <<slot rx-mode>>


****** Slot: =rx-mode=                                                           :slot:

- Value type: =rx-mode=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target: <<slot-accessor rx-mode>>


******** Slot Accessor: =rx-mode=                                         :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(rx-mode object)
#+END_SRC


********* Methods

- (=rx-mode= (radio [[class radio][=lens.wsn:radio=]]))





# link target: <<slot sleep-level>>


****** Slot: =sleep-level=                                                       :slot:

- Value type: =sleep-level=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target: <<slot-accessor sleep-level>>


******** Slot Accessor: =sleep-level=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sleep-level object)
#+END_SRC


********* Methods

- (=sleep-level= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<last-transition-time>>
# link target: <<slot last-transition-time>>


****** Slot: =last-transition-time=                                              :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<last-transition-time>>
# link target: <<slot-accessor last-transition-time>>


******** Slot Accessor: =last-transition-time=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(last-transition-time object)
#+END_SRC


********* Methods

- (=last-transition-time= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<changing-to-state>>
# link target: <<slot changing-to-state>>


****** Slot: =changing-to-state=                                                 :slot:

- Value type: =radio-state=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

indicates that the Radio is in the middle of changing to
							a new state


******* Accessors

-----

# link target 2: <<changing-to-state>>
# link target: <<slot-accessor changing-to-state>>


******** Slot Accessor: =changing-to-state=                               :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(changing-to-state object)
#+END_SRC


********* Methods

- (=changing-to-state= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<received-signals>>
# link target: <<slot received-signals>>


****** Slot: =received-signals=                                                  :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

 a list of signals curently being received


******* Accessors

-----

# link target 2: <<received-signals>>
# link target: <<slot-accessor received-signals>>


******** Slot Accessor: =received-signals=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(received-signals object)
#+END_SRC


********* Methods

- (=received-signals= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<time-of-last-signal-change>>
# link target: <<slot time-of-last-signal-change>>


****** Slot: =time-of-last-signal-change=                                        :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

last time the above list changed


******* Accessors

-----

# link target 2: <<time-of-last-signal-change>>
# link target: <<slot-accessor time-of-last-signal-change>>


******** Slot Accessor: =time-of-last-signal-change=                      :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(time-of-last-signal-change object)
#+END_SRC


********* Methods

- (=time-of-last-signal-change= (radio [[class radio][=lens.wsn:radio=]]))





# link target: <<slot total-power-received>>


****** Slot: =total-power-received=                                              :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

 a history of recent changes in total received power to help calculate RSSI


******* Accessors

-----

# link target: <<slot-accessor total-power-received>>


******** Slot Accessor: =total-power-received=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(total-power-received object)
#+END_SRC


********* Methods

- (=total-power-received= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<rssi-integration-time>>
# link target: <<slot rssi-integration-time>>


****** Slot: =rssi-integration-time=                                             :slot:

- Value type: =time-type=
- Initial value: =1.0d0=
- Initargs: none
- Allocation: instance


******* Description

span of time the total received power is integrated to calculate RSSI


******* Accessors

-----

# link target 2: <<rssi-integration-time>>
# link target: <<slot-accessor rssi-integration-time>>


******** Slot Accessor: =rssi-integration-time=                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(rssi-integration-time object)
#+END_SRC


********* Methods

- (=rssi-integration-time= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<cs-interrupt-message>>
# link target: <<slot cs-interrupt-message>>


****** Slot: =cs-interrupt-message=                                              :slot:

- Value type: =radio-control-message=
- Initial value: =(MAKE-INSTANCE 'LENS.WSN:RADIO-CONTROL-MESSAGE :COMMAND      
                           'LENS.WSN:CARRIER-SENSE-INTERRUPT)=
- Initargs: none
- Allocation: instance


******* Description

message that carries a future carrier sense interrupt


******* Accessors

-----

# link target 2: <<cs-interrupt-message>>
# link target: <<slot-accessor cs-interrupt-message>>


******** Slot Accessor: =cs-interrupt-message=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cs-interrupt-message object)
#+END_SRC


********* Methods

- (=cs-interrupt-message= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<state-transition-message>>
# link target: <<slot state-transition-message>>


****** Slot: =state-transition-message=                                          :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'MESSAGE :NAME 'LENS.WSN::STATE-TRANSITION)=
- Initargs: none
- Allocation: instance


******* Description

Self message to complete state transmisition


******* Accessors

-----

# link target 2: <<state-transition-message>>
# link target: <<slot-accessor state-transition-message>>


******** Slot Accessor: =state-transition-message=                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(state-transition-message object)
#+END_SRC


********* Methods

- (=state-transition-message= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<continue-tx-message>>
# link target: <<slot continue-tx-message>>


****** Slot: =continue-tx-message=                                               :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'MESSAGE :NAME 'LENS.WSN::RADIO-CONTINUE-TX)=
- Initargs: none
- Allocation: instance


******* Description

Self message to continue transmitting


******* Accessors

-----

# link target 2: <<continue-tx-message>>
# link target: <<slot-accessor continue-tx-message>>


******** Slot Accessor: =continue-tx-message=                             :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(continue-tx-message object)
#+END_SRC


********* Methods

- (=continue-tx-message= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<state-after-tx>>
# link target: <<slot state-after-tx>>


****** Slot: =state-after-tx=                                                    :slot:

- Value type: =radio-state=
- Initial value: ='LENS.WSN:RX=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<state-after-tx>>
# link target: <<slot-accessor state-after-tx>>


******** Slot Accessor: =state-after-tx=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(state-after-tx object)
#+END_SRC


********* Methods

- (=state-after-tx= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<processing-delay>>
# link target: <<slot processing-delay>>


****** Slot: =processing-delay=                                                  :slot:

- Value type: =time-type=
- Initial value: =1.d-5=
- Initargs: processing-delay
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

delay to pass packets/messages/interrupts to upper layer


******* Accessors

-----

# link target 2: <<processing-delay>>
# link target: <<slot-accessor processing-delay>>


******** Slot Accessor: =processing-delay=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(processing-delay object)
#+END_SRC


********* Methods

- (=processing-delay= (radio [[class radio][=lens.wsn:radio=]]))







***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Slot: =buffer=                                                            :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<radio-control-command>>
# link target: <<class radio-control-command>>


**** Class: =radio-control-command=                                           :class:


***** Inheritance

- Parent classes:
    [[class communications-control-command][communications-control-command]]
- Precedence list:
    [[class radio-control-command][radio-control-command]], [[class communications
    control-command][communications-control-command]], [[class message][message]],
    [[class event][event]], [[class owned-object][owned-object]], [[class named
    object][named-object]], [[class lens-object][lens-object]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<argument>>
# link target: <<slot argument>>


****** Slot: =argument=                                                          :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: argument
- Allocation: instance


******* Description

Additional arguments with command


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** Inherited Slot: =timestamp=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Slot: =to=                                                                :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Slot: =from=                                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** Inherited Slot: =creation-time=                                           :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** Inherited Slot: =root-event=                                              :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Slot: =schedule-id=                                                       :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Slot: =priority=                                                          :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** Inherited Slot: =arrival-time=                                            :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** Inherited Slot: =sent-time=                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Slot: =rank=                                                              :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name, command
- Allocation: instance


******* Description

Command is held as message name





-----

# link target 2: <<radio-control-message>>
# link target: <<class radio-control-message>>


**** Class: =radio-control-message=                                           :class:


***** Inheritance

- Parent classes:
    [[class communications-control-message][communications-control-message]]
- Precedence list:
    [[class radio-control-message][radio-control-message]], [[class communications
    control-message][communications-control-message]], [[class message][message]],
    [[class event][event]], [[class owned-object][owned-object]], [[class named
    object][named-object]], [[class lens-object][lens-object]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<argument>>
# link target: <<slot argument>>


****** Slot: =argument=                                                          :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: argument
- Allocation: instance


******* Description

Additional arguments with command


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** Inherited Slot: =timestamp=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Slot: =to=                                                                :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Slot: =from=                                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** Inherited Slot: =creation-time=                                           :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** Inherited Slot: =root-event=                                              :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Slot: =schedule-id=                                                       :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Slot: =priority=                                                          :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** Inherited Slot: =arrival-time=                                            :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** Inherited Slot: =sent-time=                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Slot: =rank=                                                              :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name, command
- Allocation: instance


******* Description

Command is held as message name





-----

# link target: <<class ram-store>>


**** Class: =ram-store=                                                       :class:


***** Inheritance

- Parent classes:
    [[class message][message]]
- Precedence list:
    [[class ram-store][ram-store]], [[class message][message]], [[class
    event][event]], [[class owned-object][owned-object]], [[class named
    object][named-object]], [[class lens-object][lens-object]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Message to change ram used


***** Direct Slots

# link target 2: <<num-bytes>>
# link target: <<slot num-bytes>>


****** Slot: =num-bytes=                                                         :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: num-bytes
- Allocation: instance


******* Description

Use -ve value to free ram


******* Accessors

-----

# link target 2: <<num-bytes>>
# link target: <<slot-accessor num-bytes>>


******** Slot Accessor: =num-bytes=                                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(num-bytes object)
#+END_SRC


********* Methods

- (=num-bytes= (ram-store [[class ram-store][=lens.wsn:ram-store=]]))







***** Indirect Slots

# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** Inherited Slot: =timestamp=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Slot: =to=                                                                :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Slot: =from=                                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** Inherited Slot: =creation-time=                                           :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** Inherited Slot: =root-event=                                              :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Slot: =schedule-id=                                                       :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Slot: =priority=                                                          :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** Inherited Slot: =arrival-time=                                            :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** Inherited Slot: =sent-time=                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Slot: =rank=                                                              :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<resources>>
# link target: <<class resources>>


**** Class: =resources=                                                       :class:


***** Inheritance

- Parent classes:
    [[class wsn-module][wsn-module]]
- Precedence list:
    [[class resources][resources]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- ram-size :: a =integer=. Default: =0=. in kB
- flash-size :: a =integer=. Default: =0=. in kB
- flash-write-cost :: a =integer=. Default: =0=. in kB
- ram-read-cost :: a =integer=. Default: =0=. in kB
- cpu-power-levels :: a =list=.  plist mapping power level names to power
- cpu-power-level :: a =symbol=.  Current power level - initialised from parameter
- clock-drift-sigma :: a =time-type=. Default: =3.d-5=. Standard deviation in cpu clock drift
- remaining-energy :: a =double-float=. Default: =18720.0d0=. In joules - default is 2 AA batteries
- baseline-node-power :: a =real=. Default: =0.006=. Periodic power consumption
- update-interval :: a =time-type=. Default: =1.0d0=. Interval for periodic updates in energy

***** Description

Not documented.


***** Direct Slots

# link target 2: <<ram-size>>
# link target: <<slot ram-size>>


****** Slot: =ram-size=                                                          :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: ram-size
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

in kB


# link target 2: <<flash-size>>
# link target: <<slot flash-size>>


****** Slot: =flash-size=                                                        :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: flash-size
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

in kB


# link target 2: <<total-ram-data>>
# link target: <<slot total-ram-data>>


****** Slot: =total-ram-data=                                                    :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<total-ram-data>>
# link target: <<slot-accessor total-ram-data>>


******** Slot Accessor: =total-ram-data=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(total-ram-data object)
#+END_SRC


********* Methods

- (=total-ram-data= (resources [[class resources][=lens.wsn:resources=]]))





# link target 2: <<flash-write-cost>>
# link target: <<slot flash-write-cost>>


****** Slot: =flash-write-cost=                                                  :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: flash-write-cost
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

in kB


# link target 2: <<ram-read-cost>>
# link target: <<slot ram-read-cost>>


****** Slot: =ram-read-cost=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: ram-read-cost
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

in kB


# link target 2: <<cpu-power-levels>>
# link target: <<slot cpu-power-levels>>


****** Slot: =cpu-power-levels=                                                  :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: cpu-power-levels
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

plist mapping power level names to power


# link target 2: <<cpu-power-level>>
# link target: <<slot cpu-power-level>>


****** Slot: =cpu-power-level=                                                   :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: cpu-power-level
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Current power level - initialised from parameter


# link target 2: <<clock-drift-sigma>>
# link target: <<slot clock-drift-sigma>>


****** Slot: =clock-drift-sigma=                                                 :slot:

- Value type: =time-type=
- Initial value: =3.d-5=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Standard deviation in cpu clock drift


# link target 2: <<remaining-energy>>
# link target: <<slot remaining-energy>>


****** Slot: =remaining-energy=                                                  :slot:

- Value type: =double-float=
- Initial value: =18720.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

In joules - default is 2 AA batteries


******* Accessors

-----

# link target 2: <<remaining-energy>>
# link target: <<slot-accessor remaining-energy>>


******** Slot Accessor: =remaining-energy=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(remaining-energy object)
#+END_SRC


********* Methods

- (=remaining-energy= (resources [[class resources][=lens.wsn:resources=]]))





# link target 2: <<time-of-last-calculation>>
# link target: <<slot time-of-last-calculation>>


****** Slot: =time-of-last-calculation=                                          :slot:

- Value type: =time-type=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<baseline-node-power>>
# link target: <<slot baseline-node-power>>


****** Slot: =baseline-node-power=                                               :slot:

- Value type: =real=
- Initial value: =0.006=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Periodic power consumption


# link target 2: <<current-node-power>>
# link target: <<slot current-node-power>>


****** Slot: =current-node-power=                                                :slot:

- Value type: =float=
- Initial value: =0.0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<current-node-power>>
# link target: <<slot-accessor current-node-power>>


******** Slot Accessor: =current-node-power=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(current-node-power object)
#+END_SRC


********* Methods

- (=current-node-power= (resources [[class resources][=lens.wsn:resources=]]))





# link target 2: <<power-levels>>
# link target: <<slot power-levels>>


****** Slot: =power-levels=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Last power drawn indexed by module


******* Accessors

-----

# link target 2: <<power-levels>>
# link target: <<slot-accessor power-levels>>


******** Slot Accessor: =power-levels=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(power-levels object)
#+END_SRC


********* Methods

- (=power-levels= (resources [[class resources][=lens.wsn:resources=]]))





# link target 2: <<update-interval>>
# link target: <<slot update-interval>>


****** Slot: =update-interval=                                                   :slot:

- Value type: =time-type=
- Initial value: =1.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Interval for periodic updates in energy


******* Accessors

-----

# link target 2: <<update-interval>>
# link target: <<slot-accessor update-interval>>


******** Slot Accessor: =update-interval=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(update-interval object)
#+END_SRC


********* Methods

- (=update-interval= (line-mobility                     [[class line
  mobility][=lens.wsn::line-mobility=]]))
- (=update-interval= (resources [[class resources][=lens.wsn:resources=]]))





# link target 2: <<periodic-update-message>>
# link target: <<slot periodic-update-message>>


****** Slot: =periodic-update-message=                                           :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'MESSAGE :NAME                               
  'LENS.WSN::RESOURCE-PERIODIC-UPDATE)=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<periodic-update-message>>
# link target: <<slot-accessor periodic-update-message>>


******** Slot Accessor: =periodic-update-message=                         :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(periodic-update-message object)
#+END_SRC


********* Methods

- (=periodic-update-message= (resources [[class
  resources][=lens.wsn:resources=]]))





# link target 2: <<clock-drift>>
# link target: <<slot clock-drift>>


****** Slot: =clock-drift=                                                       :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Actual clock drift for this module


******* Accessors

-----

# link target 2: <<clock-drift>>
# link target: <<slot-accessor clock-drift>>


******** Slot Accessor: =clock-drift=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(clock-drift object)
#+END_SRC


********* Methods

- (=clock-drift= (resources [[class resources][=lens.wsn:resources=]]))





# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<disabled-p>>
# link target: <<slot-accessor disabled-p>>


******** Inherited Slot Accessor: =disabled-p=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(disabled-p object)
#+END_SRC


********* Methods

- (=disabled-p= (resources [[class resources][=lens.wsn:resources=]]))
- (=disabled-p= (wsn-module [[class wsn-module][=lens.wsn:wsn-module=]]))
- (=disabled-p= (delay-channel [[class delay-channel][=delay-channel=]]))







***** Indirect Slots

# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<routing>>
# link target: <<class routing>>


**** Class: =routing=                                                         :class:


***** Inheritance

- Parent classes:
    [[class comms-module][comms-module]]
- Precedence list:
    [[class routing][routing]], [[class comms-module][comms-module]], [[class wsn
    module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class multipath-rings-routing][multipath-rings-routing]], [[class leach
    routing][leach-routing]], [[class bypass-routing][bypass-routing]]


***** Parameters

- max-net-frame-size :: a =integer=. Default: =0=. in bytes (0 for no limit)

***** Description

Not documented.


***** Direct Slots

# link target 2: <<max-net-frame-size>>
# link target: <<slot max-net-frame-size>>


****** Slot: =max-net-frame-size=                                                :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (units b)


******* Description

in bytes (0 for no limit)


******* Accessors

-----

# link target 2: <<max-net-frame-size>>
# link target: <<slot-accessor max-net-frame-size>>


******** Slot Accessor: =max-net-frame-size=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(max-net-frame-size object)
#+END_SRC


********* Methods

- (=max-net-frame-size= (routing [[class routing][=lens.wsn:routing=]]))







***** Indirect Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =integer=
- Initial value: =10=
- Initargs: none
- Allocation: instance


******* Description

in bytes


# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** Inherited Slot: =buffer-size=                                             :slot:

- Value type: =integer=
- Initial value: =32=
- Initargs: buffer-size
- Allocation: instance


******* Description

Size of TX buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Slot: =buffer=                                                            :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<routing-packet>>
# link target: <<class routing-packet>>


**** Class: =routing-packet=                                                  :class:


***** Inheritance

- Parent classes:
    [[class wsn-packet][wsn-packet]]
- Precedence list:
    [[class routing-packet][routing-packet]], [[class wsn-packet][wsn-packet]],
    [[class packet][packet]], [[class message][message]], [[class event][event]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class multipath-rings-routing-packet][multipath-rings-routing-packet]],
    [[class leach-routing-packet][leach-routing-packet]]


***** Description

A generic routing packet header. An app packet will
  be encapsulated in it. If definining your own routing protocol and
  need a more specialized packet you have to create one the extends
  this generic packet.


***** Direct Slots



***** Indirect Slots

# link target 2: <<sequence-number>>
# link target: <<slot sequence-number>>


****** Slot: =sequence-number=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: sequence-number, seqnum
- Allocation: instance


******* Description

a field to distinguish between packets


# link target 2: <<destination>>
# link target: <<slot destination>>


****** Internal Slot: =destination=                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: destination
- Allocation: instance


******* Description

the destination address of the packet to be sent


# link target 2: <<source>>
# link target: <<slot source>>


****** Internal Slot: =source=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: source
- Allocation: instance


******* Description

the  source address of the received packet


# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: byte-length, header-overhead
- Allocation: instance


******* Description

In bytes


# link target 2: <<bit-error-p>>
# link target: <<slot bit-error-p>>


****** Inherited Slot: =bit-error-p=                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The result of error modelling after the packet is
sent through a channel that has a nonzero packet error rate (PER) or
bit error rate (BER). It is up to the receiver to examine this flag
after having received the packet, and to act upon it.


# link target 2: <<reception-start-p>>
# link target: <<slot reception-start-p>>


****** Slot: =reception-start-p=                                                 :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: deliver-on-reception-start
- Allocation: instance


******* Description

Identify whether this packet represents the start
or the end of the reception after the packet travelled through a
channel with a data rate. This flag is controlled by the
deliver-on-reception-start flag of the receiving gate.


# link target 2: <<control-info>>
# link target: <<slot control-info>>


****** Inherited Slot: =control-info=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: control-info
- Allocation: instance


******* Description

Additional data to be passed with packet between
    protocol layers.


# link target 2: <<duration>>
# link target: <<slot duration>>


****** Internal Slot: =duration=                                                 :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Duration of last transmission


# link target 2: <<encapsulated-packet>>
# link target: <<slot encapsulated-packet>>


****** Slot: =encapsulated-packet=                                               :slot:

- Value type: =packet=
- Initial value: =NIL=
- Initargs: encapsulated-packet
- Allocation: instance


******* Description

Higher level encapsulated protocol packet.


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** Inherited Slot: =timestamp=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Slot: =to=                                                                :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Slot: =from=                                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** Inherited Slot: =creation-time=                                           :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** Inherited Slot: =root-event=                                              :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Slot: =schedule-id=                                                       :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Slot: =priority=                                                          :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** Inherited Slot: =arrival-time=                                            :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** Inherited Slot: =sent-time=                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Slot: =rank=                                                              :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<tmac>>
# link target: <<class tmac>>


**** Class: =tmac=                                                            :class:


***** Inheritance

- Parent classes:
    [[class mac][mac]]
- Precedence list:
    [[class tmac][tmac]], [[class mac][mac]], [[class comms-module][comms-module]],
    [[class wsn-module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- print-state-transitions :: a =boolean=.  Debugging parameter
- ack-packet-size :: a =integer=. Default: =11=. NIL
- sync-packet-size :: a =integer=. Default: =11=. NIL
- rts-packet-size :: a =integer=. Default: =13=. NIL
- cts-packet-size :: a =integer=. Default: =13=. NIL
- max-mac-frame-size :: a =t=. Default: =0=. NIL
- header-overhead :: a =t=. Default: =11=. NIL
- buffer-size :: a =t=. Default: =32=. NIL
- max-tx-retries :: a =integer=. Default: =2=. NIL
- allow-sink-sync :: a =boolean=. Default: =T=. allows sink node to start synchronisation immediately
- use-frts :: a =boolean=.  enable/disable FRTS (Future Request To Send), true
    value not supported
- use-rts-cts :: a =boolean=. Default: =T=. enable/disable RTS/CTS handshake
- disable-ta-extension :: a =boolean=.  disabling TA extension effectively creates an SMAC
    protocol
- conservative-ta :: a =boolean=. Default: =T=. conservative activation timeout - will always
     stay awake for at least 15 ms after any activity on the radio
- resync-time :: a =time-type=. Default: =6.0d0=. time for re-sending SYNC msg, in seconds
- contention-period :: a =time-type=. Default: =0.01=. NIL
- listen-timeout :: a =time-type=. Default: =0.015=. 15 ms, is the timeout TA (Activation event)
- wait-timeout :: a =time-type=. Default: =0.005=. timeout for expecting a reply to DATA or RTS packet
- frame-time :: a =time-type=. Default: =0.61=. frame time (standard = 610ms)
- collision-resolution :: a =symbol=. Default: ='IMMEDIATE-RETRY=. collision resolution mechanism, choose from
     'immediate-retry (low collision avoidance)
     'overhearing (default)
		 'retry-next-frame (aggressive collision avoidance)

***** Description

TMAC


***** Direct Slots

# link target 2: <<print-state-transitions>>
# link target: <<slot print-state-transitions>>


****** Slot: =print-state-transitions=                                           :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Debugging parameter


# link target 2: <<ack-packet-size>>
# link target: <<slot ack-packet-size>>


****** Slot: =ack-packet-size=                                                   :slot:

- Value type: =integer=
- Initial value: =11=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<sync-packet-size>>
# link target: <<slot sync-packet-size>>


****** Slot: =sync-packet-size=                                                  :slot:

- Value type: =integer=
- Initial value: =11=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<rts-packet-size>>
# link target: <<slot rts-packet-size>>


****** Slot: =rts-packet-size=                                                   :slot:

- Value type: =integer=
- Initial value: =13=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<cts-packet-size>>
# link target: <<slot cts-packet-size>>


****** Slot: =cts-packet-size=                                                   :slot:

- Value type: =integer=
- Initial value: =13=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<max-mac-frame-size>>
# link target: <<slot max-mac-frame-size>>


****** Slot: =max-mac-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =11=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** Inherited Slot: =buffer-size=                                             :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<max-tx-retries>>
# link target: <<slot max-tx-retries>>


****** Slot: =max-tx-retries=                                                    :slot:

- Value type: =integer=
- Initial value: =2=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<allow-sink-sync>>
# link target: <<slot allow-sink-sync>>


****** Slot: =allow-sink-sync=                                                   :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

allows sink node to start synchronisation immediately


# link target 2: <<use-frts>>
# link target: <<slot use-frts>>


****** Slot: =use-frts=                                                          :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

enable/disable FRTS (Future Request To Send), true
    value not supported


# link target 2: <<use-rts-cts>>
# link target: <<slot use-rts-cts>>


****** Slot: =use-rts-cts=                                                       :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

enable/disable RTS/CTS handshake


# link target 2: <<disable-ta-extension>>
# link target: <<slot disable-ta-extension>>


****** Slot: =disable-ta-extension=                                              :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

disabling TA extension effectively creates an SMAC
    protocol


# link target 2: <<conservative-ta>>
# link target: <<slot conservative-ta>>


****** Slot: =conservative-ta=                                                   :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

conservative activation timeout - will always
     stay awake for at least 15 ms after any activity on the radio


# link target 2: <<resync-time>>
# link target: <<slot resync-time>>


****** Slot: =resync-time=                                                       :slot:

- Value type: =time-type=
- Initial value: =6.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

time for re-sending SYNC msg, in seconds


# link target 2: <<contention-period>>
# link target: <<slot contention-period>>


****** Slot: =contention-period=                                                 :slot:

- Value type: =time-type=
- Initial value: =0.01=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<listen-timeout>>
# link target: <<slot listen-timeout>>


****** Slot: =listen-timeout=                                                    :slot:

- Value type: =time-type=
- Initial value: =0.015=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

15 ms, is the timeout TA (Activation event)


# link target 2: <<wait-timeout>>
# link target: <<slot wait-timeout>>


****** Slot: =wait-timeout=                                                      :slot:

- Value type: =time-type=
- Initial value: =0.005=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

timeout for expecting a reply to DATA or RTS packet


# link target 2: <<frame-time>>
# link target: <<slot frame-time>>


****** Slot: =frame-time=                                                        :slot:

- Value type: =time-type=
- Initial value: =0.61=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

frame time (standard = 610ms)


# link target 2: <<collision-resolution>>
# link target: <<slot collision-resolution>>


****** Slot: =collision-resolution=                                              :slot:

- Value type: =symbol=
- Initial value: ='LENS.WSN.MAC.TMAC::IMMEDIATE-RETRY=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

collision resolution mechanism, choose from
     'immediate-retry (low collision avoidance)
     'overhearing (default)
		 'retry-next-frame (aggressive collision avoidance)


# link target 2: <<state>>
# link target: <<slot state>>


****** Slot: =state=                                                             :slot:

- Value type: =tmac-state=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<state>>
# link target: <<slot-accessor state>>


******** Slot Accessor: =state=                                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(state instance)
#+END_SRC


********* Description

Return current state of instance


********* Methods

- (=state= (mac802.15.4 [[class mac802.15.4][=lens.wsn:mac802.15.4=]]))
- (=state= (tmac [[class tmac][=lens.wsn:tmac=]]))
- (=state= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))
- (=state= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<tx-addr>>
# link target: <<slot tx-addr>>


****** Slot: =tx-addr=                                                           :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

current communication peer (can be BROADCAST)


# link target 2: <<tx-retries>>
# link target: <<slot tx-retries>>


****** Slot: =tx-retries=                                                        :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

number of transmission attempts to txAddr (when reaches 0 - packet is dropped)


# link target 2: <<primary-wakeup>>
# link target: <<slot primary-wakeup>>


****** Slot: =primary-wakeup=                                                    :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

to distinguish between primary and secondary schedules


# link target 2: <<need-resync>>
# link target: <<slot need-resync>>


****** Slot: =need-resync=                                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

	//set to 1 when a SYNC packet has to be sent


# link target 2: <<current-frame-start>>
# link target: <<slot current-frame-start>>


****** Slot: =current-frame-start=                                               :slot:

- Value type: =time-type=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

recorded start time of the current frame


# link target 2: <<activation-timeout>>
# link target: <<slot activation-timeout>>


****** Slot: =activation-timeout=                                                :slot:

- Value type: =time-type=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

time untill MAC_CHECK_TA message arrival


# link target 2: <<schedule-table>>
# link target: <<slot schedule-table>>


****** Slot: =schedule-table=                                                    :slot:

- Value type: =vector=
- Initial value: =(MAKE-ARRAY 8 :ELEMENT-TYPE 'LENS.WSN.MAC.TMAC::TMAC-SCHEDULE
                              :ADJUSTABLE T :FILL-POINTER 0)=
- Initargs: none
- Allocation: instance


******* Description

TMAC Schedule table (list of effective schedules)


# link target 2: <<sync-packet>>
# link target: <<slot sync-packet>>


****** Slot: =sync-packet=                                                       :slot:

- Value type: =tmac-sync-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<rts-packet>>
# link target: <<slot rts-packet>>


****** Slot: =rts-packet=                                                        :slot:

- Value type: =tmac-rts-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<cts-packet>>
# link target: <<slot cts-packet>>


****** Slot: =cts-packet=                                                        :slot:

- Value type: =tmac-cts-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<ack-packet>>
# link target: <<slot ack-packet>>


****** Slot: =ack-packet=                                                        :slot:

- Value type: =tmac-ack-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<transmission-timeout>>
# link target: <<slot transmission-timeout>>


****** Slot: =transmission-timeout=                                              :slot:

- Value type: =t=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance


# link target 2: <<check-ta>>
# link target: <<slot check-ta>>


****** Slot: =check-ta=                                                          :slot:

- Value type: =t=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance


# link target 2: <<carrier-sense>>
# link target: <<slot carrier-sense>>


****** Slot: =carrier-sense=                                                     :slot:

- Value type: =t=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target: <<slot radio>>


****** Slot: =radio=                                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<phy-delay-for-valid-cs>>
# link target: <<slot phy-delay-for-valid-cs>>


****** Slot: =phy-delay-for-valid-cs=                                            :slot:

- Value type: =time-type=
- Initial value: =1.28e-4=
- Initargs: none
- Allocation: instance


# link target 2: <<address>>
# link target: <<slot address>>


****** Slot: =address=                                                           :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

MAC address - will default to nodeid.


# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Slot: =buffer=                                                            :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<tuneable-mac>>
# link target: <<class tuneable-mac>>


**** Class: =tuneable-mac=                                                    :class:


***** Inheritance

- Parent classes:
    [[class mac][mac]]
- Precedence list:
    [[class tuneable-mac][tuneable-mac]], [[class mac][mac]], [[class comms
    module][comms-module]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- duty-cycle :: a =float=. Default: =1.0=. listening / (sleeping+listening)
- listen-interval :: a =time-type=. Default: =0.01=. how long do we leave the radio in listen mode, in ms
- beacon-interval-fraction :: a =float=. Default: =1.0=. fraction of the sleeping interval that we send beacons
- probability-tx :: a =float=. Default: =1.0=. the probability of a single try of Transmission to happen
- num-tx :: a =integer=. Default: =1=. when we have something to Tx, how many times we try
- random-tx-offset :: a =time-type=. Default: =0.0d0=. Tx after time chosen randomly from interval [0..randomTxOffset]
- retx-interval :: a =time-type=. Default: =0.0d0=. Interval between retransmissions in ms, (numTx-1) retransmissions
- backoff-type :: a =symbol=. Default: ='CONSTANT=. sleep-interval, constant, multiplying (e.g. 1*a, 2*a, 3*a, 4*a ...), exponential (e.g. 2, 4, 8, 16, 32...)
- backoff-base-value :: a =time-type=. Default: =0.016d0=. NIL
- csma-persistence :: a =(number :min 0 :max 1 :coerce-to float)=. Default: =0=. value in [0..1], is CSMA non-persistent, p-persistent, or 1-persistent?
- tx-all-packets-in-free-channel :: a =boolean=. Default: =T=.  if you find the channel free, tx all packets in buffer?
- sleep-during-backoff :: a =boolean=.   for no dutyCycle case: sleep when backing off
- beacon-frame-size :: a =integer=. Default: =125=. have a big beacon, to avoid much processing
    overhead, but fit at least 2 in the listening interval

***** Description

Default parameter values will result in
  non-persistent CSMA-CA behaviour


***** Direct Slots

# link target 2: <<duty-cycle>>
# link target: <<slot duty-cycle>>


****** Slot: =duty-cycle=                                                        :slot:

- Value type: =float=
- Initial value: =1.0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

listening / (sleeping+listening)


******* Accessors

-----

# link target 2: <<duty-cycle>>
# link target: <<slot-accessor duty-cycle>>


******** Slot Accessor: =duty-cycle=                                      :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(duty-cycle object)
#+END_SRC


********* Methods

- (=duty-cycle= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<listen-interval>>
# link target: <<slot listen-interval>>


****** Slot: =listen-interval=                                                   :slot:

- Value type: =time-type=
- Initial value: =0.01=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

how long do we leave the radio in listen mode, in ms


******* Accessors

-----

# link target 2: <<listen-interval>>
# link target: <<slot-accessor listen-interval>>


******** Slot Accessor: =listen-interval=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(listen-interval object)
#+END_SRC


********* Methods

- (=listen-interval= (tuneable-mac                     [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<beacon-interval-fraction>>
# link target: <<slot beacon-interval-fraction>>


****** Slot: =beacon-interval-fraction=                                          :slot:

- Value type: =float=
- Initial value: =1.0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

fraction of the sleeping interval that we send beacons


******* Accessors

-----

# link target 2: <<beacon-interval-fraction>>
# link target: <<slot-accessor beacon-interval-fraction>>


******** Slot Accessor: =beacon-interval-fraction=                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(beacon-interval-fraction object)
#+END_SRC


********* Methods

- (=beacon-interval-fraction= (tuneable-mac                             
  [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<probability-tx>>
# link target: <<slot probability-tx>>


****** Slot: =probability-tx=                                                    :slot:

- Value type: =float=
- Initial value: =1.0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

the probability of a single try of Transmission to happen


******* Accessors

-----

# link target 2: <<probability-tx>>
# link target: <<slot-accessor probability-tx>>


******** Slot Accessor: =probability-tx=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(probability-tx object)
#+END_SRC


********* Methods

- (=probability-tx= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target 2: <<num-tx>>
# link target: <<slot num-tx>>


****** Slot: =num-tx=                                                            :slot:

- Value type: =integer=
- Initial value: =1=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

when we have something to Tx, how many times we try


******* Accessors

-----

# link target 2: <<num-tx>>
# link target: <<slot-accessor num-tx>>


******** Slot Accessor: =num-tx=                                          :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(num-tx object)
#+END_SRC


********* Methods

- (=num-tx= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<random-tx-offset>>
# link target: <<slot random-tx-offset>>


****** Slot: =random-tx-offset=                                                  :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Tx after time chosen randomly from interval [0..randomTxOffset]


******* Accessors

-----

# link target 2: <<random-tx-offset>>
# link target: <<slot-accessor random-tx-offset>>


******** Slot Accessor: =random-tx-offset=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(random-tx-offset object)
#+END_SRC


********* Methods

- (=random-tx-offset= (tuneable-mac                      [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<retx-interval>>
# link target: <<slot retx-interval>>


****** Slot: =retx-interval=                                                     :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Interval between retransmissions in ms, (numTx-1) retransmissions


******* Accessors

-----

# link target 2: <<retx-interval>>
# link target: <<slot-accessor retx-interval>>


******** Slot Accessor: =retx-interval=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(retx-interval object)
#+END_SRC


********* Methods

- (=retx-interval= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target: <<slot backoff-type>>


****** Slot: =backoff-type=                                                      :slot:

- Value type: =symbol=
- Initial value: ='LENS.WSN:CONSTANT=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

sleep-interval, constant, multiplying (e.g. 1*a, 2*a, 3*a, 4*a ...), exponential (e.g. 2, 4, 8, 16, 32...)


******* Accessors

-----

# link target: <<slot-accessor backoff-type>>


******** Slot Accessor: =backoff-type=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(backoff-type object)
#+END_SRC


********* Methods

- (=backoff-type= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target 2: <<backoff-base-value>>
# link target: <<slot backoff-base-value>>


****** Slot: =backoff-base-value=                                                :slot:

- Value type: =time-type=
- Initial value: =0.016d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

-----

# link target 2: <<backoff-base-value>>
# link target: <<slot-accessor backoff-base-value>>


******** Slot Accessor: =backoff-base-value=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(backoff-base-value object)
#+END_SRC


********* Methods

- (=backoff-base-value= (tuneable-mac                        [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<csma-persistence>>
# link target: <<slot csma-persistence>>


****** Slot: =csma-persistence=                                                  :slot:

- Value type: =float=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (format (number min 0 max 1 coerce-to float))


******* Description

value in [0..1], is CSMA non-persistent, p-persistent, or 1-persistent?


******* Accessors

-----

# link target 2: <<csma-persistence>>
# link target: <<slot-accessor csma-persistence>>


******** Slot Accessor: =csma-persistence=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(csma-persistence object)
#+END_SRC


********* Methods

- (=csma-persistence= (tuneable-mac                      [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<tx-all-packets-in-free-channel>>
# link target: <<slot tx-all-packets-in-free-channel>>


****** Slot: =tx-all-packets-in-free-channel=                                    :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

 if you find the channel free, tx all packets in buffer?


******* Accessors

-----

# link target 2: <<tx-all-packets-in-free-channel>>
# link target: <<slot-accessor tx-all-packets-in-free-channel>>


******** Slot Accessor: =tx-all-packets-in-free-channel=                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(tx-all-packets-in-free-channel object)
#+END_SRC


********* Methods

- (=tx-all-packets-in-free-channel= (tuneable-mac                              
       [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<sleep-during-backoff>>
# link target: <<slot sleep-during-backoff>>


****** Slot: =sleep-during-backoff=                                              :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

 for no dutyCycle case: sleep when backing off


******* Accessors

-----

# link target 2: <<sleep-during-backoff>>
# link target: <<slot-accessor sleep-during-backoff>>


******** Slot Accessor: =sleep-during-backoff=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sleep-during-backoff object)
#+END_SRC


********* Methods

- (=sleep-during-backoff= (tuneable-mac                          [[class
  tuneable-mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =9=
- Initargs: none
- Allocation: instance


# link target 2: <<beacon-frame-size>>
# link target: <<slot beacon-frame-size>>


****** Slot: =beacon-frame-size=                                                 :slot:

- Value type: =integer=
- Initial value: =125=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

have a big beacon, to avoid much processing
    overhead, but fit at least 2 in the listening interval


******* Accessors

-----

# link target 2: <<beacon-frame-size>>
# link target: <<slot-accessor beacon-frame-size>>


******** Slot Accessor: =beacon-frame-size=                               :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(beacon-frame-size object)
#+END_SRC


********* Methods

- (=beacon-frame-size= (tuneable-mac                       [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** Inherited Slot: =buffer-size=                                             :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance


# link target 2: <<max-mac-frame-size>>
# link target: <<slot max-mac-frame-size>>


****** Slot: =max-mac-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<state>>
# link target: <<slot state>>


****** Slot: =state=                                                             :slot:

- Value type: =tuneable-mac-state=
- Initial value: ='LENS.WSN.MAC.TUNEABLE::DEFAULT=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<state>>
# link target: <<slot-accessor state>>


******** Slot Accessor: =state=                                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(state instance)
#+END_SRC


********* Description

Return current state of instance


********* Methods

- (=state= (mac802.15.4 [[class mac802.15.4][=lens.wsn:mac802.15.4=]]))
- (=state= (tmac [[class tmac][=lens.wsn:tmac=]]))
- (=state= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))
- (=state= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<num-tx-tries>>
# link target: <<slot num-tx-tries>>


****** Slot: =num-tx-tries=                                                      :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<num-tx-tries>>
# link target: <<slot-accessor num-tx-tries>>


******** Slot Accessor: =num-tx-tries=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(num-tx-tries object)
#+END_SRC


********* Methods

- (=num-tx-tries= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target 2: <<backoff-times>>
# link target: <<slot backoff-times>>


****** Slot: =backoff-times=                                                     :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Description

number of consequtive backoff times


******* Accessors

-----

# link target 2: <<backoff-times>>
# link target: <<slot-accessor backoff-times>>


******** Slot Accessor: =backoff-times=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(backoff-times object)
#+END_SRC


********* Methods

- (=backoff-times= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target 2: <<remaining-beacons-to-tx>>
# link target: <<slot remaining-beacons-to-tx>>


****** Slot: =remaining-beacons-to-tx=                                           :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<remaining-beacons-to-tx>>
# link target: <<slot-accessor remaining-beacons-to-tx>>


******** Slot Accessor: =remaining-beacons-to-tx=                         :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(remaining-beacons-to-tx object)
#+END_SRC


********* Methods

- (=remaining-beacons-to-tx= (tuneable-mac                             [[class
  tuneable-mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<sleep-interval>>
# link target: <<slot sleep-interval>>


****** Slot: =sleep-interval=                                                    :slot:

- Value type: =time-type=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<sleep-interval>>
# link target: <<slot-accessor sleep-interval>>


******** Slot Accessor: =sleep-interval=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sleep-interval object)
#+END_SRC


********* Methods

- (=sleep-interval= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target 2: <<sleep-listen-timer>>
# link target: <<slot sleep-listen-timer>>


****** Slot: =sleep-listen-timer=                                                :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<sleep-listen-timer>>
# link target: <<slot-accessor sleep-listen-timer>>


******** Slot Accessor: =sleep-listen-timer=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sleep-listen-timer object)
#+END_SRC


********* Methods

- (=sleep-listen-timer= (tuneable-mac                        [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<start-cs-timer>>
# link target: <<slot start-cs-timer>>


****** Slot: =start-cs-timer=                                                    :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE :NAME                          
       'LENS.WSN.MAC.TUNEABLE::START-CS-TIMER)=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<start-cs-timer>>
# link target: <<slot-accessor start-cs-timer>>


******** Slot Accessor: =start-cs-timer=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(start-cs-timer object)
#+END_SRC


********* Methods

- (=start-cs-timer= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target 2: <<attempt-tx-timer>>
# link target: <<slot attempt-tx-timer>>


****** Slot: =attempt-tx-timer=                                                  :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE :NAME                          
       'LENS.WSN.MAC.TUNEABLE::ATTEMPT-TX-TIMER)=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<attempt-tx-timer>>
# link target: <<slot-accessor attempt-tx-timer>>


******** Slot Accessor: =attempt-tx-timer=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(attempt-tx-timer object)
#+END_SRC


********* Methods

- (=attempt-tx-timer= (tuneable-mac                      [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<send-beacons-or-data-timer>>
# link target: <<slot send-beacons-or-data-timer>>


****** Slot: =send-beacons-or-data-timer=                                        :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE :NAME                          
       'LENS.WSN.MAC.TUNEABLE::SEND-BEACONS-OR-DATA-TIMER)=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<send-beacons-or-data-timer>>
# link target: <<slot-accessor send-beacons-or-data-timer>>


******** Slot Accessor: =send-beacons-or-data-timer=                      :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(send-beacons-or-data-timer object)
#+END_SRC


********* Methods

- (=send-beacons-or-data-timer= (tuneable-mac                               
  [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))







***** Indirect Slots

# link target: <<slot radio>>


****** Slot: =radio=                                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<phy-delay-for-valid-cs>>
# link target: <<slot phy-delay-for-valid-cs>>


****** Slot: =phy-delay-for-valid-cs=                                            :slot:

- Value type: =time-type=
- Initial value: =1.28e-4=
- Initargs: none
- Allocation: instance


# link target 2: <<address>>
# link target: <<slot address>>


****** Slot: =address=                                                           :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

MAC address - will default to nodeid.


# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Slot: =buffer=                                                            :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target: <<class wireless-channel>>


**** Class: =wireless-channel=                                                :class:


***** Inheritance

- Parent classes:
    [[class compound-module][compound-module]]
- Precedence list:
    [[class wireless-channel][wireless-channel]], [[class compound-module][compound
    module]], [[class module][module]], [[class component][component]], [[class
    parameter-object][parameter-object]], [[class entity-with-signals][entity-with
    signals]], [[class owned-object][owned-object]], [[class named-object][named
    object]], [[class lens-object][lens-object]], [[class standard-object][standard
    object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- cell-size :: a =coord=. Default: =(MAKE-COORD 5.0 5.0 1.0)=. Size of cells in each dimension (for mobility)
- signal-delivery-threshold :: a =real=. Default: =-100.0=. threshold in dBm above which, wireless channel
    module is delivering signal messages to radio modules of
    individual nodes

***** Description

The wireless channel module simulates the wireless
  medium. Nodes sent packets to it and according to various
  conditions (fading, interference etc) it is decided which nodes can
  receive this packet.


***** Direct Slots

# link target 2: <<cell-size>>
# link target: <<slot cell-size>>


****** Slot: =cell-size=                                                         :slot:

- Value type: =coord=
- Initial value: =(MAKE-COORD 5.0 5.0 1.0)=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Size of cells in each dimension (for mobility)


******* Accessors

-----

# link target 2: <<cell-size>>
# link target: <<slot-accessor cell-size>>


******** Slot Accessor: =cell-size=                                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cell-size object)
#+END_SRC


********* Methods

- (=cell-size= (wireless-channel               [[class wireless
  channel][=lens.wsn:wireless-channel=]]))





# link target 2: <<field>>
# link target: <<slot field>>


****** Slot: =field=                                                             :slot:

- Value type: =coord=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

wireless coverage field (may be larger than network field


******* Accessors

-----

# link target 2: <<field>>
# link target: <<slot-accessor field>>


******** Slot Accessor: =field=                                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(field object)
#+END_SRC


********* Methods

- (=field= (wireless-channel           [[class wireless
  channel][=lens.wsn:wireless-channel=]]))
- (=field= (wsn [[class wsn][=lens.wsn:wsn=]]))





# link target 2: <<signal-delivery-threshold>>
# link target: <<slot signal-delivery-threshold>>


****** Slot: =signal-delivery-threshold=                                         :slot:

- Value type: =real=
- Initial value: =-100.0=
- Initargs: signal-delivery-threshold
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

threshold in dBm above which, wireless channel
    module is delivering signal messages to radio modules of
    individual nodes


******* Accessors

-----

# link target 2: <<signal-delivery-threshold>>
# link target: <<slot-accessor signal-delivery-threshold>>


******** Slot Accessor: =signal-delivery-threshold=                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(signal-delivery-threshold object)
#+END_SRC


********* Methods

- (=signal-delivery-threshold= (wireless-channel                              
  [[class wireless-channel][=lens.wsn:wireless-channel=]]))





# link target: <<slot temporal-model>>


****** Slot: =temporal-model=                                                    :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

the temporal channel variation model


******* Accessors

-----

# link target: <<slot-accessor temporal-model>>


******** Slot Accessor: =temporal-model=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(temporal-model object)
#+END_SRC


********* Methods

- (=temporal-model= (wireless-channel                    [[class wireless
  channel][=lens.wsn:wireless-channel=]]))





# link target 2: <<max-tx-power>>
# link target: <<slot max-tx-power>>


****** Slot: =max-tx-power=                                                      :slot:

- Value type: =real=
- Initial value: =0.0=
- Initargs: none
- Allocation: instance


******* Accessors

-----

# link target 2: <<max-tx-power>>
# link target: <<slot-accessor max-tx-power>>


******** Slot Accessor: =max-tx-power=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(max-tx-power object)
#+END_SRC


********* Methods

- (=max-tx-power= (wireless-channel                  [[class wireless
  channel][=lens.wsn:wireless-channel=]]))





# link target 2: <<receivers>>
# link target: <<slot receivers>>


****** Slot: =receivers=                                                         :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

an array of lists of receiver gateways affected by
    ongoing transmission.


******* Accessors

-----

# link target 2: <<receivers>>
# link target: <<slot-accessor receivers>>


******** Slot Accessor: =receivers=                                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(receivers object)
#+END_SRC


********* Methods

- (=receivers= (wireless-channel               [[class wireless
  channel][=lens.wsn:wireless-channel=]]))





# link target 2: <<cells>>
# link target: <<slot cells>>


****** Slot: =cells=                                                             :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

an array of cell entities with node occupation and
    path-loss to other cells


******* Accessors

-----

# link target 2: <<cells>>
# link target: <<slot-accessor cells>>


******** Slot Accessor: =cells=                                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cells object)
#+END_SRC


********* Methods

- (=cells= (wireless-channel           [[class wireless
  channel][=lens.wsn:wireless-channel=]]))





# link target 2: <<location-cells>>
# link target: <<slot location-cells>>


****** Slot: =location-cells=                                                    :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Cached location cell by node instance




***** Indirect Slots

# link target 2: <<channels>>
# link target: <<slot channels>>


****** Slot: =channels=                                                          :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<submodules>>
# link target: <<slot submodules>>


****** Slot: =submodules=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<wsn>>
# link target: <<class wsn>>


**** Class: =wsn=                                                             :class:


***** Inheritance

- Parent classes:
    [[class network][network]]
- Precedence list:
    [[class wsn][wsn]], [[class network][network]], [[class compound
    module][compound-module]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- field :: a =coord=. Default: =(MAKE-COORD 30.0d0 30.0d0)=. Size of deployment field
- num-nodes :: a =fixnum=. Default: =30=. Number of nodes
- num-physical-processes :: a =fixnum=. Default: =1=. Number of physical processes
- deployment :: a =read=. Default: ='UNIFORM=. Node deployment spec

***** Description

Not documented.


***** Direct Slots

# link target 2: <<field>>
# link target: <<slot field>>


****** Slot: =field=                                                             :slot:

- Value type: =coord=
- Initial value: =(MAKE-COORD 30.0d0 30.0d0)=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Size of deployment field


******* Accessors

-----

# link target 2: <<field>>
# link target: <<slot-accessor field>>


******** Slot Accessor: =field=                                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(field object)
#+END_SRC


********* Methods

- (=field= (wireless-channel           [[class wireless
  channel][=lens.wsn:wireless-channel=]]))
- (=field= (wsn [[class wsn][=lens.wsn:wsn=]]))





# link target 2: <<num-nodes>>
# link target: <<slot num-nodes>>


****** Slot: =num-nodes=                                                         :slot:

- Value type: =fixnum=
- Initial value: =30=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Number of nodes


******* Accessors

-----

# link target 2: <<num-nodes>>
# link target: <<slot-accessor num-nodes>>


******** Slot Accessor: =num-nodes=                                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(num-nodes object)
#+END_SRC


********* Methods

- (=num-nodes= (wsn [[class wsn][=lens.wsn:wsn=]]))





# link target 2: <<num-physical-processes>>
# link target: <<slot num-physical-processes>>


****** Slot: =num-physical-processes=                                            :slot:

- Value type: =fixnum=
- Initial value: =1=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Number of physical processes


******* Accessors

-----

# link target 2: <<num-physical-processes>>
# link target: <<slot-accessor num-physical-processes>>


******** Slot Accessor: =num-physical-processes=                          :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(num-physical-processes object)
#+END_SRC


********* Methods

- (=num-physical-processes= (wsn [[class wsn][=lens.wsn:wsn=]]))





# link target 2: <<deployment>>
# link target: <<slot deployment>>


****** Slot: =deployment=                                                        :slot:

- Value type: =list=
- Initial value: ='UNIFORM=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (format read)


******* Description

Node deployment spec


******* Accessors

-----

# link target 2: <<deployment>>
# link target: <<slot-accessor deployment>>


******** Slot Accessor: =deployment=                                      :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(deployment object)
#+END_SRC


********* Methods

- (=deployment= (wsn [[class wsn][=lens.wsn:wsn=]]))







***** Indirect Slots

# link target 2: <<channels>>
# link target: <<slot channels>>


****** Slot: =channels=                                                          :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<submodules>>
# link target: <<slot submodules>>


****** Slot: =submodules=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<wsn-module>>
# link target: <<class wsn-module>>


**** Class: =wsn-module=                                                      :class:


***** Inheritance

- Parent classes:
    [[class with-timers][with-timers]], [[class module][module]]
- Precedence list:
    [[class wsn-module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class comms-module][comms-module]], [[class application][application]],
    [[class sensor][sensor]], [[class resources][resources]], [[class
    mobility][mobility]]


***** Parameters



***** Description

Not documented.


***** Direct Slots

# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** Inherited Slot: =disabled-p=                                              :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Accessors

-----

# link target 2: <<disabled-p>>
# link target: <<slot-accessor disabled-p>>


******** Inherited Slot Accessor: =disabled-p=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(disabled-p object)
#+END_SRC


********* Methods

- (=disabled-p= (resources [[class resources][=lens.wsn:resources=]]))
- (=disabled-p= (wsn-module [[class wsn-module][=lens.wsn:wsn-module=]]))
- (=disabled-p= (delay-channel [[class delay-channel][=delay-channel=]]))







***** Indirect Slots

# link target 2: <<timers>>
# link target: <<slot timers>>


****** Slot: =timers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Slot: =gate-slots=                                                        :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** Inherited Slot: =initialized-p=                                           :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** Inherited Slot: =rng-map=                                                 :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Slot: =collect-trace-info=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Slot: =properties=                                                        :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Slot: =has-ancestor-listeners=                                            :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Slot: =has-local-listeners=                                               :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY LENS::+SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT     
                         :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Slot: =signal-table=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





-----

# link target 2: <<wsn-packet>>
# link target: <<class wsn-packet>>


**** Class: =wsn-packet=                                                      :class:


***** Inheritance

- Parent classes:
    [[class packet][packet]]
- Precedence list:
    [[class wsn-packet][wsn-packet]], [[class packet][packet]], [[class
    message][message]], [[class event][event]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class mac-packet][mac-packet]], [[class routing-packet][routing-packet]]


***** Description

Base class for network and link layer packets


***** Direct Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: byte-length, header-overhead
- Allocation: instance


******* Description

In bytes


******* Accessors

-----

# link target 2: <<header-overhead>>
# link target: <<slot-accessor header-overhead>>


******** Slot Accessor: =header-overhead=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(header-overhead object)
#+END_SRC


********* Methods

- (=header-overhead= (comms-module                     [[class comms
  module][=lens.wsn:comms-module=]]))
- (=header-overhead= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=header-overhead= (application [[class
  application][=lens.wsn:application=]]))
- (=header-overhead= (wireless-signal-end                     [[class wireless
  signal-end][=lens.wsn::wireless-signal-end=]]))





# link target 2: <<source>>
# link target: <<slot source>>


****** Internal Slot: =source=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: source
- Allocation: instance


******* Description

the  source address of the received packet


******* Accessors

-----

# link target 2: <<source>>
# link target: <<slot-accessor source>>


******** Internal Slot Accessor: =source=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(source object)
#+END_SRC


********* Methods

- (=source= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=source= (app-net-control-info            [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<destination>>
# link target: <<slot destination>>


****** Internal Slot: =destination=                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: destination
- Allocation: instance


******* Description

the destination address of the packet to be sent


******* Accessors

-----

# link target 2: <<destination>>
# link target: <<slot-accessor destination>>


******** Internal Slot Accessor: =destination=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(destination object)
#+END_SRC


********* Methods

- (=destination= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=destination= (app-net-control-info                 [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<sequence-number>>
# link target: <<slot sequence-number>>


****** Slot: =sequence-number=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: sequence-number, seqnum
- Allocation: instance


******* Description

a field to distinguish between packets


******* Accessors

-----

# link target 2: <<sequence-number>>
# link target: <<slot-accessor sequence-number>>


******** Slot Accessor: =sequence-number=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sequence-number object)
#+END_SRC


********* Methods

- (=sequence-number= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=sequence-number= (application-packet                     [[class
  application-packet][=lens.wsn:application-packet=]]))







***** Indirect Slots

# link target 2: <<bit-error-p>>
# link target: <<slot bit-error-p>>


****** Inherited Slot: =bit-error-p=                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The result of error modelling after the packet is
sent through a channel that has a nonzero packet error rate (PER) or
bit error rate (BER). It is up to the receiver to examine this flag
after having received the packet, and to act upon it.


# link target 2: <<reception-start-p>>
# link target: <<slot reception-start-p>>


****** Slot: =reception-start-p=                                                 :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: deliver-on-reception-start
- Allocation: instance


******* Description

Identify whether this packet represents the start
or the end of the reception after the packet travelled through a
channel with a data rate. This flag is controlled by the
deliver-on-reception-start flag of the receiving gate.


# link target 2: <<control-info>>
# link target: <<slot control-info>>


****** Inherited Slot: =control-info=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: control-info
- Allocation: instance


******* Description

Additional data to be passed with packet between
    protocol layers.


# link target 2: <<duration>>
# link target: <<slot duration>>


****** Internal Slot: =duration=                                                 :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Duration of last transmission


# link target 2: <<encapsulated-packet>>
# link target: <<slot encapsulated-packet>>


****** Slot: =encapsulated-packet=                                               :slot:

- Value type: =packet=
- Initial value: =NIL=
- Initargs: encapsulated-packet
- Allocation: instance


******* Description

Higher level encapsulated protocol packet.


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** Inherited Slot: =timestamp=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Slot: =to=                                                                :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Slot: =from=                                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** Inherited Slot: =creation-time=                                           :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** Inherited Slot: =root-event=                                              :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Slot: =schedule-id=                                                       :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Slot: =priority=                                                          :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** Inherited Slot: =arrival-time=                                            :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** Inherited Slot: =sent-time=                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Slot: =rank=                                                              :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** Inherited Slot: =owner=                                                   :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** Inherited Slot: =index=                                                   :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** Inherited Slot: =name=                                                    :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.







*** External Structures

-----

# link target 2: <<cell>>
# link target: <<structure cell>>


**** Structure: =cell=                                                    :structure:


***** Description

Not documented.


***** Slots

# link target 2: <<coord>>
# link target: <<slot coord>>


****** Inherited Slot: =coord=                                                   :slot:

- Value type: =coord=
- Initial value: =(MAKE-COORD)=
- Initargs: none
- Allocation: instance


# link target 2: <<occupation>>
# link target: <<slot occupation>>


****** Slot: =occupation=                                                        :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<path-loss>>
# link target: <<slot path-loss>>


****** Slot: =path-loss=                                                         :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance







*** External Types

-----

# link target 2: <<radio-control-command-name>>
# link target: <<type radio-control-command-name>>


**** Type: =radio-control-command-name=                                        :type:

Not documented.




*** External Constants

-----

# link target 2: <<broadcast-mac-address>>
# link target: <<constant broadcast-mac-address>>


**** Constant: =broadcast-mac-address=                                     :constant:


***** Value

: -1

Type: =fixnum=


***** Description

Not documented.



-----

# link target 2: <<broadcast-network-address>>
# link target: <<constant broadcast-network-address>>


**** Constant: =broadcast-network-address=                                 :constant:


***** Value

: -1

Type: =fixnum=


***** Description

Not documented.





*** External Global Variables

-----

# link target: <<variable network>>


**** Inherited Variable: =network=                                         :variable:


***** Value

: NIL

Type: =null=


***** Description

Network name for current run



-----

# link target: <<variable network>>


**** Inherited Variable: =network=                                         :variable:


***** Value

: NIL

Type: =null=


***** Description

Network name for current run





*** External Functions

-----

# link target 2: <<applicationid>>
# link target: <<function applicationid>>


**** Function: =applicationid=                                             :function:


***** Syntax

#+BEGIN_SRC lisp
(applicationid object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<argument>>
# link target: <<function argument>>


**** Function: =argument=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(argument object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<attempt-tx>>
# link target: <<function attempt-tx>>


**** Function: =attempt-tx=                                                :function:


***** Syntax

#+BEGIN_SRC lisp
(attempt-tx module &optional description)
#+END_SRC


***** Description

Attempt to transmit next packet. Description added to tracelog if present.



-----

# link target 2: <<bits-per-symbol>>
# link target: <<function bits-per-symbol>>


**** Function: =bits-per-symbol=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(bits-per-symbol entity)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<buffer>>
# link target: <<function buffer>>


**** Function: =buffer=                                                    :function:


***** Syntax

#+BEGIN_SRC lisp
(buffer object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<buffer-size>>
# link target: <<function buffer-size>>


**** Inherited Function: =buffer-size=                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(buffer-size object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<buffer-size>>
# link target: <<function buffer-size>>


**** Inherited Function: =buffer-size=                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(buffer-size object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<channel-clear-status>>
# link target: <<function channel-clear-status>>


**** Function: =channel-clear-status=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(channel-clear-status radio)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<clock-drift>>
# link target: <<function clock-drift>>


**** Function: =clock-drift=                                               :function:


***** Syntax

#+BEGIN_SRC lisp
(clock-drift object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<collision-model>>
# link target: <<function collision-model>>


**** Function: =collision-model=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(collision-model object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<command>>
# link target: <<function command>>


**** Function: =command=                                                   :function:


***** Syntax

#+BEGIN_SRC lisp
(command object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<data-rate>>
# link target: <<function data-rate>>


**** Function: =data-rate=                                                 :function:


***** Syntax

#+BEGIN_SRC lisp
(data-rate entity)
#+END_SRC


***** Description

The physical layer data rate in bps - needed by mac layer
  to determine transmission times etc.



-----

# link target 2: <<deployment>>
# link target: <<function deployment>>


**** Function: =deployment=                                                :function:


***** Syntax

#+BEGIN_SRC lisp
(deployment object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<description>>
# link target: <<function description>>


**** Function: =description=                                               :function:


***** Syntax

#+BEGIN_SRC lisp
(description object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<destination>>
# link target: <<function destination>>


**** Internal Function: =destination=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(destination object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<disabled-p>>
# link target: <<function disabled-p>>


**** Inherited Function: =disabled-p=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(disabled-p object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<disabled-p>>
# link target: <<function disabled-p>>


**** Inherited Function: =disabled-p=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(disabled-p object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<exponential>>
# link target: <<function exponential>>


**** Inherited Function: =exponential=                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(exponential mean &optional (rng 0))
#+END_SRC

***** Arguments


- mean :: a =real= number

***** Optional Arguments


- rng :: an =integer= (default 0)

***** Description


Returns a random variate =double float= from the exponential
distribution with the given mean /mean/ (that is, with parameter
lambda=1/mean/) from random number stream /rng/ in the current
context.


-----

# link target 2: <<exponential>>
# link target: <<function exponential>>


**** Inherited Function: =exponential=                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(exponential mean &optional (rng 0))
#+END_SRC

***** Arguments


- mean :: a =real= number

***** Optional Arguments


- rng :: an =integer= (default 0)

***** Description


Returns a random variate =double float= from the exponential
distribution with the given mean /mean/ (that is, with parameter
lambda=1/mean/) from random number stream /rng/ in the current
context.


-----

# link target 2: <<field>>
# link target: <<function field>>


**** Function: =field=                                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(field object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<get-clock>>
# link target: <<function get-clock>>


**** Function: =get-clock=                                                 :function:


***** Syntax

#+BEGIN_SRC lisp
(get-clock instance)
#+END_SRC


***** Description

Return local absolute time



-----

# link target 2: <<get-simulation-time>>
# link target: <<function get-simulation-time>>


**** Function: =get-simulation-time=                                       :function:


***** Syntax

#+BEGIN_SRC lisp
(get-simulation-time instance local-time)
#+END_SRC


***** Description

Convert a local time value into a simulation time



-----

# link target 2: <<handle-control-command>>
# link target: <<function handle-control-command>>


**** Function: =handle-control-command=                                    :function:


***** Syntax

#+BEGIN_SRC lisp
(handle-control-command module command argument)
#+END_SRC


***** Description

Breakdown of MAC commands - return true if successful



-----

# link target 2: <<handle-sensor-reading>>
# link target: <<function handle-sensor-reading>>


**** Function: =handle-sensor-reading=                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(handle-sensor-reading application measurement)
#+END_SRC


***** Description

Must be implemented by applications to handle
  sensor readings



-----

# link target 2: <<header-overhead>>
# link target: <<function header-overhead>>


**** Function: =header-overhead=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(header-overhead object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<last-hop>>
# link target: <<function last-hop>>


**** Function: =last-hop=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(last-hop object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<last-sequence-number>>
# link target: <<function last-sequence-number>>


**** Function: =last-sequence-number=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(last-sequence-number object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<location>>
# link target: <<function location>>


**** Function: =location=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(location object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<lqi>>
# link target: <<function lqi>>


**** Function: =lqi=                                                       :function:


***** Syntax

#+BEGIN_SRC lisp
(lqi object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<mac-address>>
# link target: <<function mac-address>>


**** Function: =mac-address=                                               :function:


***** Syntax

#+BEGIN_SRC lisp
(mac-address object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<max-mac-frame-size>>
# link target: <<function max-mac-frame-size>>


**** Function: =max-mac-frame-size=                                        :function:


***** Syntax

#+BEGIN_SRC lisp
(max-mac-frame-size object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<max-net-frame-size>>
# link target: <<function max-net-frame-size>>


**** Function: =max-net-frame-size=                                        :function:


***** Syntax

#+BEGIN_SRC lisp
(max-net-frame-size object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<measure>>
# link target: <<function measure>>


**** Function: =measure=                                                   :function:


***** Syntax

#+BEGIN_SRC lisp
(measure physical-process measurand location time)
#+END_SRC


***** Description

Return the real value of specified measurand from a
  physical process at given time and location



-----

# link target: <<function network>>


**** Inherited Function: =network=                                         :function:


***** Syntax

#+BEGIN_SRC lisp
(network object)
#+END_SRC


***** Description

Not documented.



-----

# link target: <<function network>>


**** Inherited Function: =network=                                         :function:


***** Syntax

#+BEGIN_SRC lisp
(network object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<network-address>>
# link target: <<function network-address>>


**** Function: =network-address=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(network-address object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<next-hop>>
# link target: <<function next-hop>>


**** Function: =next-hop=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(next-hop object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<next-sequence-number>>
# link target: <<function next-sequence-number>>


**** Function: =next-sequence-number=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(next-sequence-number instance)
#+END_SRC


***** Description

Not documented.



-----

# link target: <<function node>>


**** Function: =node=                                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(node module)
#+END_SRC


***** Description

Return the node module for a particular submodule



-----

# link target 2: <<nodeid>>
# link target: <<function nodeid>>


**** Function: =nodeid=                                                    :function:


***** Syntax

#+BEGIN_SRC lisp
(nodeid object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<nodes>>
# link target: <<function nodes>>


**** Function: =nodes=                                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(nodes network)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<num-nodes>>
# link target: <<function num-nodes>>


**** Function: =num-nodes=                                                 :function:


***** Syntax

#+BEGIN_SRC lisp
(num-nodes object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<packet-history>>
# link target: <<function packet-history>>


**** Function: =packet-history=                                            :function:


***** Syntax

#+BEGIN_SRC lisp
(packet-history object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<packet-size>>
# link target: <<function packet-size>>


**** Function: =packet-size=                                               :function:


***** Syntax

#+BEGIN_SRC lisp
(packet-size application data)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<parent-network-address>>
# link target: <<function parent-network-address>>


**** Function: =parent-network-address=                                    :function:


***** Syntax

#+BEGIN_SRC lisp
(parent-network-address entity)
#+END_SRC


***** Description

Address of parent node for aggregation applications



-----

# link target 2: <<payload>>
# link target: <<function payload>>


**** Function: =payload=                                                   :function:


***** Syntax

#+BEGIN_SRC lisp
(payload object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<payload-overhead>>
# link target: <<function payload-overhead>>


**** Function: =payload-overhead=                                          :function:


***** Syntax

#+BEGIN_SRC lisp
(payload-overhead object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<phy-delay-for-valid-cs>>
# link target: <<function phy-delay-for-valid-cs>>


**** Function: =phy-delay-for-valid-cs=                                    :function:


***** Syntax

#+BEGIN_SRC lisp
(phy-delay-for-valid-cs object)
#+END_SRC


***** Description

Not documented.



-----

# link target: <<function physical-process>>


**** Function: =physical-process=                                          :function:


***** Syntax

#+BEGIN_SRC lisp
(physical-process object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<priority>>
# link target: <<function priority>>


**** Function: =priority=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(priority object)
#+END_SRC


***** Description

Not documented.



-----

# link target: <<function radio>>


**** Function: =radio=                                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(radio object)
#+END_SRC


***** Description

Not documented.



-----

# link target: <<function ram-store>>


**** Function: =ram-store=                                                 :function:


***** Syntax

#+BEGIN_SRC lisp
(ram-store instance num-bytes)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<read-rssi>>
# link target: <<function read-rssi>>


**** Function: =read-rssi=                                                 :function:


***** Syntax

#+BEGIN_SRC lisp
(read-rssi radio)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<resolve-network-address>>
# link target: <<function resolve-network-address>>


**** Function: =resolve-network-address=                                   :function:


***** Syntax

#+BEGIN_SRC lisp
(resolve-network-address routing network-address)
#+END_SRC


***** Description

Return  resolved mac address from given network address



-----

# link target 2: <<rssi>>
# link target: <<function rssi>>


**** Function: =rssi=                                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(rssi object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<sensor-request>>
# link target: <<function sensor-request>>


**** Function: =sensor-request=                                            :function:


***** Syntax

#+BEGIN_SRC lisp
(sensor-request application &optional (sensor-index 0))
#+END_SRC


***** Description

To be used by applications to request a sensor reading



-----

# link target 2: <<sequence-number>>
# link target: <<function sequence-number>>


**** Function: =sequence-number=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(sequence-number object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<set-state>>
# link target: <<function set-state>>


**** Function: =set-state=                                                 :function:


***** Syntax

#+BEGIN_SRC lisp
(set-state state-machine state &optional description)
#+END_SRC


***** Description

Set new state of a protocol
  implementation. Description may be used to add comments for
  tracing. print-state-transitions parameter slot switches on tracing of this.
state is stored in slate slot.



-----

# link target 2: <<shutdown>>
# link target: <<function shutdown>>


**** Function: =shutdown=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(shutdown module)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<sink-network-address>>
# link target: <<function sink-network-address>>


**** Function: =sink-network-address=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(sink-network-address entity)
#+END_SRC


***** Description

Address of sink node for reporting applications



-----

# link target 2: <<sink-p>>
# link target: <<function sink-p>>


**** Function: =sink-p=                                                    :function:


***** Syntax

#+BEGIN_SRC lisp
(sink-p entity)
#+END_SRC


***** Description

Return true if an application (or router) is a sink



-----

# link target 2: <<sleep>>
# link target: <<function sleep>>


**** Inherited Function: =sleep=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(sleep seconds)
#+END_SRC


***** Description

This function causes execution to be suspended for SECONDS. SECONDS may be
any non-negative real number.



-----

# link target 2: <<sleep>>
# link target: <<function sleep>>


**** Inherited Function: =sleep=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(sleep seconds)
#+END_SRC


***** Description

This function causes execution to be suspended for SECONDS. SECONDS may be
any non-negative real number.



-----

# link target 2: <<sleep-interval>>
# link target: <<function sleep-interval>>


**** Function: =sleep-interval=                                            :function:


***** Syntax

#+BEGIN_SRC lisp
(sleep-interval object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<source>>
# link target: <<function source>>


**** Internal Function: =source=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(source object)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<startup>>
# link target: <<function startup>>


**** Function: =startup=                                                   :function:


***** Syntax

#+BEGIN_SRC lisp
(startup module)
#+END_SRC


***** Description

Called to start or restart a module



-----

# link target 2: <<state>>
# link target: <<function state>>


**** Function: =state=                                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(state instance)
#+END_SRC


***** Description

Return current state of instance



-----

# link target 2: <<symbol-length>>
# link target: <<function symbol-length>>


**** Function: =symbol-length=                                             :function:


***** Syntax

#+BEGIN_SRC lisp
(symbol-length entity)
#+END_SRC


***** Description

Not documented.



-----

# link target 2: <<to-mac>>
# link target: <<function to-mac>>


**** Function: =to-mac=                                                    :function:


***** Syntax

#+BEGIN_SRC lisp
(to-mac routing entity &optional next-hop-mac-address)
#+END_SRC


***** Description

Send packet to mac layer



-----

# link target 2: <<to-network>>
# link target: <<function to-network>>


**** Function: =to-network=                                                :function:


***** Syntax

#+BEGIN_SRC lisp
(to-network application entity &optional destination)
#+END_SRC


***** Description

Send message, packet or data to network



-----

# link target 2: <<to-radio>>
# link target: <<function to-radio>>


**** Function: =to-radio=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(to-radio mac entity)
#+END_SRC


***** Description

Send packet to radio layer



-----

# link target 2: <<transition-delay>>
# link target: <<function transition-delay>>


**** Function: =transition-delay=                                          :function:


***** Syntax

#+BEGIN_SRC lisp
(transition-delay entity state1 state2)
#+END_SRC


***** Description

Return the delay in going from state 1 to state 2



-----

# link target 2: <<tx-time>>
# link target: <<function tx-time>>


**** Function: =tx-time=                                                   :function:


***** Syntax

#+BEGIN_SRC lisp
(tx-time entity no-octets)
#+END_SRC


***** Description

Return the transmission time for no-octets on entity



-----

# link target: <<function wireless-channel>>


**** Function: =wireless-channel=                                          :function:


***** Syntax

#+BEGIN_SRC lisp
(wireless-channel object)
#+END_SRC


***** Description

Not documented.






** Ambiguous Symbols


*** Node

# target: <<node>>
Disambiguation.

- Function: [[function node][=lens.wsn:node=]]
- Class: [[class node][=lens.wsn:node=]]



*** Network

# target: <<network>>
Disambiguation.

- Variable: [[variable network][=network=]]
- Function: [[function network][=network=]]
- Class: [[class network][=network=]]



*** Radio

# target: <<radio>>
Disambiguation.

- Function: [[function radio][=lens.wsn:radio=]]
- Class: [[class radio][=lens.wsn:radio=]]



*** Physical-Process

# target: <<physical-process>>
Disambiguation.

- Function: [[function physical-process][=lens.wsn:physical-process=]]
- Class: [[class physical-process][=lens.wsn:physical-process=]]



*** Ram-Store

# target: <<ram-store>>
Disambiguation.

- Function: [[function ram-store][=lens.wsn:ram-store=]]
- Class: [[class ram-store][=lens.wsn:ram-store=]]



*** Wireless-Channel

# target: <<wireless-channel>>
Disambiguation.

- Function: [[function wireless-channel][=lens.wsn:wireless-channel=]]
- Class: [[class wireless-channel][=lens.wsn:wireless-channel=]]




** Index

 [[index A][A]]  [[index B][B]]  [[index C][C]]  [[index D][D]]  [[index E][E]]
 [[index F][F]]  [[index G][G]]  [[index H][H]]  [[index L][L]]  [[index M][M]]
 [[index N][N]]  [[index P][P]]  [[index R][R]]  [[index S][S]]  [[index T][T]]
 [[index W][W]]  


*** A


# link target: <<index A>>
- [[class app-net-control-info][=lens.wsn:app-net-control-info=]], Class
- [[class application][=lens.wsn:application=]], Class
- [[class application-packet][=lens.wsn:application-packet=]], Class
- [[function applicationid][=lens.wsn:applicationid=]], Function
- [[function argument][=lens.wsn:argument=]], Function
- [[function attempt-tx][=lens.wsn:attempt-tx=]], Function



*** B


# link target: <<index B>>
- [[function bits-per-symbol][=lens.wsn:bits-per-symbol=]], Function
- [[constant broadcast-mac-address][=lens.wsn:broadcast-mac-address=]],
  Constant
- [[constant broadcast-network-address][=lens.wsn:broadcast-network-address=]],
  Constant
- [[function buffer][=lens.wsn:buffer=]], Function
- [[function buffer-size][=buffer-size=]], Function
- [[function buffer-size][=buffer-size=]], Function
- [[class bypass-mac][=lens.wsn:bypass-mac=]], Class
- [[class bypass-routing][=lens.wsn:bypass-routing=]], Class



*** C


# link target: <<index C>>
- [[structure cell][=lens.wsn:cell=]], Structure
- [[function channel-clear-status][=lens.wsn:channel-clear-status=]], Function
- [[function clock-drift][=lens.wsn:clock-drift=]], Function
- [[function collision-model][=lens.wsn:collision-model=]], Function
- [[function command][=lens.wsn:command=]], Function
- [[class comms-module][=lens.wsn:comms-module=]], Class
- [[class communications][=lens.wsn:communications=]], Class



*** D


# link target: <<index D>>
- [[function data-rate][=lens.wsn:data-rate=]], Function
- [[function deployment][=lens.wsn:deployment=]], Function
- [[function description][=lens.wsn:description=]], Function
- [[function destination][=lens.wsn:destination=]], Function
- [[function disabled-p][=disabled-p=]], Function
- [[function disabled-p][=disabled-p=]], Function



*** E


# link target: <<index E>>
- [[function exponential][=exponential=]], Function
- [[function exponential][=exponential=]], Function



*** F


# link target: <<index F>>
- [[function field][=lens.wsn:field=]], Function



*** G


# link target: <<index G>>
- [[function get-clock][=lens.wsn:get-clock=]], Function
- [[function get-simulation-time][=lens.wsn:get-simulation-time=]], Function



*** H


# link target: <<index H>>
- [[function handle-control-command][=lens.wsn:handle-control-command=]],
  Function
- [[function handle-sensor-reading][=lens.wsn:handle-sensor-reading=]],
  Function
- [[function header-overhead][=lens.wsn:header-overhead=]], Function



*** L


# link target: <<index L>>
- [[function last-hop][=lens.wsn:last-hop=]], Function
- [[function last-sequence-number][=lens.wsn:last-sequence-number=]], Function
- [[class leach-routing][=lens.wsn:leach-routing=]], Class
- [[function location][=lens.wsn:location=]], Function
- [[function lqi][=lens.wsn:lqi=]], Function



*** M


# link target: <<index M>>
- [[class mac][=lens.wsn:mac=]], Class
- [[function mac-address][=lens.wsn:mac-address=]], Function
- [[class mac-control-command][=lens.wsn:mac-control-command=]], Class
- [[class mac-control-message][=lens.wsn:mac-control-message=]], Class
- [[class mac-packet][=lens.wsn:mac-packet=]], Class
- [[class mac-radio-control-info][=lens.wsn:mac-radio-control-info=]], Class
- [[class mac802.15.4][=lens.wsn:mac802.15.4=]], Class
- [[function max-mac-frame-size][=lens.wsn:max-mac-frame-size=]], Function
- [[function max-net-frame-size][=lens.wsn:max-net-frame-size=]], Function
- [[function measure][=lens.wsn:measure=]], Function
- [[class mobility][=lens.wsn:mobility=]], Class
- [[class multipath-rings-routing][=lens.wsn:multipath-rings-routing=]], Class



*** N


# link target: <<index N>>
- [[class net-mac-control-info][=lens.wsn:net-mac-control-info=]], Class
- [[variable network][=network=]], Variable
- [[function network][=network=]], Function
- [[class network][=network=]], Class
- [[variable network][=network=]], Variable
- [[function network][=network=]], Function
- [[class network][=network=]], Class
- [[function network-address][=lens.wsn:network-address=]], Function
- [[class network-control-command][=lens.wsn:network-control-command=]], Class
- [[class network-control-message][=lens.wsn:network-control-message=]], Class
- [[function next-hop][=lens.wsn:next-hop=]], Function
- [[function next-sequence-number][=lens.wsn:next-sequence-number=]], Function
- [[function node][=lens.wsn:node=]], Function
- [[class node][=lens.wsn:node=]], Class
- [[function nodeid][=lens.wsn:nodeid=]], Function
- [[function nodes][=lens.wsn:nodes=]], Function
- [[function num-nodes][=lens.wsn:num-nodes=]], Function



*** P


# link target: <<index P>>
- [[function packet-history][=lens.wsn:packet-history=]], Function
- [[function packet-size][=lens.wsn:packet-size=]], Function
- [[function parent-network-address][=lens.wsn:parent-network-address=]],
  Function
- [[function payload][=lens.wsn:payload=]], Function
- [[function payload-overhead][=lens.wsn:payload-overhead=]], Function
- [[function phy-delay-for-valid-cs][=lens.wsn:phy-delay-for-valid-cs=]],
  Function
- [[function physical-process][=lens.wsn:physical-process=]], Function
- [[class physical-process][=lens.wsn:physical-process=]], Class
- [[function priority][=lens.wsn:priority=]], Function



*** R


# link target: <<index R>>
- [[function radio][=lens.wsn:radio=]], Function
- [[class radio][=lens.wsn:radio=]], Class
- [[class radio-control-command][=lens.wsn:radio-control-command=]], Class
- [[type radio-control-command-name][=lens.wsn:radio-control-command-name=]],
  Type
- [[class radio-control-message][=lens.wsn:radio-control-message=]], Class
- [[function ram-store][=lens.wsn:ram-store=]], Function
- [[class ram-store][=lens.wsn:ram-store=]], Class
- [[function read-rssi][=lens.wsn:read-rssi=]], Function
- [[function resolve-network-address][=lens.wsn:resolve-network-address=]],
  Function
- [[class resources][=lens.wsn:resources=]], Class
- [[class routing][=lens.wsn:routing=]], Class
- [[class routing-packet][=lens.wsn:routing-packet=]], Class
- [[function rssi][=lens.wsn:rssi=]], Function



*** S


# link target: <<index S>>
- [[function sensor-request][=lens.wsn:sensor-request=]], Function
- [[function sequence-number][=lens.wsn:sequence-number=]], Function
- [[function set-state][=lens.wsn:set-state=]], Function
- [[function shutdown][=lens.wsn:shutdown=]], Function
- [[function sink-network-address][=lens.wsn:sink-network-address=]], Function
- [[function sink-p][=lens.wsn:sink-p=]], Function
- [[function sleep][=sleep=]], Function
- [[function sleep][=sleep=]], Function
- [[function sleep-interval][=lens.wsn:sleep-interval=]], Function
- [[function source][=lens.wsn:source=]], Function
- [[function startup][=lens.wsn:startup=]], Function
- [[function state][=lens.wsn:state=]], Function
- [[function symbol-length][=lens.wsn:symbol-length=]], Function



*** T


# link target: <<index T>>
- [[class tmac][=lens.wsn:tmac=]], Class
- [[function to-mac][=lens.wsn:to-mac=]], Function
- [[function to-network][=lens.wsn:to-network=]], Function
- [[function to-radio][=lens.wsn:to-radio=]], Function
- [[function transition-delay][=lens.wsn:transition-delay=]], Function
- [[class tuneable-mac][=lens.wsn:tuneable-mac=]], Class
- [[function tx-time][=lens.wsn:tx-time=]], Function



*** W


# link target: <<index W>>
- [[function wireless-channel][=lens.wsn:wireless-channel=]], Function
- [[class wireless-channel][=lens.wsn:wireless-channel=]], Class
- [[class wsn][=lens.wsn:wsn=]], Class
- [[class wsn-module][=lens.wsn:wsn-module=]], Class
- [[class wsn-packet][=lens.wsn:wsn-packet=]], Class





* Colophon

This documentation was generated from Common Lisp source code using CLOD, version 1.0.
The latest version of CLOD is available [[http://bitbucket.org/eeeickythump/clod/][here]].
