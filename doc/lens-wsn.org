#+TITLE: The LENS.WSN package
#+AUTHOR: Dr. John A.R. Williams
#+EMAIL: J.A.R.Williams@aston.ac.uk
#+LINK: hs http://www.lispworks.com/reference/HyperSpec//%s
#+STYLE: <link rel="stylesheet" type="text/css" href="clod.css" />
#+STARTUP: showall
#+OPTIONS: toc:4 H:10 num:3 @:t tags:nil

# link target 2: <<lens.wsn>>
# link target: <<package lens.wsn>>


* Internal Package: =lens.wsn=                                           :package:

- Uses:
    [[package common-lisp][common-lisp]], [[package common-lisp-user][common-lisp
    user]], [[package lens][lens]]
- Used by:
    [[package lens.wsn.mac.802.15.4][lens.wsn.mac.802.15.4]], [[package
    lens.wsn.mac.tmac][lens.wsn.mac.tmac]], [[package
    lens.wsn.mac.tuneable][lens.wsn.mac.tuneable]], [[package
    lens.wsn.routing.multipath-rings][lens.wsn.routing.multipath-rings]], [[package
    lens.wsn.routing.leach][lens.wsn.routing.leach]]


** Description

A simulation package for Wireless Sensor Networks
  with interfaces and implementations for representing from physical
  processes, sensors, applications, communications (network, MAC and
  radio) and a wireless channel model including interference,
  asymetric bidirectional loss and temporal fading.


** Class Hierarchy

# For this to work, you need to have graphviz installed, and the
# program `dot' must be in your PATH.
# You also need to enable the optional module 'org-exp-blocks'
# in Emacs' org mode. For this you will need the following line in
# your .emacs file:
#
#   (require 'org-exp-blocks)
#
# If you have trouble getting graphviz to process this diagram,
# try saving the lines between #+begin_dot and #+end_dot to a plain
# text file. Then run the following at the command prompt:
#
#   dot -Tpng file.txt -o class_diagram.png
#
# Then paste a link like
# <img src="class_diagram.png"  alt="Class diagram"/>
# into the html file.
#+begin_dot class-0003.png -Tpng
digraph data_relationships {
   rankdir="LR";
    "Network";
    "Mobility";
    "Multipath-Rings-Routing";
    "Direct-Node-Physical-Process";
    "Value-Reporting";
    "Application";
    "Network-Control-Command";
    "Throughput-Test";
    "Network";
    "Wsn-Module";
    "Routing";
    "Mac-Control-Command";
    "Leach-Routing";
    "No-Mobility";
    "Net-Mac-Control-Info";
    "Mac802.15.4";
    "Mac-Packet";
    "Line-Mobility";
    "Comms-Module";
    "Radio-Control-Command";
    "Application-Packet";
    "Node";
    "Tmac";
    "Mac";
    "Physical-Process";
    "Bypass-Routing";
    "Resources";
    "Value-Propagation";
    "Network-Control-Message";
    "Radio";
    "Wsn-Packet";
    "Scenario-Physical-Process";
    "Connectivity-Map";
    "Tuneable-Mac";
    "Mac-Radio-Control-Info";
    "App-Net-Control-Info";
    "Bypass-Mac";
    "Communications";
    "Simple-Aggregation";
    "Wsn";
    "Radio-Control-Message";
    "Mac-Control-Message";
    "Routing-Packet";
    "Wireless-Channel";
   "Compound-Module" -> "Network";
   "Wsn-Module" -> "Mobility";
   "Routing" -> "Multipath-Rings-Routing";
   "Physical-Process" -> "Direct-Node-Physical-Process";
   "Application" -> "Value-Reporting";
   "Wsn-Module" -> "Application";
   "Communications-Control-Command" -> "Network-Control-Command";
   "Application" -> "Throughput-Test";
   "Compound-Module" -> "Network";
   "With-Timers" -> "Wsn-Module";
   "Module" -> "Wsn-Module";
   "Comms-Module" -> "Routing";
   "Communications-Control-Command" -> "Mac-Control-Command";
   "Routing" -> "Leach-Routing";
   "Mobility" -> "No-Mobility";
   "Standard-Object" -> "Net-Mac-Control-Info";
   "Mac" -> "Mac802.15.4";
   "Wsn-Packet" -> "Mac-Packet";
   "Mobility" -> "Line-Mobility";
   "Wsn-Module" -> "Comms-Module";
   "Communications-Control-Command" -> "Radio-Control-Command";
   "Packet" -> "Application-Packet";
   "Compound-Module" -> "Node";
   "Mac" -> "Tmac";
   "Comms-Module" -> "Mac";
   "Module" -> "Physical-Process";
   "Routing" -> "Bypass-Routing";
   "Wsn-Module" -> "Resources";
   "Application" -> "Value-Propagation";
   "Communications-Control-Message" -> "Network-Control-Message";
   "Comms-Module" -> "Radio";
   "Packet" -> "Wsn-Packet";
   "Physical-Process" -> "Scenario-Physical-Process";
   "Application" -> "Connectivity-Map";
   "Mac" -> "Tuneable-Mac";
   "Standard-Object" -> "Mac-Radio-Control-Info";
   "Standard-Object" -> "App-Net-Control-Info";
   "Mac" -> "Bypass-Mac";
   "Compound-Module" -> "Communications";
   "Application" -> "Simple-Aggregation";
   "Network" -> "Wsn";
   "Communications-Control-Message" -> "Radio-Control-Message";
   "Communications-Control-Message" -> "Mac-Control-Message";
   "Wsn-Packet" -> "Routing-Packet";
   "Compound-Module" -> "Wireless-Channel";
   "Compound-Module" [shape=Mrecord,colour=lightblue,label="Compound-Module|lens"];
   "Network" [shape=Mrecord,colour=lightblue,label="Network|lens"];
   "Compound-Module" [shape=Mrecord,colour=lightblue,label="Compound-Module|lens"];
   "Standard-Object" [shape=Mrecord,colour=lightblue,label="Standard-Object|common-lisp"];
   "Standard-Object" [shape=Mrecord,colour=lightblue,label="Standard-Object|common-lisp"];
   "Packet" [shape=Mrecord,colour=lightblue,label="Packet|lens"];
   "Module" [shape=Mrecord,colour=lightblue,label="Module|lens"];
   "Compound-Module" [shape=Mrecord,colour=lightblue,label="Compound-Module|lens"];
   "Packet" [shape=Mrecord,colour=lightblue,label="Packet|lens"];
   "Standard-Object" [shape=Mrecord,colour=lightblue,label="Standard-Object|common-lisp"];
   "Module" [shape=Mrecord,colour=lightblue,label="Module|lens"];
   "With-Timers" [shape=Mrecord,colour=lightblue,label="With-Timers|lens"];
}
#+end_dot



** External Symbols




*** External Classes

# link target 2: <<app-net-control-info>>
# link target: <<class app-net-control-info>>


**** Class: =app-net-control-info=                                            :class:


***** Inheritance

- Parent classes:
    [[class standard-object][standard-object]]
- Precedence list:
    [[class app-net-control-info][app-net-control-info]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Information passed between application and
 communication layer which is external to the packet i.e. not carried
 by a real packet (the source and destination addresses and quality
 measures of received signal for the packet)


***** Direct Slots

# link target 2: <<rssi>>
# link target: <<slot rssi>>


****** Slot: =rssi=                                                              :slot:

- Value type: =float=
- Initial value: =NIL=
- Initargs: rssi
- Allocation: instance


******* Description

Received signal strength indicator (RSSI) of the received packet


******* Accessors

# link target 2: <<rssi>>
# link target: <<slot-accessor rssi>>


******** Slot Accessor: =rssi=                                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(rssi object)
#+END_SRC


********* Methods

- (=rssi= (mac-radio-control-info          [[class mac-radio-control
  info][=lens.wsn:mac-radio-control-info=]]))
- (=rssi= (net-mac-control-info          [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))
- (=rssi= (app-net-control-info          [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<lqi>>
# link target: <<slot lqi>>


****** Slot: =lqi=                                                               :slot:

- Value type: =float=
- Initial value: =NIL=
- Initargs: lqi
- Allocation: instance


******* Description

Link Quality Indicator (LQI) of the received packet


******* Accessors

# link target 2: <<lqi>>
# link target: <<slot-accessor lqi>>


******** Slot Accessor: =lqi=                                             :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(lqi object)
#+END_SRC


********* Methods

- (=lqi= (mac-radio-control-info         [[class mac-radio-control
  info][=lens.wsn:mac-radio-control-info=]]))
- (=lqi= (net-mac-control-info         [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))
- (=lqi= (app-net-control-info         [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<source>>
# link target: <<slot source>>


****** Internal Slot: =source=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: source
- Allocation: instance


******* Description

Routing layer source address of the received packet


******* Accessors

# link target 2: <<source>>
# link target: <<slot-accessor source>>


******** Internal Slot Accessor: =source=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(source object)
#+END_SRC


********* Methods

- (=source= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=source= (app-net-control-info            [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<destination>>
# link target: <<slot destination>>


****** Internal Slot: =destination=                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: destination
- Allocation: instance


******* Description

Routing layer destination address of the packet to be sent


******* Accessors

# link target 2: <<destination>>
# link target: <<slot-accessor destination>>


******** Internal Slot Accessor: =destination=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(destination object)
#+END_SRC


********* Methods

- (=destination= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=destination= (app-net-control-info                 [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))








# link target 2: <<application>>
# link target: <<class application>>


**** Class: =application=                                                     :class:


***** Inheritance

- Parent classes:
    [[class wsn-module][wsn-module]]
- Precedence list:
    [[class application][application]], [[class wsn-module][wsn-module]], [[class
    with-timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class throughput-test][throughput-test]], [[class connectivity
    map][connectivity-map]], [[class simple-aggregation][simple-aggregation]],
    [[class value-reporting][value-reporting]], [[class value-propagation][value
    propagation]]


***** Parameters

- applicationid :: a =symbol=.  Used to filter packet delivery to specific applications.
- priority :: a =integer=. Default: =1=. What priority to give the application packets
- header-overhead :: a =integer=. Default: =8=. Size of application packet header in bytes
- payload-overhead :: a =integer=. Default: =12=. Size of application packet payload in bytes

***** Description

The Application core module class connects to node
  sensors for measurements and to the node communication module for
  sending and receiving data.


***** Direct Slots

# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target: <<slot-accessor node>>


******** Slot Accessor: =node=                                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(node module)
#+END_SRC

********* Arguments


- module :: a [[wsn-module]]

********* Description


Return the parent [[node]] module for /module//.

********* Methods

- (=node= (instance [[class comms-module][=lens.wsn:comms-module=]]))
- (=node= (application [[class application][=lens.wsn:application=]]))
- (=node= (module [[class wsn-module][=lens.wsn:wsn-module=]]))





# link target 2: <<applicationid>>
# link target: <<slot applicationid>>


****** Slot: =applicationid=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: id
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Used to filter packet delivery to specific applications.


******* Accessors

# link target 2: <<applicationid>>
# link target: <<slot-accessor applicationid>>


******** Slot Accessor: =applicationid=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(applicationid object)
#+END_SRC


********* Methods

- (=applicationid= (application [[class application][=lens.wsn:application=]]))
- (=applicationid= (application-packet                   [[class application
  packet][=lens.wsn:application-packet=]]))





# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =integer=
- Initial value: =1=
- Initargs: priority
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

What priority to give the application packets


******* Accessors

# link target 2: <<priority>>
# link target: <<slot-accessor priority>>


******** Internal Slot Accessor: =priority=                               :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(priority object)
#+END_SRC


********* Methods

- (=priority= (throughput-test              [[class throughput
  test][=lens.wsn:throughput-test=]]))
- (=priority= (connectivity-map              [[class connectivity
  map][=lens.wsn:connectivity-map=]]))
- (=priority= (simple-aggregation              [[class simple
  aggregation][=lens.wsn:simple-aggregation=]]))
- (=priority= (application [[class application][=lens.wsn:application=]]))





# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =integer=
- Initial value: =8=
- Initargs: header-overhead
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Size of application packet header in bytes


******* Accessors

# link target 2: <<header-overhead>>
# link target: <<slot-accessor header-overhead>>


******** Slot Accessor: =header-overhead=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(header-overhead object)
#+END_SRC


********* Methods

- (=header-overhead= (comms-module                     [[class comms
  module][=lens.wsn:comms-module=]]))
- (=header-overhead= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=header-overhead= (application [[class
  application][=lens.wsn:application=]]))
- (=header-overhead= (wireless-signal-end                     [[class wireless
  signal-end][=lens.wsn::wireless-signal-end=]]))





# link target 2: <<payload-overhead>>
# link target: <<slot payload-overhead>>


****** Slot: =payload-overhead=                                                  :slot:

- Value type: =integer=
- Initial value: =12=
- Initargs: payload-overhead
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Size of application packet payload in bytes


******* Accessors

# link target 2: <<payload-overhead>>
# link target: <<slot-accessor payload-overhead>>


******** Slot Accessor: =payload-overhead=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(payload-overhead object)
#+END_SRC


********* Methods

- (=payload-overhead= (application [[class
  application][=lens.wsn:application=]]))





# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Sequence number of last packet sent




***** Indirect Slots

# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<application-packet>>
# link target: <<class application-packet>>


**** Class: =application-packet=                                              :class:


***** Inheritance

- Parent classes:
    [[class packet][packet]]
- Precedence list:
    [[class application-packet][application-packet]], [[class packet][packet]],
    [[class message][message]], [[class event][event]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class aggregate-application-packet][aggregate-application-packet]]


***** Description

A generic application packet. If defining your own
  packet you have to extend from this packet. You do not have to use
  the fields already defined, and you can always define your own
  size.


***** Direct Slots

# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: applicationid
- Allocation: instance


******* Description

Used to filter packet delivery to specific applications.


******* Accessors

# link target 2: <<applicationid>>
# link target: <<slot-accessor applicationid>>


******** Slot Accessor: =applicationid=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(applicationid object)
#+END_SRC


********* Methods

- (=applicationid= (application [[class application][=lens.wsn:application=]]))
- (=applicationid= (application-packet                   [[class application
  packet][=lens.wsn:application-packet=]]))





# link target 2: <<encapsulated-packet>>
# link target: <<slot encapsulated-packet>>


****** Internal Slot: =encapsulated-packet=                                      :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<payload>>
# link target: <<slot-accessor payload>>


******** Slot Accessor: =payload=                                         :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(payload object)
#+END_SRC


********* Methods

- (=payload= (application-packet             [[class application
  packet][=lens.wsn:application-packet=]]))





# link target 2: <<sequence-number>>
# link target: <<slot sequence-number>>


****** Slot: =sequence-number=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: sequence-number, seqnum
- Allocation: instance


******* Description

A field to distinguish between packets


******* Accessors

# link target 2: <<sequence-number>>
# link target: <<slot-accessor sequence-number>>


******** Slot Accessor: =sequence-number=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sequence-number object)
#+END_SRC


********* Methods

- (=sequence-number= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=sequence-number= (application-packet                     [[class
  application-packet][=lens.wsn:application-packet=]]))



# link target 2: <<sequence-number>>
# link target: <<slot-accessor sequence-number>>


******** Slot Accessor: =sequence-number=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sequence-number object)
#+END_SRC


********* Methods

- (=sequence-number= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=sequence-number= (application-packet                     [[class
  application-packet][=lens.wsn:application-packet=]]))





# link target 2: <<byte-length>>
# link target: <<slot byte-length>>


****** External Slot: =byte-length=                                              :slot:

- Value type: =fixnum=
- Initial value: =20=
- Initargs: byte-length
- Allocation: instance


******* Accessors

# link target 2: <<byte-length>>
# link target: <<slot-accessor byte-length>>


******** External Slot Accessor: =byte-length=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(byte-length entity)
#+END_SRC


********* Description

Return the length in whole octets (8 bit bytes) of
  an =entity=. For a [[packet]] the length should include the length
  of all encapsulated packets together with its overhead.


********* Methods

- (=byte-length= (pkt (eql lens.wsn.mac.802.15.4::mac802.15.4-gts-request
  packet)))
- (=byte-length= (pkt (eql lens.wsn.mac.802.15.4::mac802.15.4-ack-packet)))
- (=byte-length= (pkt (eql lens.wsn.mac.802.15.4::mac802.15.4-associate
  packet)))
- (=byte-length= (pkt                 [[class mac802.15.4-protocol
  packet][=lens.wsn.mac.802.15.4::mac802.15.4-protocol-packet=]]))
- (=byte-length= (pkt                 [[class mac802.15.4-beacon
  packet][=lens.wsn.mac.802.15.4::mac802.15.4-beacon-packet=]]))
- (=byte-length= (mac802.15.4-gts-request-packet                 [[class
  mac802.15.4-gts-request-packet][=lens.wsn.mac.802.15.4::mac802.15.4-gts
  request-packet=]]))
- (=byte-length= (mac802.15.4-ack-packet                 [[class mac802.15.4
  ack-packet][=lens.wsn.mac.802.15.4::mac802.15.4-ack-packet=]]))
- (=byte-length= (mac802.15.4-associate-packet                 [[class
  mac802.15.4-associate-packet][=lens.wsn.mac.802.15.4::mac802.15.4-associate
  packet=]]))
- (=byte-length= (pkt                 [[class aggregate-application
  packet][=lens.wsn.routing.leach::aggregate-application-packet=]]))
- (=byte-length= (packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=byte-length= (application-packet                 [[class application
  packet][=lens.wsn:application-packet=]]))
- (=byte-length= (pkt                 [[class wireless-signal
  end][=lens.wsn::wireless-signal-end=]]))
- (=byte-length= (packet-buffer [[class packet-buffer][=packet-buffer=]]))
- (=byte-length= (v [[class bit-vector][=bit-vector=]]))







***** Indirect Slots

# link target 2: <<bit-error-p>>
# link target: <<slot bit-error-p>>


****** External Slot: =bit-error-p=                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The result of error modelling after the packet is
sent through a channel that has a nonzero packet error rate (PER) or
bit error rate (BER). It is up to the receiver to examine this flag
after having received the packet, and to act upon it.


# link target 2: <<reception-start-p>>
# link target: <<slot reception-start-p>>


****** Internal Slot: =reception-start-p=                                        :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: deliver-on-reception-start
- Allocation: instance


******* Description

Identify whether this packet represents the start
or the end of the reception after the packet travelled through a
channel with a data rate. This flag is controlled by the
deliver-on-reception-start flag of the receiving gate.


# link target 2: <<control-info>>
# link target: <<slot control-info>>


****** External Slot: =control-info=                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: control-info
- Allocation: instance


******* Description

Additional data to be passed with packet between
    protocol layers.


# link target 2: <<duration>>
# link target: <<slot duration>>


****** External Slot: =duration=                                                 :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Duration of last transmission


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** External Slot: =timestamp=                                                :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Internal Slot: =to=                                                       :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Internal Slot: =from=                                                     :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** External Slot: =creation-time=                                            :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** External Slot: =root-event=                                               :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Internal Slot: =schedule-id=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** External Slot: =arrival-time=                                             :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** External Slot: =sent-time=                                                :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Internal Slot: =rank=                                                     :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)





# link target 2: <<bypass-mac>>
# link target: <<class bypass-mac>>


**** Class: =bypass-mac=                                                      :class:


***** Inheritance

- Parent classes:
    [[class mac][mac]]
- Precedence list:
    [[class bypass-mac][bypass-mac]], [[class mac][mac]], [[class comms
    module][comms-module]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

None.

***** Description

Not documented.


***** Direct Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =8=
- Initargs: none
- Allocation: instance


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** External Slot: =buffer-size=                                              :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<max-mac-frame-size>>
# link target: <<slot max-mac-frame-size>>


****** Slot: =max-mac-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target: <<slot radio>>


****** Slot: =radio=                                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<address>>
# link target: <<slot address>>


****** Internal Slot: =address=                                                  :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

MAC address - will default to nodeid.


# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Internal Slot: =buffer=                                                   :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<bypass-routing>>
# link target: <<class bypass-routing>>


**** Class: =bypass-routing=                                                  :class:


***** Inheritance

- Parent classes:
    [[class routing][routing]]
- Precedence list:
    [[class bypass-routing][bypass-routing]], [[class routing][routing]], [[class
    comms-module][comms-module]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

None.

***** Description

Not documented.


***** Direct Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =10=
- Initargs: none
- Allocation: instance


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** External Slot: =buffer-size=                                              :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance


# link target 2: <<max-net-frame-size>>
# link target: <<slot max-net-frame-size>>


****** Slot: =max-net-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Internal Slot: =buffer=                                                   :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<comms-module>>
# link target: <<class comms-module>>


**** Class: =comms-module=                                                    :class:


***** Inheritance

- Parent classes:
    [[class wsn-module][wsn-module]]
- Precedence list:
    [[class comms-module][comms-module]], [[class wsn-module][wsn-module]], [[class
    with-timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class radio][radio]], [[class mac][mac]], [[class routing][routing]]


***** Parameters

- buffer-size :: a =integer=. Default: =32=. Size of TX buffer
- header-overhead :: a =integer=. Default: =10=. The overhead added to encapsulated packets in
    bytes

***** Description

Base class for all WSN [[communications]]
  submodules. This provides a =header-overhead= parameter specifying
  the default overhead for packets, a [[packet-buffer]] transmission
  buffer for packets of maximum size specified by the =buffer-size=
  parameter and a [[history-buffer]] for implementing the
  [[duplicate-p]] to determine if we are receiving a duplicate packet.


***** Direct Slots

# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Internal Slot: =buffer=                                                   :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


******* Accessors

# link target 2: <<buffer>>
# link target: <<slot-accessor buffer>>


******** Internal Slot Accessor: =buffer=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(buffer object)
#+END_SRC


********* Methods

- (=buffer= (comms-module [[class comms-module][=lens.wsn:comms-module=]]))





# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** External Slot: =buffer-size=                                              :slot:

- Value type: =integer=
- Initial value: =32=
- Initargs: buffer-size
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Size of TX buffer


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


******* Accessors

# link target 2: <<packet-history>>
# link target: <<slot-accessor packet-history>>


******** Slot Accessor: =packet-history=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(packet-history object)
#+END_SRC


********* Methods

- (=packet-history= (comms-module [[class comms-module][=lens.wsn:comms
  module=]]))





# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<last-sequence-number>>
# link target: <<slot-accessor last-sequence-number>>


******** Slot Accessor: =last-sequence-number=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(last-sequence-number object)
#+END_SRC


********* Methods

- (=last-sequence-number= (comms-module                          [[class comms
  module][=lens.wsn:comms-module=]]))





# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =integer=
- Initial value: =10=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (units b)


******* Description

The overhead added to encapsulated packets in
    bytes


******* Accessors

# link target 2: <<header-overhead>>
# link target: <<slot-accessor header-overhead>>


******** Slot Accessor: =header-overhead=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(header-overhead object)
#+END_SRC


********* Methods

- (=header-overhead= (comms-module                     [[class comms
  module][=lens.wsn:comms-module=]]))
- (=header-overhead= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=header-overhead= (application [[class
  application][=lens.wsn:application=]]))
- (=header-overhead= (wireless-signal-end                     [[class wireless
  signal-end][=lens.wsn::wireless-signal-end=]]))







***** Indirect Slots

# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<communications>>
# link target: <<class communications>>


**** Class: =communications=                                                  :class:


***** Inheritance

- Parent classes:
    [[class compound-module][compound-module]]
- Precedence list:
    [[class communications][communications]], [[class compound-module][compound
    module]], [[class module][module]], [[class component][component]], [[class
    parameter-object][parameter-object]], [[class entity-with-signals][entity-with
    signals]], [[class owned-object][owned-object]], [[class named-object][named
    object]], [[class lens-object][lens-object]], [[class standard-object][standard
    object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

None.

***** Description

The Communications module for a WSN [[node]]
  receives signals from the [[wireless-channel]] on the receive gate,
  passes them through the [[radio]], [[mac]] and [[routing]] module
  representing the sublayers and sends application packets to the
  [[application]] (and visa versa).


***** Direct Slots



***** Indirect Slots

# link target 2: <<channels>>
# link target: <<slot channels>>


****** Internal Slot: =channels=                                                 :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<submodules>>
# link target: <<slot submodules>>


****** Internal Slot: =submodules=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<connectivity-map>>
# link target: <<class connectivity-map>>


**** Class: =connectivity-map=                                                :class:


***** Inheritance

- Parent classes:
    [[class application][application]]
- Precedence list:
    [[class connectivity-map][connectivity-map]], [[class
    application][application]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- priority :: a =t=. Default: =1=. NIL
- packet-spacing :: a =time-type=. Default: =0.1d0=. NIL
- packets-per-node :: a =integer=. Default: =100=. NIL

***** Description

Application module that will generate
  [[packets-per-node]] packets at intervals of [[packets-per-spacing]]
  - useful to determine connectivity statistics of a network.


***** Direct Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =8=
- Initargs: none
- Allocation: instance


# link target 2: <<payload-overhead>>
# link target: <<slot payload-overhead>>


****** Slot: =payload-overhead=                                                  :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =t=
- Initial value: =1=
- Initargs: priority
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

# link target 2: <<priority>>
# link target: <<slot-accessor priority>>


******** Internal Slot Accessor: =priority=                               :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(priority object)
#+END_SRC


********* Methods

- (=priority= (throughput-test              [[class throughput
  test][=lens.wsn:throughput-test=]]))
- (=priority= (connectivity-map              [[class connectivity
  map][=lens.wsn:connectivity-map=]]))
- (=priority= (simple-aggregation              [[class simple
  aggregation][=lens.wsn:simple-aggregation=]]))
- (=priority= (application [[class application][=lens.wsn:application=]]))





# link target 2: <<packet-spacing>>
# link target: <<slot packet-spacing>>


****** Slot: =packet-spacing=                                                    :slot:

- Value type: =time-type=
- Initial value: =0.1d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

# link target 2: <<packet-spacing>>
# link target: <<slot-accessor packet-spacing>>


******** Slot Accessor: =packet-spacing=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(packet-spacing object)
#+END_SRC


********* Methods

- (=packet-spacing= (throughput-test                    [[class throughput
  test][=lens.wsn:throughput-test=]]))
- (=packet-spacing= (connectivity-map                    [[class connectivity
  map][=lens.wsn:connectivity-map=]]))





# link target 2: <<packets-per-node>>
# link target: <<slot packets-per-node>>


****** Slot: =packets-per-node=                                                  :slot:

- Value type: =integer=
- Initial value: =100=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

# link target 2: <<packets-per-node>>
# link target: <<slot-accessor packets-per-node>>


******** Slot Accessor: =packets-per-node=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(packets-per-node object)
#+END_SRC


********* Methods

- (=packets-per-node= (connectivity-map                      [[class
  connectivity-map][=lens.wsn:connectivity-map=]]))





# link target 2: <<packets-sent>>
# link target: <<slot packets-sent>>


****** Slot: =packets-sent=                                                      :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<packets-sent>>
# link target: <<slot-accessor packets-sent>>


******** Slot Accessor: =packets-sent=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(packets-sent object)
#+END_SRC


********* Methods

- (=packets-sent= (connectivity-map                  [[class connectivity
  map][=lens.wsn:connectivity-map=]]))





# link target 2: <<send-packet>>
# link target: <<slot send-packet>>


****** Slot: =send-packet=                                                       :slot:

- Value type: =timer-message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Sequence number of last packet sent


# link target 2: <<applicationid>>
# link target: <<slot applicationid>>


****** Slot: =applicationid=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: id
- Allocation: instance


******* Description

Used to filter packet delivery to specific applications.


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<direct-node-physical-process>>
# link target: <<class direct-node-physical-process>>


**** Class: =direct-node-physical-process=                                    :class:


***** Inheritance

- Parent classes:
    [[class physical-process][physical-process]]
- Precedence list:
    [[class direct-node-physical-process][direct-node-physical-process]], [[class
    physical-process][physical-process]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- default-value :: a =real=. Default: =0.0=. NIL
- assigned-values :: a =read=.  Assigned values in a range specification

***** Description

Simple physical process where a value is assigned
  per node


***** Direct Slots

# link target 2: <<default-value>>
# link target: <<slot default-value>>


****** Slot: =default-value=                                                     :slot:

- Value type: =real=
- Initial value: =0.0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<assigned-values>>
# link target: <<slot assigned-values>>


****** Slot: =assigned-values=                                                   :slot:

- Value type: =read=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Assigned values in a range specification




***** Indirect Slots

# link target: <<slot function>>


****** Inherited Slot: =function=                                                :slot:

- Value type: =function=
- Initial value: =#'(LAMBDA (LENS.WSN::M LENS.WSN::C LENS.WSN::TM)             
         (DECLARE (IGNORE LENS.WSN::M LENS.WSN::C LENS.WSN::TM))               
       (UNIFORM 0.0 1.0))=
- Initargs: none
- Allocation: instance


******* Description

A function measurand, location and time returning
    measured value. Default is uniform ransom number betwee 0 and 1.


# link target 2: <<description>>
# link target: <<slot description>>


****** Slot: =description=                                                       :slot:

- Value type: =string=
- Initial value: =NIL=
- Initargs: description
- Allocation: instance


******* Description

Text description of a physical process


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<leach-routing>>
# link target: <<class leach-routing>>


**** Class: =leach-routing=                                                   :class:


***** Inheritance

- Parent classes:
    [[class routing][routing]]
- Precedence list:
    [[class leach-routing][leach-routing]], [[class routing][routing]], [[class
    comms-module][comms-module]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- sink-network-address :: a =integer=.  NIL
- applicationid :: a =symbol=. Default: ='THROUGHPUT-TEST=. Default destination application for aggregates
- percentage :: a =real=.  NIL
- round-length :: a =time-type=.  NIL
- slot-length :: a =real=.  NIL
- adv-packet-size :: a =fixnum=. Default: =9=. NIL
- join-packet-size :: a =fixnum=. Default: =9=. NIL
- tdma-packet-size :: a =fixnum=. Default: =150=. NIL
- data-packet-size :: a =fixnum=. Default: =9=. NIL
- sensibility :: a =float=. Default: =-95=. dBm
- aggr-consumption :: a =float=. Default: =5.e-9=. Energy per bit used in transmitting aggregate data packet from cluster head

***** Description

Not documented.


***** Direct Slots

# link target 2: <<sink-network-address>>
# link target: <<slot sink-network-address>>


****** Slot: =sink-network-address=                                              :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

# link target 2: <<sink-network-address>>
# link target: <<slot-accessor sink-network-address>>


******** Slot Accessor: =sink-network-address=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sink-network-address module)
#+END_SRC

********* Attributes


- module :: an [[application]] or other [[wsn-module]]

********* Description


Return the address of sink node for reporting applications. Default
is =sink= however some applications take this as a parameter.

********* Methods

- (=sink-network-address= (simple-aggregation                          [[class
  simple-aggregation][=lens.wsn:simple-aggregation=]]))
- (=sink-network-address= (value-reporting                          [[class
  value-reporting][=lens.wsn:value-reporting=]]))
- (=sink-network-address= (leach-routing                          [[class leach
  routing][=lens.wsn:leach-routing=]]))
- (=sink-network-address= (entity [[class
  application][=lens.wsn:application=]]))
- (=sink-network-address= (node [[class node][=lens.wsn:node=]]))
- (=sink-network-address= (instance [[class wsn-module][=lens.wsn:wsn
  module=]]))





# link target 2: <<applicationid>>
# link target: <<slot applicationid>>


****** Slot: =applicationid=                                                     :slot:

- Value type: =symbol=
- Initial value: ='LENS.WSN:THROUGHPUT-TEST=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Default destination application for aggregates


# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =14=
- Initargs: none
- Allocation: instance


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** External Slot: =buffer-size=                                              :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance


# link target 2: <<max-net-frame-size>>
# link target: <<slot max-net-frame-size>>


****** Slot: =max-net-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<percentage>>
# link target: <<slot percentage>>


****** Inherited Slot: =percentage=                                              :slot:

- Value type: =real=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<round-length>>
# link target: <<slot round-length>>


****** Slot: =round-length=                                                      :slot:

- Value type: =time-type=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<slot-length>>
# link target: <<slot slot-length>>


****** Slot: =slot-length=                                                       :slot:

- Value type: =real=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<adv-packet-size>>
# link target: <<slot adv-packet-size>>


****** Slot: =adv-packet-size=                                                   :slot:

- Value type: =fixnum=
- Initial value: =9=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<join-packet-size>>
# link target: <<slot join-packet-size>>


****** Slot: =join-packet-size=                                                  :slot:

- Value type: =fixnum=
- Initial value: =9=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<tdma-packet-size>>
# link target: <<slot tdma-packet-size>>


****** Slot: =tdma-packet-size=                                                  :slot:

- Value type: =fixnum=
- Initial value: =150=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<data-packet-size>>
# link target: <<slot data-packet-size>>


****** Slot: =data-packet-size=                                                  :slot:

- Value type: =fixnum=
- Initial value: =9=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<round-number>>
# link target: <<slot round-number>>


****** Slot: =round-number=                                                      :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<round-number>>
# link target: <<slot-accessor round-number>>


******** Slot Accessor: =round-number=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(round-number object)
#+END_SRC


********* Methods

- (=round-number= (leach-routing                  [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<probability>>
# link target: <<slot probability>>


****** Slot: =probability=                                                       :slot:

- Value type: =float=
- Initial value: =0.0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<probability>>
# link target: <<slot-accessor probability>>


******** Slot Accessor: =probability=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(probability object)
#+END_SRC


********* Methods

- (=probability= (leach-routing [[class leach-routing][=lens.wsn:leach
  routing=]]))





# link target 2: <<sensibility>>
# link target: <<slot sensibility>>


****** Slot: =sensibility=                                                       :slot:

- Value type: =float=
- Initial value: =-95=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

dBm


******* Accessors

# link target 2: <<sensibility>>
# link target: <<slot-accessor sensibility>>


******** Slot Accessor: =sensibility=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sensibility object)
#+END_SRC


********* Methods

- (=sensibility= (leach-routing [[class leach-routing][=lens.wsn:leach
  routing=]]))





# link target 2: <<aggr-consumption>>
# link target: <<slot aggr-consumption>>


****** Slot: =aggr-consumption=                                                  :slot:

- Value type: =float=
- Initial value: =5.e-9=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Energy per bit used in transmitting aggregate data packet from cluster head


******* Accessors

# link target 2: <<aggr-consumption>>
# link target: <<slot-accessor aggr-consumption>>


******** Slot Accessor: =aggr-consumption=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(aggr-consumption object)
#+END_SRC


********* Methods

- (=aggr-consumption= (leach-routing                      [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<aggregate-buffer>>
# link target: <<slot aggregate-buffer>>


****** Slot: =aggregate-buffer=                                                  :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Stacked up application packets for sending as aggregate


******* Accessors

# link target 2: <<aggregate-buffer>>
# link target: <<slot-accessor aggregate-buffer>>


******** Slot Accessor: =aggregate-buffer=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(aggregate-buffer object)
#+END_SRC


********* Methods

- (=aggregate-buffer= (leach-routing                      [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<temp-tx-buffer>>
# link target: <<slot temp-tx-buffer>>


****** Slot: =temp-tx-buffer=                                                    :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Temp buffer for packets received before cluster formed


******* Accessors

# link target 2: <<temp-tx-buffer>>
# link target: <<slot-accessor temp-tx-buffer>>


******** Slot Accessor: =temp-tx-buffer=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(temp-tx-buffer object)
#+END_SRC


********* Methods

- (=temp-tx-buffer= (leach-routing                    [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<cluster-members>>
# link target: <<slot cluster-members>>


****** Slot: =cluster-members=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<cluster-members>>
# link target: <<slot-accessor cluster-members>>


******** Slot Accessor: =cluster-members=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cluster-members object)
#+END_SRC


********* Methods

- (=cluster-members= (leach-routing                     [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<cluster-head-candidates>>
# link target: <<slot cluster-head-candidates>>


****** Slot: =cluster-head-candidates=                                           :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<cluster-head-candidates>>
# link target: <<slot-accessor cluster-head-candidates>>


******** Slot Accessor: =cluster-head-candidates=                         :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cluster-head-candidates object)
#+END_SRC


********* Methods

- (=cluster-head-candidates= (leach-routing                             [[class
  leach-routing][=lens.wsn:leach-routing=]]))





# link target 2: <<powers>>
# link target: <<slot powers>>


****** Slot: =powers=                                                            :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<powers>>
# link target: <<slot-accessor powers>>


******** Slot Accessor: =powers=                                          :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(powers object)
#+END_SRC


********* Methods

- (=powers= (leach-routing [[class leach-routing][=lens.wsn:leach-routing=]]))





# link target 2: <<cluster-length>>
# link target: <<slot cluster-length>>


****** Slot: =cluster-length=                                                    :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<cluster-head-p>>
# link target: <<slot cluster-head-p>>


****** Slot: =cluster-head-p=                                                    :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<cluster-head-p>>
# link target: <<slot-accessor cluster-head-p>>


******** Slot Accessor: =cluster-head-p=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cluster-head-p object)
#+END_SRC


********* Methods

- (=cluster-head-p= (leach-routing                    [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<end-form-cluster>>
# link target: <<slot end-form-cluster>>


****** Slot: =end-form-cluster=                                                  :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<end-form-cluster>>
# link target: <<slot-accessor end-form-cluster>>


******** Slot Accessor: =end-form-cluster=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(end-form-cluster object)
#+END_SRC


********* Methods

- (=end-form-cluster= (leach-routing                      [[class leach
  routing][=lens.wsn:leach-routing=]]))





# link target 2: <<ct-p>>
# link target: <<slot ct-p>>


****** Slot: =ct-p=                                                              :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Internal Slot: =buffer=                                                   :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<line-mobility>>
# link target: <<class line-mobility>>


**** Class: =line-mobility=                                                   :class:


***** Inheritance

- Parent classes:
    [[class mobility][mobility]]
- Precedence list:
    [[class line-mobility][line-mobility]], [[class mobility][mobility]], [[class
    wsn-module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- destination :: a =coord=. Default: =(MAKE-COORD 1.0 1.0)=. End location coordinate.
- speed :: a =real=. Default: =1=. Speed of motion
- update-interval :: a =time-type=. Default: =1.0d0=. Time tnterval for position updates along trajectory

***** Description

[[mobility]] module for movement backwards and
  forwards along a straight line between [[start-location]] and
  [[destination-location]].


***** Direct Slots

# link target 2: <<start-location>>
# link target: <<slot start-location>>


****** Slot: =start-location=                                                    :slot:

- Value type: =coord=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Starting location coordinate


******* Accessors

# link target 2: <<start-location>>
# link target: <<slot-accessor start-location>>


******** Slot Accessor: =start-location=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(start-location object)
#+END_SRC


********* Methods

- (=start-location= (line-mobility                    [[class line
  mobility][=lens.wsn:line-mobility=]]))





# link target 2: <<destination>>
# link target: <<slot destination>>


****** Internal Slot: =destination=                                              :slot:

- Value type: =coord=
- Initial value: =(MAKE-COORD 1.0 1.0)=
- Initargs: destination-location
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

End location coordinate.


# link target 2: <<delta>>
# link target: <<slot delta>>


****** Slot: =delta=                                                             :slot:

- Value type: =coord=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Vector delta from start to end


# link target 2: <<distance>>
# link target: <<slot distance>>


****** External Slot: =distance=                                                 :slot:

- Value type: =real=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Distance from start to end


# link target 2: <<speed>>
# link target: <<slot speed>>


****** Inherited Slot: =speed=                                                   :slot:

- Value type: =real=
- Initial value: =1=
- Initargs: speed
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Speed of motion


# link target 2: <<update-interval>>
# link target: <<slot update-interval>>


****** Slot: =update-interval=                                                   :slot:

- Value type: =time-type=
- Initial value: =1.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Time tnterval for position updates along trajectory


******* Accessors

# link target 2: <<update-interval>>
# link target: <<slot-accessor update-interval>>


******** Slot Accessor: =update-interval=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(update-interval object)
#+END_SRC


********* Methods

- (=update-interval= (resources [[class resources][=lens.wsn:resources=]]))
- (=update-interval= (line-mobility                     [[class line
  mobility][=lens.wsn:line-mobility=]]))





# link target 2: <<update>>
# link target: <<slot update>>


****** Slot: =update=                                                            :slot:

- Value type: =timer-message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<static-p>>
# link target: <<slot static-p>>


****** Slot: =static-p=                                                          :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: static-p
- Allocation: instance


******* Description

If true (default) this the node is
             static. Subclasses should specialise this
             appropriately.


# link target: <<slot orientation>>


****** Slot: =orientation=                                                       :slot:

- Value type: =orientation=
- Initial value: =(LENS.WSN::MAKE-ORIENTATION)=
- Initargs: orientation
- Allocation: instance


******* Description

Initial [[orientation]] for [[node]]


# link target 2: <<location>>
# link target: <<slot location>>


****** Slot: =location=                                                          :slot:

- Value type: =coord=
- Initial value: =NIL=
- Initargs: location
- Allocation: instance


******* Description

Initial location [[coord]] for node.


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<mac>>
# link target: <<class mac>>


**** Class: =mac=                                                             :class:


***** Inheritance

- Parent classes:
    [[class comms-module][comms-module]]
- Precedence list:
    [[class mac][mac]], [[class comms-module][comms-module]], [[class wsn
    module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class mac802.15.4][mac802.15.4]], [[class tmac][tmac]], [[class tuneable
    mac][tuneable-mac]], [[class bypass-mac][bypass-mac]]


***** Parameters

- max-mac-frame-size :: a =integer=. Default: =0=. in bytes
- address :: a =integer=.  MAC address - will default to nodeid.

***** Description

Base class for all mac layer module
  implementations. Connects to [[radio]] submodule and [[routing]]
  submodule in the [[communications]] module. Has a [[mac-address]]
  physical layer adress for this device (defaults to the [[nodeid]]
  and a [[max-mac-frame-size]] specifyin largest packet size
  accepted.


***** Direct Slots

# link target 2: <<max-mac-frame-size>>
# link target: <<slot max-mac-frame-size>>


****** Slot: =max-mac-frame-size=                                                :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: max-mac-frame-size
- Allocation: instance
- Parameter: t
- Properties: (units b)


******* Description

in bytes


******* Accessors

# link target 2: <<max-mac-frame-size>>
# link target: <<slot-accessor max-mac-frame-size>>


******** Slot Accessor: =max-mac-frame-size=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(max-mac-frame-size object)
#+END_SRC


********* Methods

- (=max-mac-frame-size= (mac [[class mac][=lens.wsn:mac=]]))





# link target 2: <<address>>
# link target: <<slot address>>


****** Internal Slot: =address=                                                  :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

MAC address - will default to nodeid.


******* Accessors

# link target 2: <<mac-address>>
# link target: <<slot-accessor mac-address>>


******** Slot Accessor: =mac-address=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(mac-address object)
#+END_SRC


********* Methods

- (=mac-address= (radio [[class radio][=lens.wsn:radio=]]))
- (=mac-address= (node [[class node][=lens.wsn:node=]]))
- (=mac-address= (mac [[class mac][=lens.wsn:mac=]]))





# link target: <<slot radio>>


****** Slot: =radio=                                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target: <<slot-accessor radio>>


******** Slot Accessor: =radio=                                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(radio object)
#+END_SRC


********* Methods

- (=radio= (mac [[class mac][=lens.wsn:mac=]]))







***** Indirect Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =integer=
- Initial value: =10=
- Initargs: none
- Allocation: instance


******* Description

The overhead added to encapsulated packets in
    bytes


# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** External Slot: =buffer-size=                                              :slot:

- Value type: =integer=
- Initial value: =32=
- Initargs: buffer-size
- Allocation: instance


******* Description

Size of TX buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Internal Slot: =buffer=                                                   :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<mac-control-command>>
# link target: <<class mac-control-command>>


**** Class: =mac-control-command=                                             :class:


***** Inheritance

- Parent classes:
    [[class communications-control-command][communications-control-command]]
- Precedence list:
    [[class mac-control-command][mac-control-command]], [[class communications
    control-command][communications-control-command]], [[class message][message]],
    [[class event][event]], [[class owned-object][owned-object]], [[class named
    object][named-object]], [[class lens-object][lens-object]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<argument>>
# link target: <<slot argument>>


****** Slot: =argument=                                                          :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: argument
- Allocation: instance


******* Description

Additional arguments with command


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** External Slot: =timestamp=                                                :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Internal Slot: =to=                                                       :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Internal Slot: =from=                                                     :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** External Slot: =creation-time=                                            :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** External Slot: =root-event=                                               :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Internal Slot: =schedule-id=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** External Slot: =arrival-time=                                             :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** External Slot: =sent-time=                                                :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Internal Slot: =rank=                                                     :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name, command
- Allocation: instance


******* Description

Command is held as message name





# link target 2: <<mac-control-message>>
# link target: <<class mac-control-message>>


**** Class: =mac-control-message=                                             :class:


***** Inheritance

- Parent classes:
    [[class communications-control-message][communications-control-message]]
- Precedence list:
    [[class mac-control-message][mac-control-message]], [[class communications
    control-message][communications-control-message]], [[class message][message]],
    [[class event][event]], [[class owned-object][owned-object]], [[class named
    object][named-object]], [[class lens-object][lens-object]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<argument>>
# link target: <<slot argument>>


****** Slot: =argument=                                                          :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: argument
- Allocation: instance


******* Description

Additional arguments with command


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** External Slot: =timestamp=                                                :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Internal Slot: =to=                                                       :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Internal Slot: =from=                                                     :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** External Slot: =creation-time=                                            :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** External Slot: =root-event=                                               :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Internal Slot: =schedule-id=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** External Slot: =arrival-time=                                             :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** External Slot: =sent-time=                                                :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Internal Slot: =rank=                                                     :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name, command
- Allocation: instance


******* Description

Control message command name





# link target 2: <<mac-packet>>
# link target: <<class mac-packet>>


**** Class: =mac-packet=                                                      :class:


***** Inheritance

- Parent classes:
    [[class wsn-packet][wsn-packet]]
- Precedence list:
    [[class mac-packet][mac-packet]], [[class wsn-packet][wsn-packet]], [[class
    packet][packet]], [[class message][message]], [[class event][event]], [[class
    owned-object][owned-object]], [[class named-object][named-object]], [[class
    lens-object][lens-object]], [[class standard-object][standard-object]], [[class
    slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class mac802.15.4-packet][mac802.15.4-packet]], [[class tmac-packet][tmac
    packet]]


***** Description

Base class for all mac-layer packet types.


***** Direct Slots



***** Indirect Slots

# link target 2: <<sequence-number>>
# link target: <<slot sequence-number>>


****** Slot: =sequence-number=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: sequence-number, seqnum
- Allocation: instance


******* Description

a field to distinguish between packets


# link target 2: <<destination>>
# link target: <<slot destination>>


****** Internal Slot: =destination=                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: destination
- Allocation: instance


******* Description

the destination address of the packet to be sent


# link target 2: <<source>>
# link target: <<slot source>>


****** Internal Slot: =source=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: source
- Allocation: instance


******* Description

the  source address of the received packet


# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: byte-length, header-overhead
- Allocation: instance


******* Description

In bytes


# link target 2: <<bit-error-p>>
# link target: <<slot bit-error-p>>


****** External Slot: =bit-error-p=                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The result of error modelling after the packet is
sent through a channel that has a nonzero packet error rate (PER) or
bit error rate (BER). It is up to the receiver to examine this flag
after having received the packet, and to act upon it.


# link target 2: <<reception-start-p>>
# link target: <<slot reception-start-p>>


****** Internal Slot: =reception-start-p=                                        :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: deliver-on-reception-start
- Allocation: instance


******* Description

Identify whether this packet represents the start
or the end of the reception after the packet travelled through a
channel with a data rate. This flag is controlled by the
deliver-on-reception-start flag of the receiving gate.


# link target 2: <<control-info>>
# link target: <<slot control-info>>


****** External Slot: =control-info=                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: control-info
- Allocation: instance


******* Description

Additional data to be passed with packet between
    protocol layers.


# link target 2: <<duration>>
# link target: <<slot duration>>


****** External Slot: =duration=                                                 :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Duration of last transmission


# link target 2: <<encapsulated-packet>>
# link target: <<slot encapsulated-packet>>


****** Internal Slot: =encapsulated-packet=                                      :slot:

- Value type: =packet=
- Initial value: =NIL=
- Initargs: encapsulated-packet
- Allocation: instance


******* Description

Higher level encapsulated protocol packet.


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** External Slot: =timestamp=                                                :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Internal Slot: =to=                                                       :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Internal Slot: =from=                                                     :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** External Slot: =creation-time=                                            :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** External Slot: =root-event=                                               :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Internal Slot: =schedule-id=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** External Slot: =arrival-time=                                             :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** External Slot: =sent-time=                                                :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Internal Slot: =rank=                                                     :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<mac-radio-control-info>>
# link target: <<class mac-radio-control-info>>


**** Class: =mac-radio-control-info=                                          :class:


***** Inheritance

- Parent classes:
    [[class standard-object][standard-object]]
- Precedence list:
    [[class mac-radio-control-info][mac-radio-control-info]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Control information from radi to mac layers (RSSI or LQI)


***** Direct Slots

# link target 2: <<rssi>>
# link target: <<slot rssi>>


****** Slot: =rssi=                                                              :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: rssi
- Allocation: instance


******* Description

the RSSI of the received packet


******* Accessors

# link target 2: <<rssi>>
# link target: <<slot-accessor rssi>>


******** Slot Accessor: =rssi=                                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(rssi object)
#+END_SRC


********* Methods

- (=rssi= (mac-radio-control-info          [[class mac-radio-control
  info][=lens.wsn:mac-radio-control-info=]]))
- (=rssi= (net-mac-control-info          [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))
- (=rssi= (app-net-control-info          [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<lqi>>
# link target: <<slot lqi>>


****** Slot: =lqi=                                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: lqi
- Allocation: instance


******* Description

the LQI of the received packet


******* Accessors

# link target 2: <<lqi>>
# link target: <<slot-accessor lqi>>


******** Slot Accessor: =lqi=                                             :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(lqi object)
#+END_SRC


********* Methods

- (=lqi= (mac-radio-control-info         [[class mac-radio-control
  info][=lens.wsn:mac-radio-control-info=]]))
- (=lqi= (net-mac-control-info         [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))
- (=lqi= (app-net-control-info         [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))








# link target 2: <<mac802.15.4>>
# link target: <<class mac802.15.4>>


**** Class: =mac802.15.4=                                                     :class:


***** Inheritance

- Parent classes:
    [[class mac][mac]]
- Precedence list:
    [[class mac802.15.4][mac802.15.4]], [[class mac][mac]], [[class comms
    module][comms-module]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- print-state-transitions :: a =boolean=.  Debugging parameter
- max-mac-frame-size :: a =t=. Default: =0=. NIL
- header-overhead :: a =t=. Default: =14=. NIL
- buffer-size :: a =t=. Default: =32=. NIL
- enable-slotted-csma :: a =boolean=. Default: =T=. Enables the slotted version of the CSMA algorithm,
    explained in the standard.
- enable-cap :: a =boolean=. Default: =T=. NIL
- is-ffd :: a =boolean=.  Is the node a full function device? These are the
    only devices which can act as coordinators.
- is-pan-coordinator :: a =boolean=.  Is the node the PAN coordinator?
- battery-life-extension :: a =boolean=.  NIL
- frame-order :: a =fixnum=. Default: =4=. Specifies how long is the active portion of a
    frame, when radios are listening or transmitting. Specifically it
    is equal to base-superframe-duration^{2 frame-order}.
- beacon-order :: a =fixnum=. Default: =6=. Specifies how long is the full frame (active and
    inactive). This is the period between two beacons. Specifically it
    is equal to base-superframe-duration^{2 beacon-order}.
- unit-backoff-period :: a =fixnum=. Default: =20=. Specifies how long is the unit of time used in
    backing off in symbols. More specifically the standard uses a
    exponential backoff technique and the backoff time is:
    random(1…2backoff-exponent-1) · (unit-backoff-period ·
    symbol-time). Backoff_exponent is a variable automatically updated
    by the protocol.
- base-slot-duration :: a =fixnum=. Default: =60=. Parameter used to calculate [[base-superframe-duration]]
- num-superframe-slots :: a =fixnum=. Default: =16=. Parameter used to calculate [[base-superframe-duration]]
- min-be :: a =fixnum=. Default: =5=. In calculating the backoff time, this is the
    minimum value that the backoff exponent can take.
- max-be :: a =fixnum=. Default: =7=. In calculating the backoff time, this is the
    maximum value that the backoff exponent can take.
- max-csma-backoffs :: a =fixnum=. Default: =4=. Maximum number of backoffs until the transmission
    of the packet is aborted and go for another retry (if there are
    any left).
- max-frame-retries :: a =fixnum=. Default: =2=. Maximum number of retries until the packet is
    considered lost and the upper layer notified.
- max-lost-beacons :: a =fixnum=. Default: =4=. Maximum number of beacons lost until the node
    considers itself disassociated from the PAN coordinator.
- min-cap-length :: a =fixnum=. Default: =440=. The minimum length of CAP period when GTS is used,
    defined in symbols.
- request-gts :: a =fixnum=. Default: =0=. Allows a node to request a specified number of GTS
    slots from the coordinator. If the request is successful, DATA
    packets will be transmitted in the GTS slots assigned by the
    coordinator These slots are assigned dynamically according to
    availability. If no slots are available, the request will
    fail. Note that this is an easy way for a node to statically
    request a certain number of slots. A more dynamic solution would
    be for the application module to instruct the MAC module how many
    slots should it request. The current (parameter-based) solution is
    a shortcut when we have constant application traffic and we can
    figure out a priory an optimal way to share the slots among the
    nodes.
- guard-time :: a =time-type=. Default: =0.001=. Reception guard time to sue in physical
    layer. Essential when dealing with time synchronisation.

***** Description

IEEE802.15.4 MAC - IEE standard for wireless low-power short range communications.

Functionality implemented:
- CSMA-CA functionality (slotted and unslotted)
- Beacon-enabled PANs with association (auto associate)
- Direct data transfer mode
- Guaranteed time slots (GTS).

Features that are NOT implemented:
- Non-beacon PANs
- Indirect data transfer mode
- Multihop PAN topologies

See The IEEE 802.15.4 standard (ver. 2006) [http://standards.ieee.org/getieee802/download/802.15.4-2006.pdf]


***** Direct Slots

# link target 2: <<print-state-transitions>>
# link target: <<slot print-state-transitions>>


****** Slot: =print-state-transitions=                                           :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Debugging parameter


# link target 2: <<max-mac-frame-size>>
# link target: <<slot max-mac-frame-size>>


****** Slot: =max-mac-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =14=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** External Slot: =buffer-size=                                              :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<enable-slotted-csma>>
# link target: <<slot enable-slotted-csma>>


****** Slot: =enable-slotted-csma=                                               :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Enables the slotted version of the CSMA algorithm,
    explained in the standard.


# link target 2: <<enable-cap>>
# link target: <<slot enable-cap>>


****** Slot: =enable-cap=                                                        :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<is-ffd>>
# link target: <<slot is-ffd>>


****** Slot: =is-ffd=                                                            :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Is the node a full function device? These are the
    only devices which can act as coordinators.


# link target 2: <<is-pan-coordinator>>
# link target: <<slot is-pan-coordinator>>


****** Slot: =is-pan-coordinator=                                                :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Is the node the PAN coordinator?


# link target 2: <<battery-life-extension>>
# link target: <<slot battery-life-extension>>


****** Slot: =battery-life-extension=                                            :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<frame-order>>
# link target: <<slot frame-order>>


****** Slot: =frame-order=                                                       :slot:

- Value type: =fixnum=
- Initial value: =4=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Specifies how long is the active portion of a
    frame, when radios are listening or transmitting. Specifically it
    is equal to base-superframe-duration^{2 frame-order}.


# link target 2: <<beacon-order>>
# link target: <<slot beacon-order>>


****** Slot: =beacon-order=                                                      :slot:

- Value type: =fixnum=
- Initial value: =6=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Specifies how long is the full frame (active and
    inactive). This is the period between two beacons. Specifically it
    is equal to base-superframe-duration^{2 beacon-order}.


# link target 2: <<unit-backoff-period>>
# link target: <<slot unit-backoff-period>>


****** Slot: =unit-backoff-period=                                               :slot:

- Value type: =fixnum=
- Initial value: =20=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Specifies how long is the unit of time used in
    backing off in symbols. More specifically the standard uses a
    exponential backoff technique and the backoff time is:
    random(1…2backoff-exponent-1) · (unit-backoff-period ·
    symbol-time). Backoff_exponent is a variable automatically updated
    by the protocol.


# link target 2: <<base-slot-duration>>
# link target: <<slot base-slot-duration>>


****** Slot: =base-slot-duration=                                                :slot:

- Value type: =fixnum=
- Initial value: =60=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Parameter used to calculate [[base-superframe-duration]]


# link target 2: <<num-superframe-slots>>
# link target: <<slot num-superframe-slots>>


****** Slot: =num-superframe-slots=                                              :slot:

- Value type: =fixnum=
- Initial value: =16=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Parameter used to calculate [[base-superframe-duration]]


# link target 2: <<base-superframe-duration>>
# link target: <<slot base-superframe-duration>>


****** Slot: =base-superframe-duration=                                          :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<min-be>>
# link target: <<slot min-be>>


****** Slot: =min-be=                                                            :slot:

- Value type: =fixnum=
- Initial value: =5=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

In calculating the backoff time, this is the
    minimum value that the backoff exponent can take.


# link target 2: <<max-be>>
# link target: <<slot max-be>>


****** Slot: =max-be=                                                            :slot:

- Value type: =fixnum=
- Initial value: =7=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

In calculating the backoff time, this is the
    maximum value that the backoff exponent can take.


# link target 2: <<max-csma-backoffs>>
# link target: <<slot max-csma-backoffs>>


****** Slot: =max-csma-backoffs=                                                 :slot:

- Value type: =fixnum=
- Initial value: =4=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Maximum number of backoffs until the transmission
    of the packet is aborted and go for another retry (if there are
    any left).


# link target 2: <<max-frame-retries>>
# link target: <<slot max-frame-retries>>


****** Slot: =max-frame-retries=                                                 :slot:

- Value type: =fixnum=
- Initial value: =2=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Maximum number of retries until the packet is
    considered lost and the upper layer notified.


# link target 2: <<max-lost-beacons>>
# link target: <<slot max-lost-beacons>>


****** Slot: =max-lost-beacons=                                                  :slot:

- Value type: =fixnum=
- Initial value: =4=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Maximum number of beacons lost until the node
    considers itself disassociated from the PAN coordinator.


# link target 2: <<min-cap-length>>
# link target: <<slot min-cap-length>>


****** Slot: =min-cap-length=                                                    :slot:

- Value type: =fixnum=
- Initial value: =440=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

The minimum length of CAP period when GTS is used,
    defined in symbols.


# link target 2: <<request-gts>>
# link target: <<slot request-gts>>


****** Slot: =request-gts=                                                       :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Allows a node to request a specified number of GTS
    slots from the coordinator. If the request is successful, DATA
    packets will be transmitted in the GTS slots assigned by the
    coordinator These slots are assigned dynamically according to
    availability. If no slots are available, the request will
    fail. Note that this is an easy way for a node to statically
    request a certain number of slots. A more dynamic solution would
    be for the application module to instruct the MAC module how many
    slots should it request. The current (parameter-based) solution is
    a shortcut when we have constant application traffic and we can
    figure out a priory an optimal way to share the slots among the
    nodes.


# link target 2: <<guard-time>>
# link target: <<slot guard-time>>


****** Slot: =guard-time=                                                        :slot:

- Value type: =time-type=
- Initial value: =0.001=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Reception guard time to sue in physical
    layer. Essential when dealing with time synchronisation.


# link target 2: <<next-packet-try>>
# link target: <<slot next-packet-try>>


****** Slot: =next-packet-try=                                                   :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<next-packet-time>>
# link target: <<slot next-packet-time>>


****** Slot: =next-packet-time=                                                  :slot:

- Value type: =time-type=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<locked-gts>>
# link target: <<slot locked-gts>>


****** Slot: =locked-gts=                                                        :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<associated-pan>>
# link target: <<slot associated-pan>>


****** Slot: =associated-pan=                                                    :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

ID of current PAN (-1 if not associated)


# link target 2: <<state>>
# link target: <<slot state>>


****** Internal Slot: =state=                                                    :slot:

- Value type: =mac802.15.4-state=
- Initial value: ='LENS.WSN.MAC.802.15.4::SETUP=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<state>>
# link target: <<slot-accessor state>>


******** Internal Slot Accessor: =state=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(state instance)
#+END_SRC

********* Arguments


- instance :: an object with state handling.

********* Description


Return current state identifier of /instance/

********* Methods

- (=state= (mac802.15.4 [[class mac802.15.4][=lens.wsn:mac802.15.4=]]))
- (=state= (tmac [[class tmac][=lens.wsn:tmac=]]))
- (=state= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))
- (=state= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<next-state>>
# link target: <<slot next-state>>


****** Slot: =next-state=                                                        :slot:

- Value type: =mac802.15.4-state=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

will be switched after csma-ca algorithm


# link target 2: <<cap-length>>
# link target: <<slot cap-length>>


****** Slot: =cap-length=                                                        :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

duration of CAP interval (in number of superframe slots)


# link target 2: <<mac-bsn>>
# link target: <<slot mac-bsn>>


****** Slot: =mac-bsn=                                                           :slot:

- Value type: =integer=
- Initial value: =(RANDOM 255)=
- Initargs: none
- Allocation: instance


******* Description

beacon sequence number (unused)


# link target 2: <<next-packet-retries>>
# link target: <<slot next-packet-retries>>


****** Slot: =next-packet-retries=                                               :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Description

number of retries left for next packet to be sent


# link target 2: <<lost-beacons>>
# link target: <<slot lost-beacons>>


****** Slot: =lost-beacons=                                                      :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Description

number of consequitive lost beacon packets


# link target 2: <<frame-interval>>
# link target: <<slot frame-interval>>


****** Slot: =frame-interval=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

duration of active part of the frame (in symbols)


# link target 2: <<beacon-interval>>
# link target: <<slot beacon-interval>>


****** Slot: =beacon-interval=                                                   :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

duration of the whole frame (in symbols)


# link target 2: <<csma-number-backoffs>>
# link target: <<slot csma-number-backoffs>>


****** Slot: =csma-number-backoffs=                                              :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<csma-contention-window-length>>
# link target: <<slot csma-contention-window-length>>


****** Slot: =csma-contention-window-length=                                     :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<csma-backoff-exponent>>
# link target: <<slot csma-backoff-exponent>>


****** Slot: =csma-backoff-exponent=                                             :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<cap-end>>
# link target: <<slot cap-end>>


****** Slot: =cap-end=                                                           :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Absolute time of end of CAP period for current frame


# link target 2: <<current-frame-start>>
# link target: <<slot current-frame-start>>


****** Slot: =current-frame-start=                                               :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Absolute recorded start time of the current frame


# link target 2: <<gts-start>>
# link target: <<slot gts-start>>


****** Slot: =gts-start=                                                         :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


# link target 2: <<gts-end>>
# link target: <<slot gts-end>>


****** Slot: =gts-end=                                                           :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


# link target 2: <<gts-length>>
# link target: <<slot gts-length>>


****** Slot: =gts-length=                                                        :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


# link target 2: <<gts-list>>
# link target: <<slot gts-list>>


****** Slot: =gts-list=                                                          :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<next-packet-response>>
# link target: <<slot next-packet-response>>


****** Slot: =next-packet-response=                                              :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Duration of timeout for receiving a reply after sending a packet


# link target 2: <<next-packet-state>>
# link target: <<slot next-packet-state>>


****** Slot: =next-packet-state=                                                 :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<associated-devices>>
# link target: <<slot associated-devices>>


****** Slot: =associated-devices=                                                :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

List of associated devices for PAN coordinator


# link target 2: <<beacon-packet>>
# link target: <<slot beacon-packet>>


****** Slot: =beacon-packet=                                                     :slot:

- Value type: =mac802.15.4-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<associate-request-packet>>
# link target: <<slot associate-request-packet>>


****** Slot: =associate-request-packet=                                          :slot:

- Value type: =mac802.15.4-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<next-packet>>
# link target: <<slot next-packet>>


****** Slot: =next-packet=                                                       :slot:

- Value type: =mac802.15.4-data-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target: <<slot gts-spec>>


****** Slot: =gts-spec=                                                          :slot:

- Value type: =vector=
- Initial value: =(MAKE-ARRAY 0 :ADJUSTABLE T)=
- Initargs: none
- Allocation: instance


******* Description

list of GTS specifications (for PAN coordinator)


# link target 2: <<attempt-tx>>
# link target: <<slot attempt-tx>>


****** Slot: =attempt-tx=                                                        :slot:

- Value type: =t=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target: <<slot radio>>


****** Slot: =radio=                                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<address>>
# link target: <<slot address>>


****** Internal Slot: =address=                                                  :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

MAC address - will default to nodeid.


# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Internal Slot: =buffer=                                                   :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<mobility>>
# link target: <<class mobility>>


**** Class: =mobility=                                                        :class:


***** Inheritance

- Parent classes:
    [[class wsn-module][wsn-module]]
- Precedence list:
    [[class mobility][mobility]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class no-mobility][no-mobility]], [[class line-mobility][line-mobility]]


***** Parameters

- location :: a =coord=.  Initial location [[coord]] for node.
- orientation :: a =lens.wsn::orientation=. Default: =(MAKE-ORIENTATION)=. Initial [[orientation]] for [[node]]
***** Description


Superclass for [[mobility]] submodules of a [[node]] handling node
mobility. Base class of this initialises the location from the
[[deployment]] pand [[field]] arameters of the network to initialise
all node positions for static nodes. Deployment takes the current
forms.

***** Network Parameters


- field :: a /list/ of the /x/, /y/ and optionally /z/ sizes of the network in m
- deployment :: a symbol /deployment-type/ for the whole network
       or a [[range-list]] mapping node ids to the /deployment-type/
       to nodes.

***** Deployment Types


Specify how nodes are located over the network [[field]].

- uniform :: random uniform deployment over entire field.
- center :: located in the center of the field
- (grid dx dy dz) :: nodes are located on a grid with cell dimensions (dz dy dz)
- (randomized dx dy dz) :: nodes are randomly located withing
   the cells of dimensions (dx dy dz)

***** Direct Slots

# link target 2: <<location>>
# link target: <<slot location>>


****** Slot: =location=                                                          :slot:

- Value type: =coord=
- Initial value: =NIL=
- Initargs: location
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Initial location [[coord]] for node.


******* Accessors

# link target 2: <<location>>
# link target: <<slot-accessor location>>


******** Slot Accessor: =location=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(location object)
#+END_SRC


********* Methods

- (=location= (node [[class node][=lens.wsn:node=]]))
- (=location= (mobility [[class mobility][=lens.wsn:mobility=]]))





# link target: <<slot orientation>>


****** Slot: =orientation=                                                       :slot:

- Value type: =orientation=
- Initial value: =(LENS.WSN::MAKE-ORIENTATION)=
- Initargs: orientation
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Initial [[orientation]] for [[node]]


******* Accessors

# link target: <<slot-accessor orientation>>


******** Slot Accessor: =orientation=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(orientation object)
#+END_SRC


********* Methods

- (=orientation= (mobility [[class mobility][=lens.wsn:mobility=]]))





# link target 2: <<static-p>>
# link target: <<slot static-p>>


****** Slot: =static-p=                                                          :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: static-p
- Allocation: instance


******* Description

If true (default) this the node is
             static. Subclasses should specialise this
             appropriately.


******* Accessors

# link target 2: <<static-p>>
# link target: <<slot-accessor static-p>>


******** Slot Accessor: =static-p=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(static-p object)
#+END_SRC


********* Methods

- (=static-p= (mobility [[class mobility][=lens.wsn:mobility=]]))







***** Indirect Slots

# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<multipath-rings-routing>>
# link target: <<class multipath-rings-routing>>


**** Class: =multipath-rings-routing=                                         :class:


***** Inheritance

- Parent classes:
    [[class routing][routing]]
- Precedence list:
    [[class multipath-rings-routing][multipath-rings-routing]], [[class
    routing][routing]], [[class comms-module][comms-module]], [[class wsn
    module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- setup-overhead :: a =integer=. Default: =13=. The size of a specific control message to setup the rings
- setup-frame-size :: a =fixnum=. Default: =13=. NIL
- setup-timeout :: a =time-type=. Default: =0.05d0=. Specifies a timeout when the setting up of the
    network tree (or level information) is taking place. If a
    particular node does not receive timely information it might
    declare it self "not connected" and reports this to the
    application with a message.

***** Description

Multipath Rings Routing nodes do not have a
  specific parent. A node just gets a level number (or ring number)
  during setup. The first setup packet sent from the sink has level
  0. Any node that receives it adds 1 to the level and retransmits
  it. The process continues with every node adding 1 to the level of
  the received packet. Eventually all connected nodes will have a
  level number (there is also a possibility for unconnected
  nodes). When a node wants to send a packet to the sink it does not
  send it to a particular node but rather broadcasts it, attaching its
  level number. Any node with a smaller level number will rebroadcast
  it. The process continues until the sink is reached. You can see
  with this algorithm many paths to the sink can be taken. The
  algorithm can be more robust compared to single route algorithms but
  if the traffic is passes a certain low threshold, congestion can
  kill performance.


***** Direct Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =14=
- Initargs: none
- Allocation: instance


# link target 2: <<setup-overhead>>
# link target: <<slot setup-overhead>>


****** Slot: =setup-overhead=                                                    :slot:

- Value type: =integer=
- Initial value: =13=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

The size of a specific control message to setup the rings


******* Accessors

# link target 2: <<setup-overhead>>
# link target: <<slot-accessor setup-overhead>>


******** Slot Accessor: =setup-overhead=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(setup-overhead object)
#+END_SRC


********* Methods

- (=setup-overhead= (multipath-rings-routing                    [[class
  multipath-rings-routing][=lens.wsn:multipath-rings-routing=]]))





# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** External Slot: =buffer-size=                                              :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance


# link target 2: <<max-net-frame-size>>
# link target: <<slot max-net-frame-size>>


****** Slot: =max-net-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<setup-frame-size>>
# link target: <<slot setup-frame-size>>


****** Slot: =setup-frame-size=                                                  :slot:

- Value type: =fixnum=
- Initial value: =13=
- Initargs: setup-frame-size
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

# link target 2: <<setup-frame-size>>
# link target: <<slot-accessor setup-frame-size>>


******** Slot Accessor: =setup-frame-size=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(setup-frame-size object)
#+END_SRC


********* Methods

- (=setup-frame-size= (multipath-rings-routing                      [[class
  multipath-rings-routing][=lens.wsn:multipath-rings-routing=]]))





# link target 2: <<setup-timeout>>
# link target: <<slot setup-timeout>>


****** Slot: =setup-timeout=                                                     :slot:

- Value type: =time-type=
- Initial value: =0.05d0=
- Initargs: setup-timeout
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Specifies a timeout when the setting up of the
    network tree (or level information) is taking place. If a
    particular node does not receive timely information it might
    declare it self "not connected" and reports this to the
    application with a message.


******* Accessors

# link target 2: <<setup-timeout>>
# link target: <<slot-accessor setup-timeout>>


******** Slot Accessor: =setup-timeout=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(setup-timeout object)
#+END_SRC


********* Methods

- (=setup-timeout= (multipath-rings-routing                   [[class multipath
  rings-routing][=lens.wsn:multipath-rings-routing=]]))





# link target 2: <<current-sink>>
# link target: <<slot current-sink>>


****** Slot: =current-sink=                                                      :slot:

- Value type: =mprings-sink=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<current-sink>>
# link target: <<slot-accessor current-sink>>


******** Slot Accessor: =current-sink=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(current-sink object)
#+END_SRC


********* Methods

- (=current-sink= (multipath-rings-routing                  [[class multipath
  rings-routing][=lens.wsn:multipath-rings-routing=]]))





# link target 2: <<connected-p>>
# link target: <<slot connected-p>>


****** External Slot: =connected-p=                                              :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<connected-p>>
# link target: <<slot-accessor connected-p>>


******** External Slot Accessor: =connected-p=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(connected-p instance)
#+END_SRC


********* Methods

- (=connected-p= (multipath-rings-routing                 [[class multipath
  rings-routing][=lens.wsn:multipath-rings-routing=]]))
- (=connected-p= (gate [[class gate][=gate=]]))





# link target 2: <<tmp-sink>>
# link target: <<slot tmp-sink>>


****** Slot: =tmp-sink=                                                          :slot:

- Value type: =mprings-sink=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Used during setup




***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Internal Slot: =buffer=                                                   :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<net-mac-control-info>>
# link target: <<class net-mac-control-info>>


**** Class: =net-mac-control-info=                                            :class:


***** Inheritance

- Parent classes:
    [[class standard-object][standard-object]]
- Precedence list:
    [[class net-mac-control-info][net-mac-control-info]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Information between routing and MAC
  which is external to but related to the packet i.e. not carried by a real
  packet (e.g., what is the next hop, or what was the RSSI for the
  packet received).


***** Direct Slots

# link target 2: <<rssi>>
# link target: <<slot rssi>>


****** Slot: =rssi=                                                              :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: rssi
- Allocation: instance


******* Description

the RSSI of the received packet


******* Accessors

# link target 2: <<rssi>>
# link target: <<slot-accessor rssi>>


******** Slot Accessor: =rssi=                                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(rssi object)
#+END_SRC


********* Methods

- (=rssi= (mac-radio-control-info          [[class mac-radio-control
  info][=lens.wsn:mac-radio-control-info=]]))
- (=rssi= (net-mac-control-info          [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))
- (=rssi= (app-net-control-info          [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<lqi>>
# link target: <<slot lqi>>


****** Slot: =lqi=                                                               :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: lqi
- Allocation: instance


******* Description

the LQI of the received packet


******* Accessors

# link target 2: <<lqi>>
# link target: <<slot-accessor lqi>>


******** Slot Accessor: =lqi=                                             :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(lqi object)
#+END_SRC


********* Methods

- (=lqi= (mac-radio-control-info         [[class mac-radio-control
  info][=lens.wsn:mac-radio-control-info=]]))
- (=lqi= (net-mac-control-info         [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))
- (=lqi= (app-net-control-info         [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<next-hop>>
# link target: <<slot next-hop>>


****** Slot: =next-hop=                                                          :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: next-hop
- Allocation: instance


******* Accessors

# link target 2: <<next-hop>>
# link target: <<slot-accessor next-hop>>


******** Slot Accessor: =next-hop=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(next-hop object)
#+END_SRC


********* Methods

- (=next-hop= (net-mac-control-info              [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))





# link target 2: <<last-hop>>
# link target: <<slot last-hop>>


****** Slot: =last-hop=                                                          :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: last-hop
- Allocation: instance


******* Accessors

# link target 2: <<last-hop>>
# link target: <<slot-accessor last-hop>>


******** Slot Accessor: =last-hop=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(last-hop object)
#+END_SRC


********* Methods

- (=last-hop= (net-mac-control-info              [[class net-mac-control
  info][=lens.wsn:net-mac-control-info=]]))








# link target: <<class network>>


**** External Class: =network=                                                :class:


***** Inheritance

- Parent classes:
    [[class compound-module][compound-module]]
- Precedence list:
    [[class network][network]], [[class compound-module][compound-module]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class wsn][wsn]]


***** Parameters

None.

***** Description

Base class for networks. This is the required type
  for the top-level [[compound-module]] of a simulation network and it
  is required that it has no gate specification. It is specified in
  the =network= simulation parameter.


***** Direct Slots

# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<channels>>
# link target: <<slot channels>>


****** Internal Slot: =channels=                                                 :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<submodules>>
# link target: <<slot submodules>>


****** Internal Slot: =submodules=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target: <<class network>>


**** External Class: =network=                                                :class:


***** Inheritance

- Parent classes:
    [[class compound-module][compound-module]]
- Precedence list:
    [[class network][network]], [[class compound-module][compound-module]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class wsn][wsn]]


***** Parameters

None.

***** Description

Base class for networks. This is the required type
  for the top-level [[compound-module]] of a simulation network and it
  is required that it has no gate specification. It is specified in
  the =network= simulation parameter.


***** Direct Slots

# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<channels>>
# link target: <<slot channels>>


****** Internal Slot: =channels=                                                 :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<submodules>>
# link target: <<slot submodules>>


****** Internal Slot: =submodules=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<network-control-command>>
# link target: <<class network-control-command>>


**** Class: =network-control-command=                                         :class:


***** Inheritance

- Parent classes:
    [[class communications-control-command][communications-control-command]]
- Precedence list:
    [[class network-control-command][network-control-command]], [[class
    communications-control-command][communications-control-command]], [[class
    message][message]], [[class event][event]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<argument>>
# link target: <<slot argument>>


****** Slot: =argument=                                                          :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: argument
- Allocation: instance


******* Description

Additional arguments with command


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** External Slot: =timestamp=                                                :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Internal Slot: =to=                                                       :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Internal Slot: =from=                                                     :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** External Slot: =creation-time=                                            :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** External Slot: =root-event=                                               :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Internal Slot: =schedule-id=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** External Slot: =arrival-time=                                             :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** External Slot: =sent-time=                                                :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Internal Slot: =rank=                                                     :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name, command
- Allocation: instance


******* Description

Command is held as message name





# link target 2: <<network-control-message>>
# link target: <<class network-control-message>>


**** Class: =network-control-message=                                         :class:


***** Inheritance

- Parent classes:
    [[class communications-control-message][communications-control-message]]
- Precedence list:
    [[class network-control-message][network-control-message]], [[class
    communications-control-message][communications-control-message]], [[class
    message][message]], [[class event][event]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class multipath-rings-routing-control-message][multipath-rings-routing
    control-message]]


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<argument>>
# link target: <<slot argument>>


****** Slot: =argument=                                                          :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: argument
- Allocation: instance


******* Description

Additional arguments with command


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** External Slot: =timestamp=                                                :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Internal Slot: =to=                                                       :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Internal Slot: =from=                                                     :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** External Slot: =creation-time=                                            :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** External Slot: =root-event=                                               :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Internal Slot: =schedule-id=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** External Slot: =arrival-time=                                             :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** External Slot: =sent-time=                                                :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Internal Slot: =rank=                                                     :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name, command
- Allocation: instance


******* Description

Control message command name





# link target 2: <<no-mobility>>
# link target: <<class no-mobility>>


**** Class: =no-mobility=                                                     :class:


***** Inheritance

- Parent classes:
    [[class mobility][mobility]]
- Precedence list:
    [[class no-mobility][no-mobility]], [[class mobility][mobility]], [[class wsn
    module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

None.

***** Description

Alias for [[mobility] ] module for no movement for consistency in naming


***** Direct Slots



***** Indirect Slots

# link target 2: <<static-p>>
# link target: <<slot static-p>>


****** Slot: =static-p=                                                          :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: static-p
- Allocation: instance


******* Description

If true (default) this the node is
             static. Subclasses should specialise this
             appropriately.


# link target: <<slot orientation>>


****** Slot: =orientation=                                                       :slot:

- Value type: =orientation=
- Initial value: =(LENS.WSN::MAKE-ORIENTATION)=
- Initargs: orientation
- Allocation: instance


******* Description

Initial [[orientation]] for [[node]]


# link target 2: <<location>>
# link target: <<slot location>>


****** Slot: =location=                                                          :slot:

- Value type: =coord=
- Initial value: =NIL=
- Initargs: location
- Allocation: instance


******* Description

Initial location [[coord]] for node.


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target: <<class node>>


**** Class: =node=                                                            :class:


***** Inheritance

- Parent classes:
    [[class compound-module][compound-module]]
- Precedence list:
    [[class node][node]], [[class compound-module][compound-module]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- network-address :: a =t=.  The network address for this node. Defaults to [[nodeid]]
- startup-offset :: a =time-type=. Default: =0.0d0=. Node offset startup delay in seconds
- startup-randomization :: a =time-type=. Default: =0.05d0=. Node startup delay randomisation, in seconds

***** Description

Base class representing sensing motes on a wireless
  sensor motes. Brings together an array of [[sensor]]s which received
  measurements from the [[physical-process]]s being sensed, a sensing
  [[application]] on the mote, the [[communications]] module receibing
  messages from the global [[wireless-channell]] and implementing the
  communications protocols, [[mobility]] handling mote movement, and a
  [[resources]] module handling energy usages.


***** Direct Slots

# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Nodes are owned by the [[wsn]] network


******* Accessors

# link target: <<slot-accessor network>>


******** External Slot Accessor: =network=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(network object)
#+END_SRC


********* Methods

- (=network= (node [[class node][=lens.wsn:node=]]))
- (=network= (instance [[class t][=t=]]))
- (=network= (simulation [[class simulation][=simulation=]]))





# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Nodeid is an integer - the
   index of the node in the network array of nodes.


******* Accessors

# link target 2: <<nodeid>>
# link target: <<slot-accessor nodeid>>


******** Slot Accessor: =nodeid=                                          :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(nodeid object)
#+END_SRC


********* Methods

- (=nodeid= (node [[class node][=lens.wsn:node=]]))





# link target 2: <<network-address>>
# link target: <<slot network-address>>


****** Slot: =network-address=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

The network address for this node. Defaults to [[nodeid]]


******* Accessors

# link target 2: <<network-address>>
# link target: <<slot-accessor network-address>>


******** Slot Accessor: =network-address=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(network-address object)
#+END_SRC


********* Methods

- (=network-address= (instance [[class routing][=lens.wsn:routing=]]))
- (=network-address= (node [[class node][=lens.wsn:node=]]))





# link target 2: <<startup-offset>>
# link target: <<slot startup-offset>>


****** Slot: =startup-offset=                                                    :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Node offset startup delay in seconds


******* Accessors

# link target 2: <<startup-offset>>
# link target: <<slot-accessor startup-offset>>


******** Slot Accessor: =startup-offset=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(startup-offset object)
#+END_SRC


********* Methods

- (=startup-offset= (node [[class node][=lens.wsn:node=]]))





# link target 2: <<startup-randomization>>
# link target: <<slot startup-randomization>>


****** Slot: =startup-randomization=                                             :slot:

- Value type: =time-type=
- Initial value: =0.05d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Node startup delay randomisation, in seconds


******* Accessors

# link target 2: <<startup-randomization>>
# link target: <<slot-accessor startup-randomization>>


******** Slot Accessor: =startup-randomization=                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(startup-randomization object)
#+END_SRC


********* Methods

- (=startup-randomization= (node [[class node][=lens.wsn:node=]]))







***** Indirect Slots

# link target 2: <<channels>>
# link target: <<slot channels>>


****** Internal Slot: =channels=                                                 :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<submodules>>
# link target: <<slot submodules>>


****** Internal Slot: =submodules=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target: <<class physical-process>>


**** Class: =physical-process=                                                :class:


***** Inheritance

- Parent classes:
    [[class module][module]]
- Precedence list:
    [[class physical-process][physical-process]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class direct-node-physical-process][direct-node-physical-process]], [[class
    scenario-physical-process][scenario-physical-process]]


***** Parameters

- description :: a =string=.  Text description of a physical process
- function :: a =(eval :type function)=. Default: =#'(LAMBDA (M C TM)
                                                       (DECLARE
                                                        (IGNORE M C TM))
                                                       (UNIFORM 0.0 1.0))=. A function measurand, location and time returning
    measured value. Default is uniform ransom number betwee 0 and 1.

***** Description

Base class for modules representing physical
  processes to be measured by a wireless snesor network. Subclasses
  should specialise [[measure]]. 


***** Direct Slots

# link target 2: <<description>>
# link target: <<slot description>>


****** Slot: =description=                                                       :slot:

- Value type: =string=
- Initial value: =NIL=
- Initargs: description
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Text description of a physical process


******* Accessors

# link target 2: <<description>>
# link target: <<slot-accessor description>>


******** Slot Accessor: =description=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(description object)
#+END_SRC


********* Methods

- (=description= (physical-process                 [[class physical
  process][=lens.wsn:physical-process=]]))





# link target: <<slot function>>


****** Inherited Slot: =function=                                                :slot:

- Value type: =function=
- Initial value: =#'(LAMBDA (LENS.WSN::M LENS.WSN::C LENS.WSN::TM)             
         (DECLARE (IGNORE LENS.WSN::M LENS.WSN::C LENS.WSN::TM))               
       (UNIFORM 0.0 1.0))=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (format (eval type function))


******* Description

A function measurand, location and time returning
    measured value. Default is uniform ransom number betwee 0 and 1.


******* Accessors

# link target 2: <<physical-process-function>>
# link target: <<slot-accessor physical-process-function>>


******** Slot Accessor: =physical-process-function=                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(physical-process-function object)
#+END_SRC


********* Methods

- (=physical-process-function= (physical-process                              
  [[class physical-process][=lens.wsn:physical-process=]]))







***** Indirect Slots

# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target: <<class radio>>


**** Class: =radio=                                                           :class:


***** Inheritance

- Parent classes:
    [[class comms-module][comms-module]]
- Precedence list:
    [[class radio][radio]], [[class comms-module][comms-module]], [[class wsn
    module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- address :: a =integer=.  MAC address - will default to node index.
- parameters-file :: a =pathname=.  the file that contains most radio parameters
- initial-mode :: a =symbol=.  we can choose an rx-mode to begin with. Modes are
         defined in the RadioParametersFile. nil means use
         the first mode defined)
- state :: a =symbol=. Default: ='RX=. we can choose a radio state to begin
          with. RX and TX are always there. according to the radio
          defined we can choose from a different set of sleep states
- initial-tx-output-power :: a =float=.  we can choose a Txpower to begin with. Possible tx
    power values are defined in the RadioParametersFile. nil
    means use the first tx power defined (which is also the highest)
- initial-sleep-level :: a =symbol=.  we can choose a sleep level which will be used
    when a transition to SLEEP state is requested. nil means
    use first level defined (will usually be the fastest and most
    energy consuming sleep state)
- carrier-frequency :: a =float=. Default: =2.4e9=. the carrier frequency (in Hz) to begin with.
- collision-model :: a =symbol=. Default: ='ADDITIVE-INTERFERENCE-MODEL=. none, simple, additive or advance interference
- cca-threshold :: a =float=. Default: =-95=. the threshold of the RSSI register (in dBm) were
    above it channel is NOT clear
- symbols-for-rssi :: a =integer=. Default: =8=. NIL
- carrier-sense-interrupt-enabled :: a =boolean=.  NIL
- max-phy-frame-size :: a =fixnum=. Default: =1024=. in bytes
- avg-busy-frame :: a =time-type=. Default: =1.0d0=. integration time for measuring avg busy time
- processing-delay :: a =time-type=. Default: =1.d-5=. delay to pass packets/messages/interrupts to upper layer

***** Description

Radio implementation for WSN networks. The radio
  characteristics are read from a configuration file specified in the
  [[parameters-file]] parameter. This implements radio interference
  models by using [[wireless-signal-start]] and
  [[wireless-signal-end]] messages from wireless channel to determine
  if received signal can be passsed up to mac layer. MAC layer packets
  received for transmission are buffered. [[radio-command-message]]
  messages received from MAC can be used to switch between radio
  states etc.


***** Direct Slots

# link target 2: <<address>>
# link target: <<slot address>>


****** Internal Slot: =address=                                                  :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

MAC address - will default to node index.


******* Accessors

# link target 2: <<mac-address>>
# link target: <<slot-accessor mac-address>>


******** Slot Accessor: =mac-address=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(mac-address object)
#+END_SRC


********* Methods

- (=mac-address= (radio [[class radio][=lens.wsn:radio=]]))
- (=mac-address= (node [[class node][=lens.wsn:node=]]))
- (=mac-address= (mac [[class mac][=lens.wsn:mac=]]))





# link target 2: <<parameters-file>>
# link target: <<slot parameters-file>>


****** Slot: =parameters-file=                                                   :slot:

- Value type: =pathname=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

the file that contains most radio parameters


******* Accessors

# link target 2: <<parameters-file>>
# link target: <<slot-accessor parameters-file>>


******** Slot Accessor: =parameters-file=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(parameters-file object)
#+END_SRC


********* Methods

- (=parameters-file= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<initial-mode>>
# link target: <<slot initial-mode>>


****** Slot: =initial-mode=                                                      :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

we can choose an rx-mode to begin with. Modes are
         defined in the RadioParametersFile. nil means use
         the first mode defined)


# link target 2: <<state>>
# link target: <<slot state>>


****** Internal Slot: =state=                                                    :slot:

- Value type: =symbol=
- Initial value: ='LENS.WSN:RX=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

we can choose a radio state to begin
          with. RX and TX are always there. according to the radio
          defined we can choose from a different set of sleep states


******* Accessors

# link target 2: <<state>>
# link target: <<slot-accessor state>>


******** Internal Slot Accessor: =state=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(state instance)
#+END_SRC

********* Arguments


- instance :: an object with state handling.

********* Description


Return current state identifier of /instance/

********* Methods

- (=state= (mac802.15.4 [[class mac802.15.4][=lens.wsn:mac802.15.4=]]))
- (=state= (tmac [[class tmac][=lens.wsn:tmac=]]))
- (=state= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))
- (=state= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<initial-tx-output-power>>
# link target: <<slot initial-tx-output-power>>


****** Slot: =initial-tx-output-power=                                           :slot:

- Value type: =float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

we can choose a Txpower to begin with. Possible tx
    power values are defined in the RadioParametersFile. nil
    means use the first tx power defined (which is also the highest)


# link target 2: <<initial-sleep-level>>
# link target: <<slot initial-sleep-level>>


****** Slot: =initial-sleep-level=                                               :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

we can choose a sleep level which will be used
    when a transition to SLEEP state is requested. nil means
    use first level defined (will usually be the fastest and most
    energy consuming sleep state)


# link target 2: <<carrier-frequency>>
# link target: <<slot carrier-frequency>>


****** Slot: =carrier-frequency=                                                 :slot:

- Value type: =float=
- Initial value: =2.4e9=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (units hz)


******* Description

the carrier frequency (in Hz) to begin with.


******* Accessors

# link target 2: <<carrier-frequency>>
# link target: <<slot-accessor carrier-frequency>>


******** Slot Accessor: =carrier-frequency=                               :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(carrier-frequency object)
#+END_SRC


********* Methods

- (=carrier-frequency= (radio [[class radio][=lens.wsn:radio=]]))
- (=carrier-frequency= (wireless-signal-start                       [[class
  wireless-signal-start][=lens.wsn::wireless-signal-start=]]))





# link target 2: <<encoding>>
# link target: <<slot encoding>>


****** Slot: =encoding=                                                          :slot:

- Value type: =t=
- Initial value: ='LENS.WSN::NRZ=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<encoding>>
# link target: <<slot-accessor encoding>>


******** Slot Accessor: =encoding=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(encoding object)
#+END_SRC


********* Methods

- (=encoding= (radio [[class radio][=lens.wsn:radio=]]))
- (=encoding= (wireless-signal-start              [[class wireless-signal
  start][=lens.wsn::wireless-signal-start=]]))





# link target 2: <<collision-model>>
# link target: <<slot collision-model>>


****** Slot: =collision-model=                                                   :slot:

- Value type: =symbol=
- Initial value: ='LENS.WSN:ADDITIVE-INTERFERENCE-MODEL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

none, simple, additive or advance interference


******* Accessors

# link target 2: <<collision-model>>
# link target: <<slot-accessor collision-model>>


******** Slot Accessor: =collision-model=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(collision-model object)
#+END_SRC


********* Methods

- (=collision-model= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<cca-threshold>>
# link target: <<slot cca-threshold>>


****** Slot: =cca-threshold=                                                     :slot:

- Value type: =float=
- Initial value: =-95=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

the threshold of the RSSI register (in dBm) were
    above it channel is NOT clear


******* Accessors

# link target 2: <<cca-threshold>>
# link target: <<slot-accessor cca-threshold>>


******** Slot Accessor: =cca-threshold=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cca-threshold object)
#+END_SRC


********* Methods

- (=cca-threshold= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<symbols-for-rssi>>
# link target: <<slot symbols-for-rssi>>


****** Slot: =symbols-for-rssi=                                                  :slot:

- Value type: =integer=
- Initial value: =8=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

# link target 2: <<symbols-for-rssi>>
# link target: <<slot-accessor symbols-for-rssi>>


******** Slot Accessor: =symbols-for-rssi=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(symbols-for-rssi object)
#+END_SRC


********* Methods

- (=symbols-for-rssi= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<carrier-sense-interrupt-enabled>>
# link target: <<slot carrier-sense-interrupt-enabled>>


****** Slot: =carrier-sense-interrupt-enabled=                                   :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

# link target 2: <<carrier-sense-interrupt-enabled>>
# link target: <<slot-accessor carrier-sense-interrupt-enabled>>


******** Slot Accessor: =carrier-sense-interrupt-enabled=                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(carrier-sense-interrupt-enabled object)
#+END_SRC


********* Methods

- (=carrier-sense-interrupt-enabled= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<max-phy-frame-size>>
# link target: <<slot max-phy-frame-size>>


****** Slot: =max-phy-frame-size=                                                :slot:

- Value type: =fixnum=
- Initial value: =1024=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (units b)


******* Description

in bytes


******* Accessors

# link target 2: <<max-phy-frame-size>>
# link target: <<slot-accessor max-phy-frame-size>>


******** Slot Accessor: =max-phy-frame-size=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(max-phy-frame-size object)
#+END_SRC


********* Methods

- (=max-phy-frame-size= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =6=
- Initargs: none
- Allocation: instance


******* Description

in bytes - 802.15.4=6bytes


# link target 2: <<avg-busy-frame>>
# link target: <<slot avg-busy-frame>>


****** Slot: =avg-busy-frame=                                                    :slot:

- Value type: =time-type=
- Initial value: =1.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (units s)


******* Description

integration time for measuring avg busy time


******* Accessors

# link target 2: <<avg-busy-frame>>
# link target: <<slot-accessor avg-busy-frame>>


******** Slot Accessor: =avg-busy-frame=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(avg-busy-frame object)
#+END_SRC


********* Methods

- (=avg-busy-frame= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<avg-busy>>
# link target: <<slot avg-busy>>


****** Slot: =avg-busy=                                                          :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<avg-busy>>
# link target: <<slot-accessor avg-busy>>


******** Slot Accessor: =avg-busy=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(avg-busy object)
#+END_SRC


********* Methods

- (=avg-busy= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** External Slot: =buffer-size=                                              :slot:

- Value type: =t=
- Initial value: =16=
- Initargs: none
- Allocation: instance


# link target: <<slot wireless-channel>>


****** Slot: =wireless-channel=                                                  :slot:

- Value type: =gate=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Gate to directly send wireless messages
               to. Messages from the wireless layer will be send
               direct to fromWireless input gate in radio module


******* Accessors

# link target: <<slot-accessor wireless-channel>>


******** Slot Accessor: =wireless-channel=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(wireless-channel object)
#+END_SRC


********* Methods

- (=wireless-channel= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<tx-levels>>
# link target: <<slot tx-levels>>


****** Slot: =tx-levels=                                                         :slot:

- Value type: =sequence=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<tx-levels>>
# link target: <<slot-accessor tx-levels>>


******** Slot Accessor: =tx-levels=                                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(tx-levels object)
#+END_SRC


********* Methods

- (=tx-levels= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<rx-modes>>
# link target: <<slot rx-modes>>


****** Slot: =rx-modes=                                                          :slot:

- Value type: =sequence=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<rx-modes>>
# link target: <<slot-accessor rx-modes>>


******** Slot Accessor: =rx-modes=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(rx-modes object)
#+END_SRC


********* Methods

- (=rx-modes= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<sleep-levels>>
# link target: <<slot sleep-levels>>


****** Slot: =sleep-levels=                                                      :slot:

- Value type: =sequence=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<sleep-levels>>
# link target: <<slot-accessor sleep-levels>>


******** Slot Accessor: =sleep-levels=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sleep-levels object)
#+END_SRC


********* Methods

- (=sleep-levels= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<transitions>>
# link target: <<slot transitions>>


****** Slot: =transitions=                                                       :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Power and delay for transitions between states stored in p-list of p-lists - access is (getf (getf args to) from)


******* Accessors

# link target 2: <<transitions>>
# link target: <<slot-accessor transitions>>


******** Slot Accessor: =transitions=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(transitions object)
#+END_SRC


********* Methods

- (=transitions= (radio [[class radio][=lens.wsn:radio=]]))





# link target: <<slot tx-level>>


****** Slot: =tx-level=                                                          :slot:

- Value type: =tx-level=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target: <<slot-accessor tx-level>>


******** Slot Accessor: =tx-level=                                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(tx-level object)
#+END_SRC


********* Methods

- (=tx-level= (radio [[class radio][=lens.wsn:radio=]]))





# link target: <<slot rx-mode>>


****** Slot: =rx-mode=                                                           :slot:

- Value type: =rx-mode=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target: <<slot-accessor rx-mode>>


******** Slot Accessor: =rx-mode=                                         :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(rx-mode object)
#+END_SRC


********* Methods

- (=rx-mode= (radio [[class radio][=lens.wsn:radio=]]))





# link target: <<slot sleep-level>>


****** Slot: =sleep-level=                                                       :slot:

- Value type: =sleep-level=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target: <<slot-accessor sleep-level>>


******** Slot Accessor: =sleep-level=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sleep-level object)
#+END_SRC


********* Methods

- (=sleep-level= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<last-transition-time>>
# link target: <<slot last-transition-time>>


****** Slot: =last-transition-time=                                              :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<last-transition-time>>
# link target: <<slot-accessor last-transition-time>>


******** Slot Accessor: =last-transition-time=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(last-transition-time object)
#+END_SRC


********* Methods

- (=last-transition-time= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<changing-to-state>>
# link target: <<slot changing-to-state>>


****** Slot: =changing-to-state=                                                 :slot:

- Value type: =radio-state=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

indicates that the Radio is in the middle of changing to
							a new state


******* Accessors

# link target 2: <<changing-to-state>>
# link target: <<slot-accessor changing-to-state>>


******** Slot Accessor: =changing-to-state=                               :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(changing-to-state object)
#+END_SRC


********* Methods

- (=changing-to-state= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<received-signals>>
# link target: <<slot received-signals>>


****** Slot: =received-signals=                                                  :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

 a list of signals curently being received


******* Accessors

# link target 2: <<received-signals>>
# link target: <<slot-accessor received-signals>>


******** Slot Accessor: =received-signals=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(received-signals object)
#+END_SRC


********* Methods

- (=received-signals= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<time-of-last-signal-change>>
# link target: <<slot time-of-last-signal-change>>


****** Slot: =time-of-last-signal-change=                                        :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

last time the above list changed


******* Accessors

# link target 2: <<time-of-last-signal-change>>
# link target: <<slot-accessor time-of-last-signal-change>>


******** Slot Accessor: =time-of-last-signal-change=                      :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(time-of-last-signal-change object)
#+END_SRC


********* Methods

- (=time-of-last-signal-change= (radio [[class radio][=lens.wsn:radio=]]))





# link target: <<slot total-power-received>>


****** Slot: =total-power-received=                                              :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

 a history of recent changes in total received power to help calculate RSSI


******* Accessors

# link target: <<slot-accessor total-power-received>>


******** Slot Accessor: =total-power-received=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(total-power-received object)
#+END_SRC


********* Methods

- (=total-power-received= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<rssi-integration-time>>
# link target: <<slot rssi-integration-time>>


****** Slot: =rssi-integration-time=                                             :slot:

- Value type: =time-type=
- Initial value: =1.0d0=
- Initargs: none
- Allocation: instance


******* Description

span of time the total received power is integrated to calculate RSSI


******* Accessors

# link target 2: <<rssi-integration-time>>
# link target: <<slot-accessor rssi-integration-time>>


******** Slot Accessor: =rssi-integration-time=                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(rssi-integration-time object)
#+END_SRC


********* Methods

- (=rssi-integration-time= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<cs-interrupt-message>>
# link target: <<slot cs-interrupt-message>>


****** Slot: =cs-interrupt-message=                                              :slot:

- Value type: =radio-control-message=
- Initial value: =(MAKE-INSTANCE 'LENS.WSN:RADIO-CONTROL-MESSAGE :COMMAND      
                           'LENS.WSN:CARRIER-SENSE-INTERRUPT)=
- Initargs: none
- Allocation: instance


******* Description

message that carries a future carrier sense interrupt


******* Accessors

# link target 2: <<cs-interrupt-message>>
# link target: <<slot-accessor cs-interrupt-message>>


******** Slot Accessor: =cs-interrupt-message=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cs-interrupt-message object)
#+END_SRC


********* Methods

- (=cs-interrupt-message= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<state-transition-message>>
# link target: <<slot state-transition-message>>


****** Slot: =state-transition-message=                                          :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'MESSAGE :NAME 'LENS.WSN::STATE-TRANSITION)=
- Initargs: none
- Allocation: instance


******* Description

Self message to complete state transmisition


******* Accessors

# link target 2: <<state-transition-message>>
# link target: <<slot-accessor state-transition-message>>


******** Slot Accessor: =state-transition-message=                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(state-transition-message object)
#+END_SRC


********* Methods

- (=state-transition-message= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<continue-tx-message>>
# link target: <<slot continue-tx-message>>


****** Slot: =continue-tx-message=                                               :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'MESSAGE :NAME 'LENS.WSN::RADIO-CONTINUE-TX)=
- Initargs: none
- Allocation: instance


******* Description

Self message to continue transmitting


******* Accessors

# link target 2: <<continue-tx-message>>
# link target: <<slot-accessor continue-tx-message>>


******** Slot Accessor: =continue-tx-message=                             :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(continue-tx-message object)
#+END_SRC


********* Methods

- (=continue-tx-message= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<state-after-tx>>
# link target: <<slot state-after-tx>>


****** Slot: =state-after-tx=                                                    :slot:

- Value type: =radio-state=
- Initial value: ='LENS.WSN:RX=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<state-after-tx>>
# link target: <<slot-accessor state-after-tx>>


******** Slot Accessor: =state-after-tx=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(state-after-tx object)
#+END_SRC


********* Methods

- (=state-after-tx= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<processing-delay>>
# link target: <<slot processing-delay>>


****** Slot: =processing-delay=                                                  :slot:

- Value type: =time-type=
- Initial value: =1.d-5=
- Initargs: processing-delay
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

delay to pass packets/messages/interrupts to upper layer


******* Accessors

# link target 2: <<processing-delay>>
# link target: <<slot-accessor processing-delay>>


******** Slot Accessor: =processing-delay=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(processing-delay object)
#+END_SRC


********* Methods

- (=processing-delay= (radio [[class radio][=lens.wsn:radio=]]))







***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Internal Slot: =buffer=                                                   :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<radio-control-command>>
# link target: <<class radio-control-command>>


**** Class: =radio-control-command=                                           :class:


***** Inheritance

- Parent classes:
    [[class communications-control-command][communications-control-command]]
- Precedence list:
    [[class radio-control-command][radio-control-command]], [[class communications
    control-command][communications-control-command]], [[class message][message]],
    [[class event][event]], [[class owned-object][owned-object]], [[class named
    object][named-object]], [[class lens-object][lens-object]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<argument>>
# link target: <<slot argument>>


****** Slot: =argument=                                                          :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: argument
- Allocation: instance


******* Description

Additional arguments with command


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** External Slot: =timestamp=                                                :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Internal Slot: =to=                                                       :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Internal Slot: =from=                                                     :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** External Slot: =creation-time=                                            :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** External Slot: =root-event=                                               :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Internal Slot: =schedule-id=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** External Slot: =arrival-time=                                             :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** External Slot: =sent-time=                                                :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Internal Slot: =rank=                                                     :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name, command
- Allocation: instance


******* Description

Command is held as message name





# link target 2: <<radio-control-message>>
# link target: <<class radio-control-message>>


**** Class: =radio-control-message=                                           :class:


***** Inheritance

- Parent classes:
    [[class communications-control-message][communications-control-message]]
- Precedence list:
    [[class radio-control-message][radio-control-message]], [[class communications
    control-message][communications-control-message]], [[class message][message]],
    [[class event][event]], [[class owned-object][owned-object]], [[class named
    object][named-object]], [[class lens-object][lens-object]], [[class standard
    object][standard-object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Description

Not documented.


***** Direct Slots



***** Indirect Slots

# link target 2: <<argument>>
# link target: <<slot argument>>


****** Slot: =argument=                                                          :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: argument
- Allocation: instance


******* Description

Additional arguments with command


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** External Slot: =timestamp=                                                :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Internal Slot: =to=                                                       :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Internal Slot: =from=                                                     :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** External Slot: =creation-time=                                            :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** External Slot: =root-event=                                               :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Internal Slot: =schedule-id=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** External Slot: =arrival-time=                                             :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** External Slot: =sent-time=                                                :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Internal Slot: =rank=                                                     :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name, command
- Allocation: instance


******* Description

Control message command name





# link target 2: <<resources>>
# link target: <<class resources>>


**** Class: =resources=                                                       :class:


***** Inheritance

- Parent classes:
    [[class wsn-module][wsn-module]]
- Precedence list:
    [[class resources][resources]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- ram-size :: a =integer=. Default: =0=. in kB
- flash-size :: a =integer=. Default: =0=. in kB
- flash-write-cost :: a =integer=. Default: =0=. in kB
- ram-read-cost :: a =integer=. Default: =0=. in kB
- cpu-power-levels :: a =list=.  plist mapping power level names to power
- cpu-power-level :: a =symbol=.  Current power level - initialised from parameter
- clock-drift-sigma :: a =time-type=. Default: =3.d-5=. Standard deviation in cpu clock drift
- remaining-energy :: a =double-float=. Default: =18720.0d0=. In joules - default is 2 AA batteries
- baseline-node-power :: a =real=. Default: =0.006=. Periodic power consumption
- update-interval :: a =time-type=. Default: =1.0d0=. Interval for periodic updates in energy

***** Description

Not documented.


***** Direct Slots

# link target 2: <<ram-size>>
# link target: <<slot ram-size>>


****** Slot: =ram-size=                                                          :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: ram-size
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

in kB


# link target 2: <<flash-size>>
# link target: <<slot flash-size>>


****** Slot: =flash-size=                                                        :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: flash-size
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

in kB


# link target 2: <<total-ram-data>>
# link target: <<slot total-ram-data>>


****** Slot: =total-ram-data=                                                    :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<total-ram-data>>
# link target: <<slot-accessor total-ram-data>>


******** Slot Accessor: =total-ram-data=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(total-ram-data object)
#+END_SRC


********* Methods

- (=total-ram-data= (resources [[class resources][=lens.wsn:resources=]]))





# link target 2: <<flash-write-cost>>
# link target: <<slot flash-write-cost>>


****** Slot: =flash-write-cost=                                                  :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: flash-write-cost
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

in kB


# link target 2: <<ram-read-cost>>
# link target: <<slot ram-read-cost>>


****** Slot: =ram-read-cost=                                                     :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: ram-read-cost
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

in kB


# link target 2: <<cpu-power-levels>>
# link target: <<slot cpu-power-levels>>


****** Slot: =cpu-power-levels=                                                  :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: cpu-power-levels
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

plist mapping power level names to power


# link target 2: <<cpu-power-level>>
# link target: <<slot cpu-power-level>>


****** Slot: =cpu-power-level=                                                   :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: cpu-power-level
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Current power level - initialised from parameter


# link target 2: <<clock-drift-sigma>>
# link target: <<slot clock-drift-sigma>>


****** Slot: =clock-drift-sigma=                                                 :slot:

- Value type: =time-type=
- Initial value: =3.d-5=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Standard deviation in cpu clock drift


# link target 2: <<remaining-energy>>
# link target: <<slot remaining-energy>>


****** Slot: =remaining-energy=                                                  :slot:

- Value type: =double-float=
- Initial value: =18720.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

In joules - default is 2 AA batteries


******* Accessors

# link target 2: <<remaining-energy>>
# link target: <<slot-accessor remaining-energy>>


******** Slot Accessor: =remaining-energy=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(remaining-energy object)
#+END_SRC


********* Methods

- (=remaining-energy= (resources [[class resources][=lens.wsn:resources=]]))





# link target 2: <<time-of-last-calculation>>
# link target: <<slot time-of-last-calculation>>


****** Slot: =time-of-last-calculation=                                          :slot:

- Value type: =time-type=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<baseline-node-power>>
# link target: <<slot baseline-node-power>>


****** Slot: =baseline-node-power=                                               :slot:

- Value type: =real=
- Initial value: =0.006=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Periodic power consumption


# link target 2: <<current-node-power>>
# link target: <<slot current-node-power>>


****** Slot: =current-node-power=                                                :slot:

- Value type: =float=
- Initial value: =0.0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<current-node-power>>
# link target: <<slot-accessor current-node-power>>


******** Slot Accessor: =current-node-power=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(current-node-power object)
#+END_SRC


********* Methods

- (=current-node-power= (resources [[class resources][=lens.wsn:resources=]]))





# link target 2: <<power-levels>>
# link target: <<slot power-levels>>


****** Slot: =power-levels=                                                      :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Last power drawn indexed by module


******* Accessors

# link target 2: <<power-levels>>
# link target: <<slot-accessor power-levels>>


******** Slot Accessor: =power-levels=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(power-levels object)
#+END_SRC


********* Methods

- (=power-levels= (resources [[class resources][=lens.wsn:resources=]]))





# link target 2: <<update-interval>>
# link target: <<slot update-interval>>


****** Slot: =update-interval=                                                   :slot:

- Value type: =time-type=
- Initial value: =1.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Interval for periodic updates in energy


******* Accessors

# link target 2: <<update-interval>>
# link target: <<slot-accessor update-interval>>


******** Slot Accessor: =update-interval=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(update-interval object)
#+END_SRC


********* Methods

- (=update-interval= (resources [[class resources][=lens.wsn:resources=]]))
- (=update-interval= (line-mobility                     [[class line
  mobility][=lens.wsn:line-mobility=]]))





# link target 2: <<periodic-update-message>>
# link target: <<slot periodic-update-message>>


****** Slot: =periodic-update-message=                                           :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'MESSAGE :NAME                               
  'LENS.WSN::RESOURCE-PERIODIC-UPDATE)=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<periodic-update-message>>
# link target: <<slot-accessor periodic-update-message>>


******** Slot Accessor: =periodic-update-message=                         :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(periodic-update-message object)
#+END_SRC


********* Methods

- (=periodic-update-message= (resources [[class
  resources][=lens.wsn:resources=]]))





# link target 2: <<clock-drift>>
# link target: <<slot clock-drift>>


****** Slot: =clock-drift=                                                       :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Actual clock drift for this module initialised from [[clock-drift-sigma]] parameter.


******* Accessors

# link target 2: <<clock-drift>>
# link target: <<slot-accessor clock-drift>>


******** Slot Accessor: =clock-drift=                                     :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(clock-drift object)
#+END_SRC


********* Methods

- (=clock-drift= (resources [[class resources][=lens.wsn:resources=]]))







***** Indirect Slots

# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<routing>>
# link target: <<class routing>>


**** Class: =routing=                                                         :class:


***** Inheritance

- Parent classes:
    [[class comms-module][comms-module]]
- Precedence list:
    [[class routing][routing]], [[class comms-module][comms-module]], [[class wsn
    module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class multipath-rings-routing][multipath-rings-routing]], [[class leach
    routing][leach-routing]], [[class bypass-routing][bypass-routing]]


***** Parameters

- max-net-frame-size :: a =integer=. Default: =0=. The maximum packet size the routing can handle in
    bytes (0 for no limit)

***** Description

Base class for all routing modules. Base implementation Provides checking of maximum frame size allowed


***** Direct Slots

# link target 2: <<max-net-frame-size>>
# link target: <<slot max-net-frame-size>>


****** Slot: =max-net-frame-size=                                                :slot:

- Value type: =integer=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (units b)


******* Description

The maximum packet size the routing can handle in
    bytes (0 for no limit)


******* Accessors

# link target 2: <<max-net-frame-size>>
# link target: <<slot-accessor max-net-frame-size>>


******** Slot Accessor: =max-net-frame-size=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(max-net-frame-size object)
#+END_SRC


********* Methods

- (=max-net-frame-size= (routing [[class routing][=lens.wsn:routing=]]))







***** Indirect Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =integer=
- Initial value: =10=
- Initargs: none
- Allocation: instance


******* Description

The overhead added to encapsulated packets in
    bytes


# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** External Slot: =buffer-size=                                              :slot:

- Value type: =integer=
- Initial value: =32=
- Initargs: buffer-size
- Allocation: instance


******* Description

Size of TX buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Internal Slot: =buffer=                                                   :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<routing-packet>>
# link target: <<class routing-packet>>


**** Class: =routing-packet=                                                  :class:


***** Inheritance

- Parent classes:
    [[class wsn-packet][wsn-packet]]
- Precedence list:
    [[class routing-packet][routing-packet]], [[class wsn-packet][wsn-packet]],
    [[class packet][packet]], [[class message][message]], [[class event][event]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class multipath-rings-routing-packet][multipath-rings-routing-packet]],
    [[class leach-routing-packet][leach-routing-packet]]


***** Description

A generic routing packet header. An app packet will
  be encapsulated in it. If definining your own routing protocol and
  need a more specialized packet you have to create one the extends
  this generic packet. [[to-mac]], [[enqueue]] and [[decapsulate]]
  specialisations provided. [[handle-message]] implementations which
  check destination address and forward to application and check frame
  size etc are provided. .


***** Direct Slots



***** Indirect Slots

# link target 2: <<sequence-number>>
# link target: <<slot sequence-number>>


****** Slot: =sequence-number=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: sequence-number, seqnum
- Allocation: instance


******* Description

a field to distinguish between packets


# link target 2: <<destination>>
# link target: <<slot destination>>


****** Internal Slot: =destination=                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: destination
- Allocation: instance


******* Description

the destination address of the packet to be sent


# link target 2: <<source>>
# link target: <<slot source>>


****** Internal Slot: =source=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: source
- Allocation: instance


******* Description

the  source address of the received packet


# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: byte-length, header-overhead
- Allocation: instance


******* Description

In bytes


# link target 2: <<bit-error-p>>
# link target: <<slot bit-error-p>>


****** External Slot: =bit-error-p=                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The result of error modelling after the packet is
sent through a channel that has a nonzero packet error rate (PER) or
bit error rate (BER). It is up to the receiver to examine this flag
after having received the packet, and to act upon it.


# link target 2: <<reception-start-p>>
# link target: <<slot reception-start-p>>


****** Internal Slot: =reception-start-p=                                        :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: deliver-on-reception-start
- Allocation: instance


******* Description

Identify whether this packet represents the start
or the end of the reception after the packet travelled through a
channel with a data rate. This flag is controlled by the
deliver-on-reception-start flag of the receiving gate.


# link target 2: <<control-info>>
# link target: <<slot control-info>>


****** External Slot: =control-info=                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: control-info
- Allocation: instance


******* Description

Additional data to be passed with packet between
    protocol layers.


# link target 2: <<duration>>
# link target: <<slot duration>>


****** External Slot: =duration=                                                 :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Duration of last transmission


# link target 2: <<encapsulated-packet>>
# link target: <<slot encapsulated-packet>>


****** Internal Slot: =encapsulated-packet=                                      :slot:

- Value type: =packet=
- Initial value: =NIL=
- Initargs: encapsulated-packet
- Allocation: instance


******* Description

Higher level encapsulated protocol packet.


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** External Slot: =timestamp=                                                :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Internal Slot: =to=                                                       :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Internal Slot: =from=                                                     :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** External Slot: =creation-time=                                            :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** External Slot: =root-event=                                               :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Internal Slot: =schedule-id=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** External Slot: =arrival-time=                                             :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** External Slot: =sent-time=                                                :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Internal Slot: =rank=                                                     :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<scenario-physical-process>>
# link target: <<class scenario-physical-process>>


**** Class: =scenario-physical-process=                                       :class:


***** Inheritance

- Parent classes:
    [[class physical-process][physical-process]]
- Precedence list:
    [[class scenario-physical-process][scenario-physical-process]], [[class
    physical-process][physical-process]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- k :: a =real=. Default: =0.25=. multiplicative parameter (k)
- a :: a =real=. Default: =1.0=. exponential attenuation exponent (a) for values vs distance*/k/
- sources :: a =read=. Default: =`((,(MAKE-COORD 10.0 10.0) (0.0 . 30.5)
                                    (5.0 . 45) (12.0 . 7.3)))=. List of lists showing how sources evolve
            over time. Each source is represented as a coordinate and
            a list of conses of times and values in order.

***** Description

A Physical process made up of a number of discrete
physical sources whose output evolves over time. The effect of
multiple sources in a certain point is additive. At a certain location
and time the physical process value is given by

\begin{equation}
V(p,t) = \sum_{i=\text{all sources}} \frac{V_i(t)}{(K d_i(p_i,t))^a}
\end{equation}

where $V(p,t)$ denotes the value of the physical process at point $p$
and time $t$, $V_i(t)$ denotes the value of the $i^{th}$ source at time
$t$, $K$ and $a$ are specified by module parameters [[k]] and [[a]]
that determine how the value from a source diffused.


***** Direct Slots

# link target 2: <<k>>
# link target: <<slot k>>


****** Internal Slot: =k=                                                        :slot:

- Value type: =real=
- Initial value: =0.25=
- Initargs: k
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

multiplicative parameter (k)


# link target 2: <<a>>
# link target: <<slot a>>


****** Internal Slot: =a=                                                        :slot:

- Value type: =real=
- Initial value: =1.0=
- Initargs: a
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

exponential attenuation exponent (a) for values vs distance*/k/


# link target 2: <<sources>>
# link target: <<slot sources>>


****** Slot: =sources=                                                           :slot:

- Value type: =list=
- Initial value: =`((,(MAKE-COORD 10.0 10.0) (0.0 . 30.5) (5.0 . 45)           
          (12.0 . 7.3)))=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (format read)


******* Description

List of lists showing how sources evolve
            over time. Each source is represented as a coordinate and
            a list of conses of times and values in order.


******* Accessors

# link target 2: <<sources>>
# link target: <<slot-accessor sources>>


******** Slot Accessor: =sources=                                         :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sources object)
#+END_SRC


********* Methods

- (=sources= (scenario-physical-process             [[class scenario-physical
  process][=lens.wsn:scenario-physical-process=]]))







***** Indirect Slots

# link target: <<slot function>>


****** Inherited Slot: =function=                                                :slot:

- Value type: =function=
- Initial value: =#'(LAMBDA (LENS.WSN::M LENS.WSN::C LENS.WSN::TM)             
         (DECLARE (IGNORE LENS.WSN::M LENS.WSN::C LENS.WSN::TM))               
       (UNIFORM 0.0 1.0))=
- Initargs: none
- Allocation: instance


******* Description

A function measurand, location and time returning
    measured value. Default is uniform ransom number betwee 0 and 1.


# link target 2: <<description>>
# link target: <<slot description>>


****** Slot: =description=                                                       :slot:

- Value type: =string=
- Initial value: =NIL=
- Initargs: description
- Allocation: instance


******* Description

Text description of a physical process


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<simple-aggregation>>
# link target: <<class simple-aggregation>>


**** Class: =simple-aggregation=                                              :class:


***** Inheritance

- Parent classes:
    [[class application][application]]
- Precedence list:
    [[class simple-aggregation][simple-aggregation]], [[class
    application][application]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- priority :: a =t=. Default: =1=. NIL
- sink-network-address :: a =fixnum=.  NIL
- sample-interval :: a =time-type=. Default: =1=. NIL

***** Description

Application providing an example of sensor reading
 aggregation with [[multipath-rings]] routing. The aggregated value is
 maximum of its sensor reading and received sensor reading from nodes
 further away (at higher level) in [[multipath-rings]] routing.


***** Direct Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =5=
- Initargs: none
- Allocation: instance


# link target 2: <<payload-overhead>>
# link target: <<slot payload-overhead>>


****** Slot: =payload-overhead=                                                  :slot:

- Value type: =t=
- Initial value: =100=
- Initargs: none
- Allocation: instance


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =t=
- Initial value: =1=
- Initargs: priority
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

# link target 2: <<priority>>
# link target: <<slot-accessor priority>>


******** Internal Slot Accessor: =priority=                               :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(priority object)
#+END_SRC


********* Methods

- (=priority= (throughput-test              [[class throughput
  test][=lens.wsn:throughput-test=]]))
- (=priority= (connectivity-map              [[class connectivity
  map][=lens.wsn:connectivity-map=]]))
- (=priority= (simple-aggregation              [[class simple
  aggregation][=lens.wsn:simple-aggregation=]]))
- (=priority= (application [[class application][=lens.wsn:application=]]))





# link target 2: <<sink-network-address>>
# link target: <<slot sink-network-address>>


****** Slot: =sink-network-address=                                              :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

# link target 2: <<sink-network-address>>
# link target: <<slot-accessor sink-network-address>>


******** Slot Accessor: =sink-network-address=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sink-network-address module)
#+END_SRC

********* Attributes


- module :: an [[application]] or other [[wsn-module]]

********* Description


Return the address of sink node for reporting applications. Default
is =sink= however some applications take this as a parameter.

********* Methods

- (=sink-network-address= (simple-aggregation                          [[class
  simple-aggregation][=lens.wsn:simple-aggregation=]]))
- (=sink-network-address= (value-reporting                          [[class
  value-reporting][=lens.wsn:value-reporting=]]))
- (=sink-network-address= (leach-routing                          [[class leach
  routing][=lens.wsn:leach-routing=]]))
- (=sink-network-address= (entity [[class
  application][=lens.wsn:application=]]))
- (=sink-network-address= (node [[class node][=lens.wsn:node=]]))
- (=sink-network-address= (instance [[class wsn-module][=lens.wsn:wsn
  module=]]))





# link target 2: <<sample-interval>>
# link target: <<slot sample-interval>>


****** Slot: =sample-interval=                                                   :slot:

- Value type: =time-type=
- Initial value: =1=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<request-sample>>
# link target: <<slot request-sample>>


****** Slot: =request-sample=                                                    :slot:

- Value type: =timer-message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance


# link target 2: <<send-aggregated-value>>
# link target: <<slot send-aggregated-value>>


****** Slot: =send-aggregated-value=                                             :slot:

- Value type: =timer-message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance


# link target 2: <<waiting-time-for-lower-level-data>>
# link target: <<slot waiting-time-for-lower-level-data>>


****** Slot: =waiting-time-for-lower-level-data=                                 :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


# link target 2: <<last-sensed-value>>
# link target: <<slot last-sensed-value>>


****** Slot: =last-sensed-value=                                                 :slot:

- Value type: =real=
- Initial value: =0.0=
- Initargs: none
- Allocation: instance


# link target 2: <<aggregated-value>>
# link target: <<slot aggregated-value>>


****** Slot: =aggregated-value=                                                  :slot:

- Value type: =real=
- Initial value: =0.0=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Sequence number of last packet sent


# link target 2: <<applicationid>>
# link target: <<slot applicationid>>


****** Slot: =applicationid=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: id
- Allocation: instance


******* Description

Used to filter packet delivery to specific applications.


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<throughput-test>>
# link target: <<class throughput-test>>


**** Class: =throughput-test=                                                 :class:


***** Inheritance

- Parent classes:
    [[class application][application]]
- Precedence list:
    [[class throughput-test][throughput-test]], [[class application][application]],
    [[class wsn-module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- priority :: a =t=. Default: =1=. NIL
- next-recipient :: a =read=. Default: =0=. Destination address for packets produced in this
    node. This parameter can be used to create an application-level
    static routing. This way we can have a multi-hop throughput
    test.
- packet-rate :: a =real=. Default: =0=. Packets per second
- startup-delay :: a =time-type=. Default: =0=. Delay in seconds before application starts
    producing packets

***** Description

This transmits packets of [[payload-overhead]] and
[[header-overhead]] size and at given [[packet-rate]] after specified
[[startup-delay]]. [[next-recipient]] may be used to set up static
routing


***** Direct Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =5=
- Initargs: none
- Allocation: instance


# link target 2: <<payload-overhead>>
# link target: <<slot payload-overhead>>


****** Slot: =payload-overhead=                                                  :slot:

- Value type: =t=
- Initial value: =100=
- Initargs: none
- Allocation: instance


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =t=
- Initial value: =1=
- Initargs: priority
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

# link target 2: <<priority>>
# link target: <<slot-accessor priority>>


******** Internal Slot Accessor: =priority=                               :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(priority object)
#+END_SRC


********* Methods

- (=priority= (throughput-test              [[class throughput
  test][=lens.wsn:throughput-test=]]))
- (=priority= (connectivity-map              [[class connectivity
  map][=lens.wsn:connectivity-map=]]))
- (=priority= (simple-aggregation              [[class simple
  aggregation][=lens.wsn:simple-aggregation=]]))
- (=priority= (application [[class application][=lens.wsn:application=]]))





# link target 2: <<next-recipient>>
# link target: <<slot next-recipient>>


****** Slot: =next-recipient=                                                    :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (format read)


******* Description

Destination address for packets produced in this
    node. This parameter can be used to create an application-level
    static routing. This way we can have a multi-hop throughput
    test.


******* Accessors

# link target 2: <<next-recipient>>
# link target: <<slot-accessor next-recipient>>


******** Slot Accessor: =next-recipient=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(next-recipient object)
#+END_SRC


********* Methods

- (=next-recipient= (throughput-test                    [[class throughput
  test][=lens.wsn:throughput-test=]]))





# link target 2: <<packet-rate>>
# link target: <<slot packet-rate>>


****** Slot: =packet-rate=                                                       :slot:

- Value type: =real=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Packets per second


******* Accessors

# link target 2: <<packets-rate>>
# link target: <<slot-accessor packets-rate>>


******** Slot Accessor: =packets-rate=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(packets-rate object)
#+END_SRC


********* Methods

- (=packets-rate= (throughput-test                  [[class throughput
  test][=lens.wsn:throughput-test=]]))





# link target 2: <<startup-delay>>
# link target: <<slot startup-delay>>


****** Slot: =startup-delay=                                                     :slot:

- Value type: =time-type=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (units s)


******* Description

Delay in seconds before application starts
    producing packets


******* Accessors

# link target 2: <<startup-delay>>
# link target: <<slot-accessor startup-delay>>


******** Slot Accessor: =startup-delay=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(startup-delay object)
#+END_SRC


********* Methods

- (=startup-delay= (throughput-test                   [[class throughput
  test][=lens.wsn:throughput-test=]]))





# link target 2: <<packet-spacing>>
# link target: <<slot packet-spacing>>


****** Slot: =packet-spacing=                                                    :slot:

- Value type: =real=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<packet-spacing>>
# link target: <<slot-accessor packet-spacing>>


******** Slot Accessor: =packet-spacing=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(packet-spacing object)
#+END_SRC


********* Methods

- (=packet-spacing= (throughput-test                    [[class throughput
  test][=lens.wsn:throughput-test=]]))
- (=packet-spacing= (connectivity-map                    [[class connectivity
  map][=lens.wsn:connectivity-map=]]))





# link target 2: <<send-packet>>
# link target: <<slot send-packet>>


****** Slot: =send-packet=                                                       :slot:

- Value type: =timer-message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Sequence number of last packet sent


# link target 2: <<applicationid>>
# link target: <<slot applicationid>>


****** Slot: =applicationid=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: id
- Allocation: instance


******* Description

Used to filter packet delivery to specific applications.


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<tmac>>
# link target: <<class tmac>>


**** Class: =tmac=                                                            :class:


***** Inheritance

- Parent classes:
    [[class mac][mac]]
- Precedence list:
    [[class tmac][tmac]], [[class mac][mac]], [[class comms-module][comms-module]],
    [[class wsn-module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- print-state-transitions :: a =boolean=.  Debugging parameter
- ack-packet-size :: a =integer=. Default: =11=. NIL
- sync-packet-size :: a =integer=. Default: =11=. NIL
- rts-packet-size :: a =integer=. Default: =13=. NIL
- cts-packet-size :: a =integer=. Default: =13=. NIL
- max-mac-frame-size :: a =t=. Default: =0=. NIL
- header-overhead :: a =t=. Default: =11=. NIL
- buffer-size :: a =t=. Default: =32=. NIL
- max-tx-retries :: a =integer=. Default: =2=. This number of transmission attempts of a single unicast packet
that TMAC will perform. A transmission is considered successful only
if acknowledgment packet is received from the destination
node. Sending an RTS packet is also considered as a transmission
attempt. Note that this parameter does not apply to broadcast
packets.
- allow-sink-sync :: a =boolean=. Default: =T=. If true allows sink node to start synchronisation
    immediately to avoid contention interval when creating a
    synchronisation schedule for the network, thus allowing for faster
    synchronisation, and consequently, better throughput (especially
    if packets need to be sent early in the simulation)
- use-frts :: a =boolean=.  enable/disable FRTS (Future Request To
    Send). Although in the original TMAC protocol it is not supported
    here.
- use-rts-cts :: a =boolean=. Default: =T=. Enable/disable RTS/CTS handshake. If disabled (not
    in orginal TMAC) limits any transmission to a simple DATA - ACK
    exchange between nodes without the overhead of a reservation. More
    efficient for small packets.
- disable-ta-extension :: a =boolean=.  Disabling TA extension effectively creates an SMAC
    protocol if we also define an appropriate listen interval (10% of
    the whole frame).
- conservative-ta :: a =boolean=. Default: =T=. Conservative activation timeout - will always
     stay awake for at least 15 ms after any activity on the radio
- resync-time :: a =time-type=. Default: =6.0d0=. The interval between broadcasting synchronization
    packets (in seconds). The value of this parameter is directly
    related to the clock drift of nodes in the simulation network. 40
    seconds is an adequate value to use with current clock drift
    model.
- contention-period :: a =time-type=. Default: =0.01=. The duration of contention interval (i.e. interval
    where transmissions of randomized), in milliseconds, for any
    transmission attempt. The major effect of this parameter is to
    avoid transmission interference from neighbouring nodes.
- listen-timeout :: a =time-type=. Default: =0.015=. The duration of listen timeout(can also be called
     activation timeout). This parameter defines the amount of time
     which has to pass without any activity on the wireless channel in
     order for a node to go to sleep in the current frame.
- wait-timeout :: a =time-type=. Default: =0.005=. The duration of timeout for expecting a reply from
    another node. This reply may be a CTS packet or an ACK packet. If
    no reply is received after this time interval, then transmission
    attempt is considered failed and transmission attempt counter is
    decremented.
- frame-time :: a =time-type=. Default: =0.61=. The length of each frame period for all nodes (in
    milliseconds). Nodes try to synchronise the start and end of each
    frame with a global schedule (with the possibility of more than
    one schedules). Note that this refers to the duration of the whole
    frame; the active and inactive portions of each frame are
    determined dynamically and individually for each node.
- collision-resolution :: a =symbol=. Default: ='IMMEDIATE-RETRY=. Collision resolution mechanism, choose from
     - immediate-retry :: Low collision avoidance - retry immediately after losing channel)
     - overhearing  :: (default). Retry only when hear a CTS or RTS/
		 - retry-next-frame :: Aggressive collision avoidance - retry only in next frame.

***** Description

TMAC employs many techniques to keep the energy
  consumption low (using aggressive duty cycling and synchronization)
  while trying to keep performance (e.g. packet delivery) high by
  adapting its duty cycle according to the traffic needs. S-MAC is a
  predecessor of TMAC as it initiated many of the techniques but uses
  a more rigid duty cycle. This implementation is from CASTELIA - see::

 Yuri Tselishchev, Athanassios Boulis, Lavy Libman, “Experiences and
 Lessons from Implementing a Wireless Sensor Network MAC Protocol in
 the Castalia Simulator,” submitted to IEEE Wireless Communications &
 Networking Conference 2010 (WCNC 2010), Sydney, Australia.

The parameters for SMAC are defined in the SMAC.ini configuration
file.


***** Direct Slots

# link target 2: <<print-state-transitions>>
# link target: <<slot print-state-transitions>>


****** Slot: =print-state-transitions=                                           :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Debugging parameter


# link target 2: <<ack-packet-size>>
# link target: <<slot ack-packet-size>>


****** Slot: =ack-packet-size=                                                   :slot:

- Value type: =integer=
- Initial value: =11=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<sync-packet-size>>
# link target: <<slot sync-packet-size>>


****** Slot: =sync-packet-size=                                                  :slot:

- Value type: =integer=
- Initial value: =11=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<rts-packet-size>>
# link target: <<slot rts-packet-size>>


****** Slot: =rts-packet-size=                                                   :slot:

- Value type: =integer=
- Initial value: =13=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<cts-packet-size>>
# link target: <<slot cts-packet-size>>


****** Slot: =cts-packet-size=                                                   :slot:

- Value type: =integer=
- Initial value: =13=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<max-mac-frame-size>>
# link target: <<slot max-mac-frame-size>>


****** Slot: =max-mac-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =11=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** External Slot: =buffer-size=                                              :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<max-tx-retries>>
# link target: <<slot max-tx-retries>>


****** Slot: =max-tx-retries=                                                    :slot:

- Value type: =integer=
- Initial value: =2=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

This number of transmission attempts of a single unicast packet
that TMAC will perform. A transmission is considered successful only
if acknowledgment packet is received from the destination
node. Sending an RTS packet is also considered as a transmission
attempt. Note that this parameter does not apply to broadcast
packets.


# link target 2: <<allow-sink-sync>>
# link target: <<slot allow-sink-sync>>


****** Slot: =allow-sink-sync=                                                   :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

If true allows sink node to start synchronisation
    immediately to avoid contention interval when creating a
    synchronisation schedule for the network, thus allowing for faster
    synchronisation, and consequently, better throughput (especially
    if packets need to be sent early in the simulation)


# link target 2: <<use-frts>>
# link target: <<slot use-frts>>


****** Slot: =use-frts=                                                          :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

enable/disable FRTS (Future Request To
    Send). Although in the original TMAC protocol it is not supported
    here.


# link target 2: <<use-rts-cts>>
# link target: <<slot use-rts-cts>>


****** Slot: =use-rts-cts=                                                       :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Enable/disable RTS/CTS handshake. If disabled (not
    in orginal TMAC) limits any transmission to a simple DATA - ACK
    exchange between nodes without the overhead of a reservation. More
    efficient for small packets.


# link target 2: <<disable-ta-extension>>
# link target: <<slot disable-ta-extension>>


****** Slot: =disable-ta-extension=                                              :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Disabling TA extension effectively creates an SMAC
    protocol if we also define an appropriate listen interval (10% of
    the whole frame).


# link target 2: <<conservative-ta>>
# link target: <<slot conservative-ta>>


****** Slot: =conservative-ta=                                                   :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Conservative activation timeout - will always
     stay awake for at least 15 ms after any activity on the radio


# link target 2: <<resync-time>>
# link target: <<slot resync-time>>


****** Slot: =resync-time=                                                       :slot:

- Value type: =time-type=
- Initial value: =6.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

The interval between broadcasting synchronization
    packets (in seconds). The value of this parameter is directly
    related to the clock drift of nodes in the simulation network. 40
    seconds is an adequate value to use with current clock drift
    model.


# link target 2: <<contention-period>>
# link target: <<slot contention-period>>


****** Slot: =contention-period=                                                 :slot:

- Value type: =time-type=
- Initial value: =0.01=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

The duration of contention interval (i.e. interval
    where transmissions of randomized), in milliseconds, for any
    transmission attempt. The major effect of this parameter is to
    avoid transmission interference from neighbouring nodes.


# link target 2: <<listen-timeout>>
# link target: <<slot listen-timeout>>


****** Slot: =listen-timeout=                                                    :slot:

- Value type: =time-type=
- Initial value: =0.015=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

The duration of listen timeout(can also be called
     activation timeout). This parameter defines the amount of time
     which has to pass without any activity on the wireless channel in
     order for a node to go to sleep in the current frame.


# link target 2: <<wait-timeout>>
# link target: <<slot wait-timeout>>


****** Slot: =wait-timeout=                                                      :slot:

- Value type: =time-type=
- Initial value: =0.005=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

The duration of timeout for expecting a reply from
    another node. This reply may be a CTS packet or an ACK packet. If
    no reply is received after this time interval, then transmission
    attempt is considered failed and transmission attempt counter is
    decremented.


# link target 2: <<frame-time>>
# link target: <<slot frame-time>>


****** Slot: =frame-time=                                                        :slot:

- Value type: =time-type=
- Initial value: =0.61=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

The length of each frame period for all nodes (in
    milliseconds). Nodes try to synchronise the start and end of each
    frame with a global schedule (with the possibility of more than
    one schedules). Note that this refers to the duration of the whole
    frame; the active and inactive portions of each frame are
    determined dynamically and individually for each node.


# link target 2: <<collision-resolution>>
# link target: <<slot collision-resolution>>


****** Slot: =collision-resolution=                                              :slot:

- Value type: =symbol=
- Initial value: ='LENS.WSN.MAC.TMAC::IMMEDIATE-RETRY=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Collision resolution mechanism, choose from
     - immediate-retry :: Low collision avoidance - retry immediately after losing channel)
     - overhearing  :: (default). Retry only when hear a CTS or RTS/
		 - retry-next-frame :: Aggressive collision avoidance - retry only in next frame.


# link target 2: <<state>>
# link target: <<slot state>>


****** Internal Slot: =state=                                                    :slot:

- Value type: =tmac-state=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<state>>
# link target: <<slot-accessor state>>


******** Internal Slot Accessor: =state=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(state instance)
#+END_SRC

********* Arguments


- instance :: an object with state handling.

********* Description


Return current state identifier of /instance/

********* Methods

- (=state= (mac802.15.4 [[class mac802.15.4][=lens.wsn:mac802.15.4=]]))
- (=state= (tmac [[class tmac][=lens.wsn:tmac=]]))
- (=state= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))
- (=state= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<tx-addr>>
# link target: <<slot tx-addr>>


****** Slot: =tx-addr=                                                           :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

current communication peer (can be BROADCAST)


# link target 2: <<tx-retries>>
# link target: <<slot tx-retries>>


****** Slot: =tx-retries=                                                        :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

number of transmission attempts to txAddr (when reaches 0 - packet is dropped)


# link target 2: <<primary-wakeup>>
# link target: <<slot primary-wakeup>>


****** Slot: =primary-wakeup=                                                    :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

to distinguish between primary and secondary schedules


# link target 2: <<need-resync>>
# link target: <<slot need-resync>>


****** Slot: =need-resync=                                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

	//set to 1 when a SYNC packet has to be sent


# link target 2: <<current-frame-start>>
# link target: <<slot current-frame-start>>


****** Slot: =current-frame-start=                                               :slot:

- Value type: =time-type=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

recorded start time of the current frame


# link target 2: <<activation-timeout>>
# link target: <<slot activation-timeout>>


****** Slot: =activation-timeout=                                                :slot:

- Value type: =time-type=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

time untill MAC_CHECK_TA message arrival


# link target 2: <<schedule-table>>
# link target: <<slot schedule-table>>


****** Slot: =schedule-table=                                                    :slot:

- Value type: =vector=
- Initial value: =(MAKE-ARRAY 8 :ELEMENT-TYPE 'LENS.WSN.MAC.TMAC::TMAC-SCHEDULE
                              :ADJUSTABLE T :FILL-POINTER 0)=
- Initargs: none
- Allocation: instance


******* Description

TMAC Schedule table (list of effective schedules)


# link target 2: <<sync-packet>>
# link target: <<slot sync-packet>>


****** Slot: =sync-packet=                                                       :slot:

- Value type: =tmac-sync-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<rts-packet>>
# link target: <<slot rts-packet>>


****** Slot: =rts-packet=                                                        :slot:

- Value type: =tmac-rts-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<cts-packet>>
# link target: <<slot cts-packet>>


****** Slot: =cts-packet=                                                        :slot:

- Value type: =tmac-cts-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<ack-packet>>
# link target: <<slot ack-packet>>


****** Slot: =ack-packet=                                                        :slot:

- Value type: =tmac-ack-packet=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<transmission-timeout>>
# link target: <<slot transmission-timeout>>


****** Slot: =transmission-timeout=                                              :slot:

- Value type: =t=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance


# link target 2: <<check-ta>>
# link target: <<slot check-ta>>


****** Slot: =check-ta=                                                          :slot:

- Value type: =t=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance


# link target 2: <<carrier-sense>>
# link target: <<slot carrier-sense>>


****** Slot: =carrier-sense=                                                     :slot:

- Value type: =t=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target: <<slot radio>>


****** Slot: =radio=                                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<address>>
# link target: <<slot address>>


****** Internal Slot: =address=                                                  :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

MAC address - will default to nodeid.


# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Internal Slot: =buffer=                                                   :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<tuneable-mac>>
# link target: <<class tuneable-mac>>


**** Class: =tuneable-mac=                                                    :class:


***** Inheritance

- Parent classes:
    [[class mac][mac]]
- Precedence list:
    [[class tuneable-mac][tuneable-mac]], [[class mac][mac]], [[class comms
    module][comms-module]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- duty-cycle :: a =float=. Default: =1.0=. The fraction of time that the node stays on
    listening to the channe;: listening / (sleeping+listening)
- listen-interval :: a =time-type=. Default: =0.01=. This is the time the node stays on listening each cycle.
- beacon-interval-fraction :: a =float=. Default: =1.0=. This parameter expresses the fraction of the
    maximum beacon interval (= sleeping interval) that our beacon
    interval actually is. The smaller this is the less energy we
    spend, but the less chance we have to wake up a neighbour.
- probability-tx :: a =float=. Default: =1.0=. The probability of a single try of Transmission to
    happen. This value combined with the number of retransmissions can
    create any expected number of transmissions per node, even non
    integer values.
- num-tx :: a =integer=. Default: =1=. Number of times we try to retransmit something.
- random-tx-offset :: a =time-type=. Default: =0.0d0=. We start transmitting after time chosen randomly
    from interval [0..randomTxOffset]
- retx-interval :: a =time-type=. Default: =0.0d0=. Interval between retransmissions.
- backoff-type :: a =symbol=. Default: ='CONSTANT=. Determines how backoff-interval is determine. Can
    be sleep-interval, constant, multiplying (e.g. 1*a, 2*a, 3*a, 4*a
    ...),or exponential (e.g. 2, 4, 8, 16, 32...)
- backoff-base-value :: a =time-type=. Default: =0.016d0=. Base backoff time interval. See also [[parameter
    backoff-type]]
- csma-persistence :: a =(number :min 0 :max 1 :coerce-to float)=. Default: =0=. Value in range [0..1], 0 is CSMA non-persistent,
    p-persistent, or 1-persistent?
- tx-all-packets-in-free-channel :: a =boolean=. Default: =T=. If true, if you find the channel free, transmit all
    packets in buffer
- sleep-during-backoff :: a =boolean=.  For no dutyCycle case: sleep when backing off
- beacon-frame-size :: a =integer=. Default: =125=. Have a big beacon, to avoid much processing
    overhead, but fit at least 2 in the listening interval

***** Description

A highly tuneable MAC protocol implementation with
  broadcast communication in mind (it does not support unicast,
  acknowledgements or RTC/CTS control packets). It can be tuned in
  regards to its persistence and backing off policies. It can also be
  used to duty cycle the radio and to transmit an appropriate train of
  beacons before each data transmission to wake up potential
  receivers (since the nodes are not aligned in their sleeping
  schedules). It also provides several other parameterized functions
  such as retransmissions, probabilistic transmission, and randomized
  TX offsets.

Default parameter values will result in non-persistent CSMA-CA
  behaviour with /no/ radio duty cycling.

Most parameters can be controlled by the application using
[[mac-control-message]] messages with the commands =set-duty-cycle=,
=set-listen-interval=, =set-beacon-interval-fraction=, =set-prob-tx=,
=set-random-tx-offset=, =set-retx-interval=, =set-backoff-type=,
set-backoff-base-value. See the associated module parameters for
semantics and arguments.


***** Direct Slots

# link target 2: <<duty-cycle>>
# link target: <<slot duty-cycle>>


****** Slot: =duty-cycle=                                                        :slot:

- Value type: =float=
- Initial value: =1.0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

The fraction of time that the node stays on
    listening to the channe;: listening / (sleeping+listening)


******* Accessors

# link target 2: <<duty-cycle>>
# link target: <<slot-accessor duty-cycle>>


******** Slot Accessor: =duty-cycle=                                      :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(duty-cycle object)
#+END_SRC


********* Methods

- (=duty-cycle= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<listen-interval>>
# link target: <<slot listen-interval>>


****** Slot: =listen-interval=                                                   :slot:

- Value type: =time-type=
- Initial value: =0.01=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

This is the time the node stays on listening each cycle.


******* Accessors

# link target 2: <<listen-interval>>
# link target: <<slot-accessor listen-interval>>


******** Slot Accessor: =listen-interval=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(listen-interval object)
#+END_SRC


********* Methods

- (=listen-interval= (tuneable-mac                     [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<beacon-interval-fraction>>
# link target: <<slot beacon-interval-fraction>>


****** Slot: =beacon-interval-fraction=                                          :slot:

- Value type: =float=
- Initial value: =1.0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

This parameter expresses the fraction of the
    maximum beacon interval (= sleeping interval) that our beacon
    interval actually is. The smaller this is the less energy we
    spend, but the less chance we have to wake up a neighbour.


******* Accessors

# link target 2: <<beacon-interval-fraction>>
# link target: <<slot-accessor beacon-interval-fraction>>


******** Slot Accessor: =beacon-interval-fraction=                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(beacon-interval-fraction object)
#+END_SRC


********* Methods

- (=beacon-interval-fraction= (tuneable-mac                             
  [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<probability-tx>>
# link target: <<slot probability-tx>>


****** Slot: =probability-tx=                                                    :slot:

- Value type: =float=
- Initial value: =1.0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

The probability of a single try of Transmission to
    happen. This value combined with the number of retransmissions can
    create any expected number of transmissions per node, even non
    integer values.


******* Accessors

# link target 2: <<probability-tx>>
# link target: <<slot-accessor probability-tx>>


******** Slot Accessor: =probability-tx=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(probability-tx object)
#+END_SRC


********* Methods

- (=probability-tx= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target 2: <<num-tx>>
# link target: <<slot num-tx>>


****** Slot: =num-tx=                                                            :slot:

- Value type: =integer=
- Initial value: =1=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Number of times we try to retransmit something.


******* Accessors

# link target 2: <<num-tx>>
# link target: <<slot-accessor num-tx>>


******** Slot Accessor: =num-tx=                                          :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(num-tx object)
#+END_SRC


********* Methods

- (=num-tx= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<random-tx-offset>>
# link target: <<slot random-tx-offset>>


****** Slot: =random-tx-offset=                                                  :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

We start transmitting after time chosen randomly
    from interval [0..randomTxOffset]


******* Accessors

# link target 2: <<random-tx-offset>>
# link target: <<slot-accessor random-tx-offset>>


******** Slot Accessor: =random-tx-offset=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(random-tx-offset object)
#+END_SRC


********* Methods

- (=random-tx-offset= (tuneable-mac                      [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<retx-interval>>
# link target: <<slot retx-interval>>


****** Slot: =retx-interval=                                                     :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Interval between retransmissions.


******* Accessors

# link target 2: <<retx-interval>>
# link target: <<slot-accessor retx-interval>>


******** Slot Accessor: =retx-interval=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(retx-interval object)
#+END_SRC


********* Methods

- (=retx-interval= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target: <<slot backoff-type>>


****** Slot: =backoff-type=                                                      :slot:

- Value type: =symbol=
- Initial value: ='LENS.WSN:CONSTANT=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Determines how backoff-interval is determine. Can
    be sleep-interval, constant, multiplying (e.g. 1*a, 2*a, 3*a, 4*a
    ...),or exponential (e.g. 2, 4, 8, 16, 32...)


******* Accessors

# link target: <<slot-accessor backoff-type>>


******** Slot Accessor: =backoff-type=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(backoff-type object)
#+END_SRC


********* Methods

- (=backoff-type= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target 2: <<backoff-base-value>>
# link target: <<slot backoff-base-value>>


****** Slot: =backoff-base-value=                                                :slot:

- Value type: =time-type=
- Initial value: =0.016d0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Base backoff time interval. See also [[parameter
    backoff-type]]


******* Accessors

# link target 2: <<backoff-base-value>>
# link target: <<slot-accessor backoff-base-value>>


******** Slot Accessor: =backoff-base-value=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(backoff-base-value object)
#+END_SRC


********* Methods

- (=backoff-base-value= (tuneable-mac                        [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<csma-persistence>>
# link target: <<slot csma-persistence>>


****** Slot: =csma-persistence=                                                  :slot:

- Value type: =float=
- Initial value: =0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (format (number min 0 max 1 coerce-to float))


******* Description

Value in range [0..1], 0 is CSMA non-persistent,
    p-persistent, or 1-persistent?


******* Accessors

# link target 2: <<csma-persistence>>
# link target: <<slot-accessor csma-persistence>>


******** Slot Accessor: =csma-persistence=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(csma-persistence object)
#+END_SRC


********* Methods

- (=csma-persistence= (tuneable-mac                      [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<tx-all-packets-in-free-channel>>
# link target: <<slot tx-all-packets-in-free-channel>>


****** Slot: =tx-all-packets-in-free-channel=                                    :slot:

- Value type: =boolean=
- Initial value: =T=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

If true, if you find the channel free, transmit all
    packets in buffer


******* Accessors

# link target 2: <<tx-all-packets-in-free-channel>>
# link target: <<slot-accessor tx-all-packets-in-free-channel>>


******** Slot Accessor: =tx-all-packets-in-free-channel=                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(tx-all-packets-in-free-channel object)
#+END_SRC


********* Methods

- (=tx-all-packets-in-free-channel= (tuneable-mac                              
       [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<sleep-during-backoff>>
# link target: <<slot sleep-during-backoff>>


****** Slot: =sleep-during-backoff=                                              :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

For no dutyCycle case: sleep when backing off


******* Accessors

# link target 2: <<sleep-during-backoff>>
# link target: <<slot-accessor sleep-during-backoff>>


******** Slot Accessor: =sleep-during-backoff=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sleep-during-backoff object)
#+END_SRC


********* Methods

- (=sleep-during-backoff= (tuneable-mac                          [[class
  tuneable-mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =9=
- Initargs: none
- Allocation: instance


# link target 2: <<beacon-frame-size>>
# link target: <<slot beacon-frame-size>>


****** Slot: =beacon-frame-size=                                                 :slot:

- Value type: =integer=
- Initial value: =125=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Have a big beacon, to avoid much processing
    overhead, but fit at least 2 in the listening interval


******* Accessors

# link target 2: <<beacon-frame-size>>
# link target: <<slot-accessor beacon-frame-size>>


******** Slot Accessor: =beacon-frame-size=                               :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(beacon-frame-size object)
#+END_SRC


********* Methods

- (=beacon-frame-size= (tuneable-mac                       [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<buffer-size>>
# link target: <<slot buffer-size>>


****** External Slot: =buffer-size=                                              :slot:

- Value type: =t=
- Initial value: =32=
- Initargs: none
- Allocation: instance


# link target 2: <<max-mac-frame-size>>
# link target: <<slot max-mac-frame-size>>


****** Slot: =max-mac-frame-size=                                                :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: none
- Allocation: instance


# link target 2: <<state>>
# link target: <<slot state>>


****** Internal Slot: =state=                                                    :slot:

- Value type: =tuneable-mac-state=
- Initial value: ='LENS.WSN.MAC.TUNEABLE::DEFAULT=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<state>>
# link target: <<slot-accessor state>>


******** Internal Slot Accessor: =state=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(state instance)
#+END_SRC

********* Arguments


- instance :: an object with state handling.

********* Description


Return current state identifier of /instance/

********* Methods

- (=state= (mac802.15.4 [[class mac802.15.4][=lens.wsn:mac802.15.4=]]))
- (=state= (tmac [[class tmac][=lens.wsn:tmac=]]))
- (=state= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))
- (=state= (radio [[class radio][=lens.wsn:radio=]]))





# link target 2: <<num-tx-tries>>
# link target: <<slot num-tx-tries>>


****** Slot: =num-tx-tries=                                                      :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<num-tx-tries>>
# link target: <<slot-accessor num-tx-tries>>


******** Slot Accessor: =num-tx-tries=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(num-tx-tries object)
#+END_SRC


********* Methods

- (=num-tx-tries= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target 2: <<backoff-times>>
# link target: <<slot backoff-times>>


****** Slot: =backoff-times=                                                     :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Description

number of consequtive backoff times


******* Accessors

# link target 2: <<backoff-times>>
# link target: <<slot-accessor backoff-times>>


******** Slot Accessor: =backoff-times=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(backoff-times object)
#+END_SRC


********* Methods

- (=backoff-times= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target 2: <<remaining-beacons-to-tx>>
# link target: <<slot remaining-beacons-to-tx>>


****** Slot: =remaining-beacons-to-tx=                                           :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<remaining-beacons-to-tx>>
# link target: <<slot-accessor remaining-beacons-to-tx>>


******** Slot Accessor: =remaining-beacons-to-tx=                         :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(remaining-beacons-to-tx object)
#+END_SRC


********* Methods

- (=remaining-beacons-to-tx= (tuneable-mac                             [[class
  tuneable-mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<sleep-interval>>
# link target: <<slot sleep-interval>>


****** Slot: =sleep-interval=                                                    :slot:

- Value type: =time-type=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<sleep-interval>>
# link target: <<slot-accessor sleep-interval>>


******** Slot Accessor: =sleep-interval=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sleep-interval object)
#+END_SRC


********* Methods

- (=sleep-interval= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target 2: <<sleep-listen-timer>>
# link target: <<slot sleep-listen-timer>>


****** Slot: =sleep-listen-timer=                                                :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<sleep-listen-timer>>
# link target: <<slot-accessor sleep-listen-timer>>


******** Slot Accessor: =sleep-listen-timer=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sleep-listen-timer object)
#+END_SRC


********* Methods

- (=sleep-listen-timer= (tuneable-mac                        [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<start-cs-timer>>
# link target: <<slot start-cs-timer>>


****** Slot: =start-cs-timer=                                                    :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE :NAME                          
       'LENS.WSN.MAC.TUNEABLE::START-CS-TIMER)=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<start-cs-timer>>
# link target: <<slot-accessor start-cs-timer>>


******** Slot Accessor: =start-cs-timer=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(start-cs-timer object)
#+END_SRC


********* Methods

- (=start-cs-timer= (tuneable-mac [[class tuneable-mac][=lens.wsn:tuneable
  mac=]]))





# link target 2: <<attempt-tx-timer>>
# link target: <<slot attempt-tx-timer>>


****** Slot: =attempt-tx-timer=                                                  :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE :NAME                          
       'LENS.WSN.MAC.TUNEABLE::ATTEMPT-TX-TIMER)=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<attempt-tx-timer>>
# link target: <<slot-accessor attempt-tx-timer>>


******** Slot Accessor: =attempt-tx-timer=                                :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(attempt-tx-timer object)
#+END_SRC


********* Methods

- (=attempt-tx-timer= (tuneable-mac                      [[class tuneable
  mac][=lens.wsn:tuneable-mac=]]))





# link target 2: <<send-beacons-or-data-timer>>
# link target: <<slot send-beacons-or-data-timer>>


****** Slot: =send-beacons-or-data-timer=                                        :slot:

- Value type: =message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE :NAME                          
       'LENS.WSN.MAC.TUNEABLE::SEND-BEACONS-OR-DATA-TIMER)=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<send-beacons-or-data-timer>>
# link target: <<slot-accessor send-beacons-or-data-timer>>


******** Slot Accessor: =send-beacons-or-data-timer=                      :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(send-beacons-or-data-timer object)
#+END_SRC


********* Methods

- (=send-beacons-or-data-timer= (tuneable-mac                               
  [[class tuneable-mac][=lens.wsn:tuneable-mac=]]))







***** Indirect Slots

# link target: <<slot radio>>


****** Slot: =radio=                                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<address>>
# link target: <<slot address>>


****** Internal Slot: =address=                                                  :slot:

- Value type: =integer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

MAC address - will default to nodeid.


# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


# link target 2: <<packet-history>>
# link target: <<slot packet-history>>


****** Slot: =packet-history=                                                    :slot:

- Value type: =history-buffer=
- Initial value: =(MAKE-INSTANCE 'HISTORY-BUFFER :ELEMENT-TYPE 'PACKET :KEY    
                             #'(LAMBDA (LENS.WSN::P)                           
          (CONS (LENS.WSN:SOURCE LENS.WSN::P)                                  
         (LENS.WSN:SEQUENCE-NUMBER                                          
  LENS.WSN::P))))=
- Initargs: none
- Allocation: instance


******* Description

received packet history buffer


# link target 2: <<buffer>>
# link target: <<slot buffer>>


****** Internal Slot: =buffer=                                                   :slot:

- Value type: =packet-buffer=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

TX buffer


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<value-propagation>>
# link target: <<class value-propagation>>


**** Class: =value-propagation=                                               :class:


***** Inheritance

- Parent classes:
    [[class application][application]]
- Precedence list:
    [[class value-propagation][value-propagation]], [[class
    application][application]], [[class wsn-module][wsn-module]], [[class with
    timers][with-timers]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- temp-threshold :: a =t=. Default: =15=. NIL

***** Description

Application class which will continually sample sensors
and  will transmit maximum of its sensor reading or received
sensor reading once over the network.


***** Direct Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =8=
- Initargs: none
- Allocation: instance


# link target 2: <<payload-overhead>>
# link target: <<slot payload-overhead>>


****** Slot: =payload-overhead=                                                  :slot:

- Value type: =t=
- Initial value: =2=
- Initargs: none
- Allocation: instance


# link target 2: <<temp-threshold>>
# link target: <<slot temp-threshold>>


****** Slot: =temp-threshold=                                                    :slot:

- Value type: =t=
- Initial value: =15=
- Initargs: temp-threshold
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<total-packets>>
# link target: <<slot total-packets>>


****** Slot: =total-packets=                                                     :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<total-packets>>
# link target: <<slot-accessor total-packets>>


******** Slot Accessor: =total-packets=                                   :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(total-packets object)
#+END_SRC


********* Methods

- (=total-packets= (value-propagation                   [[class value
  propagation][=lens.wsn:value-propagation=]]))





# link target 2: <<current-max-received-value>>
# link target: <<slot current-max-received-value>>


****** Slot: =current-max-received-value=                                        :slot:

- Value type: =float=
- Initial value: =-1000.0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<current-max-received-value>>
# link target: <<slot-accessor current-max-received-value>>


******** Slot Accessor: =current-max-received-value=                      :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(current-max-received-value object)
#+END_SRC


********* Methods

- (=current-max-received-value= (value-propagation                             
    [[class value-propagation][=lens.wsn:value-propagation=]]))





# link target 2: <<current-max-sensed-value>>
# link target: <<slot current-max-sensed-value>>


****** Slot: =current-max-sensed-value=                                          :slot:

- Value type: =float=
- Initial value: =-1000.0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<current-max-sensed-value>>
# link target: <<slot-accessor current-max-sensed-value>>


******** Slot Accessor: =current-max-sensed-value=                        :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(current-max-sensed-value object)
#+END_SRC


********* Methods

- (=current-max-sensed-value= (value-propagation                             
  [[class value-propagation][=lens.wsn:value-propagation=]]))





# link target 2: <<sent-once>>
# link target: <<slot sent-once>>


****** Slot: =sent-once=                                                         :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<the-value>>
# link target: <<slot the-value>>


****** Slot: =the-value=                                                         :slot:

- Value type: =float=
- Initial value: =0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<the-value>>
# link target: <<slot-accessor the-value>>


******** Slot Accessor: =the-value=                                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(the-value object)
#+END_SRC


********* Methods

- (=the-value= (value-propagation               [[class value
  propagation][=lens.wsn:value-propagation=]]))







***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Sequence number of last packet sent


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =integer=
- Initial value: =1=
- Initargs: priority
- Allocation: instance


******* Description

What priority to give the application packets


# link target 2: <<applicationid>>
# link target: <<slot applicationid>>


****** Slot: =applicationid=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: id
- Allocation: instance


******* Description

Used to filter packet delivery to specific applications.


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<value-reporting>>
# link target: <<class value-reporting>>


**** Class: =value-reporting=                                                 :class:


***** Inheritance

- Parent classes:
    [[class application][application]]
- Precedence list:
    [[class value-reporting][value-reporting]], [[class application][application]],
    [[class wsn-module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- sink-network-address :: a =fixnum=.  NIL
- max-sample-interval :: a =time-type=. Default: =60.0=. NIL
- min-sample-interval :: a =time-type=. Default: =1.0=. NIL

***** Description

Document class which will continually sample sensors
and send data to [[sink-network-address]] over network


***** Direct Slots

# link target 2: <<sink-network-address>>
# link target: <<slot sink-network-address>>


****** Slot: =sink-network-address=                                              :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Accessors

# link target 2: <<sink-network-address>>
# link target: <<slot-accessor sink-network-address>>


******** Slot Accessor: =sink-network-address=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sink-network-address module)
#+END_SRC

********* Attributes


- module :: an [[application]] or other [[wsn-module]]

********* Description


Return the address of sink node for reporting applications. Default
is =sink= however some applications take this as a parameter.

********* Methods

- (=sink-network-address= (simple-aggregation                          [[class
  simple-aggregation][=lens.wsn:simple-aggregation=]]))
- (=sink-network-address= (value-reporting                          [[class
  value-reporting][=lens.wsn:value-reporting=]]))
- (=sink-network-address= (leach-routing                          [[class leach
  routing][=lens.wsn:leach-routing=]]))
- (=sink-network-address= (entity [[class
  application][=lens.wsn:application=]]))
- (=sink-network-address= (node [[class node][=lens.wsn:node=]]))
- (=sink-network-address= (instance [[class wsn-module][=lens.wsn:wsn
  module=]]))





# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =8=
- Initargs: none
- Allocation: instance


# link target 2: <<payload-overhead>>
# link target: <<slot payload-overhead>>


****** Slot: =payload-overhead=                                                  :slot:

- Value type: =t=
- Initial value: =12=
- Initargs: none
- Allocation: instance


# link target 2: <<max-sample-interval>>
# link target: <<slot max-sample-interval>>


****** Slot: =max-sample-interval=                                               :slot:

- Value type: =time-type=
- Initial value: =60.0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<min-sample-interval>>
# link target: <<slot min-sample-interval>>


****** Slot: =min-sample-interval=                                               :slot:

- Value type: =time-type=
- Initial value: =1.0=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


# link target 2: <<routing-level>>
# link target: <<slot routing-level>>


****** Slot: =routing-level=                                                     :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<last-sensed-value>>
# link target: <<slot last-sensed-value>>


****** Slot: =last-sensed-value=                                                 :slot:

- Value type: =real=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<sent-once>>
# link target: <<slot sent-once>>


****** Slot: =sent-once=                                                         :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<random-back-off-interval-fraction>>
# link target: <<slot random-back-off-interval-fraction>>


****** Slot: =random-back-off-interval-fraction=                                 :slot:

- Value type: =real=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<request-sample>>
# link target: <<slot request-sample>>


****** Slot: =request-sample=                                                    :slot:

- Value type: =timer-message=
- Initial value: =(MAKE-INSTANCE 'TIMER-MESSAGE)=
- Initargs: none
- Allocation: instance




***** Indirect Slots

# link target 2: <<last-sequence-number>>
# link target: <<slot last-sequence-number>>


****** Slot: =last-sequence-number=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Sequence number of last packet sent


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =integer=
- Initial value: =1=
- Initargs: priority
- Allocation: instance


******* Description

What priority to give the application packets


# link target 2: <<applicationid>>
# link target: <<slot applicationid>>


****** Slot: =applicationid=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: id
- Allocation: instance


******* Description

Used to filter packet delivery to specific applications.


# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target: <<class wireless-channel>>


**** Class: =wireless-channel=                                                :class:


***** Inheritance

- Parent classes:
    [[class compound-module][compound-module]]
- Precedence list:
    [[class wireless-channel][wireless-channel]], [[class compound-module][compound
    module]], [[class module][module]], [[class component][component]], [[class
    parameter-object][parameter-object]], [[class entity-with-signals][entity-with
    signals]], [[class owned-object][owned-object]], [[class named-object][named
    object]], [[class lens-object][lens-object]], [[class standard-object][standard
    object]], [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- cell-size :: a =coord=. Default: =(MAKE-COORD 5.0 5.0 1.0)=. Size of cells in each dimension (for mobility)
- signal-delivery-threshold :: a =real=. Default: =-100.0=. threshold in dBm above which, wireless channel
    module is delivering signal messages to radio modules of
    individual nodes

***** Description

The wireless channel module simulates the wireless
  medium. Nodes sent packets to it and according to various
  conditions (fading, interference etc) it is decided which nodes can
  receive this packet.


***** Direct Slots

# link target 2: <<cell-size>>
# link target: <<slot cell-size>>


****** Internal Slot: =cell-size=                                                :slot:

- Value type: =coord=
- Initial value: =(MAKE-COORD 5.0 5.0 1.0)=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Size of cells in each dimension (for mobility)


******* Accessors

# link target 2: <<cell-size>>
# link target: <<slot-accessor cell-size>>


******** Internal Slot Accessor: =cell-size=                              :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cell-size object)
#+END_SRC


********* Methods

- (=cell-size= (wireless-channel               [[class wireless
  channel][=lens.wsn:wireless-channel=]]))





# link target 2: <<field>>
# link target: <<slot field>>


****** Slot: =field=                                                             :slot:

- Value type: =coord=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

wireless coverage field (may be larger than network field


******* Accessors

# link target 2: <<field>>
# link target: <<slot-accessor field>>


******** Slot Accessor: =field=                                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(field object)
#+END_SRC


********* Methods

- (=field= (wireless-channel           [[class wireless
  channel][=lens.wsn:wireless-channel=]]))
- (=field= (wsn [[class wsn][=lens.wsn:wsn=]]))





# link target 2: <<signal-delivery-threshold>>
# link target: <<slot signal-delivery-threshold>>


****** Slot: =signal-delivery-threshold=                                         :slot:

- Value type: =real=
- Initial value: =-100.0=
- Initargs: signal-delivery-threshold
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

threshold in dBm above which, wireless channel
    module is delivering signal messages to radio modules of
    individual nodes


******* Accessors

# link target 2: <<signal-delivery-threshold>>
# link target: <<slot-accessor signal-delivery-threshold>>


******** Slot Accessor: =signal-delivery-threshold=                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(signal-delivery-threshold object)
#+END_SRC


********* Methods

- (=signal-delivery-threshold= (wireless-channel                              
  [[class wireless-channel][=lens.wsn:wireless-channel=]]))





# link target: <<slot temporal-model>>


****** Slot: =temporal-model=                                                    :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

the temporal channel variation model


******* Accessors

# link target: <<slot-accessor temporal-model>>


******** Slot Accessor: =temporal-model=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(temporal-model object)
#+END_SRC


********* Methods

- (=temporal-model= (wireless-channel                    [[class wireless
  channel][=lens.wsn:wireless-channel=]]))





# link target 2: <<max-tx-power>>
# link target: <<slot max-tx-power>>


****** Slot: =max-tx-power=                                                      :slot:

- Value type: =real=
- Initial value: =0.0=
- Initargs: none
- Allocation: instance


******* Accessors

# link target 2: <<max-tx-power>>
# link target: <<slot-accessor max-tx-power>>


******** Slot Accessor: =max-tx-power=                                    :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(max-tx-power object)
#+END_SRC


********* Methods

- (=max-tx-power= (wireless-channel                  [[class wireless
  channel][=lens.wsn:wireless-channel=]]))





# link target 2: <<receivers>>
# link target: <<slot receivers>>


****** Slot: =receivers=                                                         :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

an array of lists of receiver gateways affected by
    ongoing transmission.


******* Accessors

# link target 2: <<receivers>>
# link target: <<slot-accessor receivers>>


******** Slot Accessor: =receivers=                                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(receivers object)
#+END_SRC


********* Methods

- (=receivers= (wireless-channel               [[class wireless
  channel][=lens.wsn:wireless-channel=]]))





# link target 2: <<cells>>
# link target: <<slot cells>>


****** Internal Slot: =cells=                                                    :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

an array of cell entities with node occupation and
    path-loss to other cells


******* Accessors

# link target 2: <<cells>>
# link target: <<slot-accessor cells>>


******** Internal Slot Accessor: =cells=                                  :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(cells object)
#+END_SRC


********* Methods

- (=cells= (wireless-channel           [[class wireless
  channel][=lens.wsn:wireless-channel=]]))





# link target 2: <<location-cells>>
# link target: <<slot location-cells>>


****** Slot: =location-cells=                                                    :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Cached location cell by node instance




***** Indirect Slots

# link target 2: <<channels>>
# link target: <<slot channels>>


****** Internal Slot: =channels=                                                 :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<submodules>>
# link target: <<slot submodules>>


****** Internal Slot: =submodules=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<wsn>>
# link target: <<class wsn>>


**** Class: =wsn=                                                             :class:


***** Inheritance

- Parent classes:
    [[class network][network]]
- Precedence list:
    [[class wsn][wsn]], [[class network][network]], [[class compound
    module][compound-module]], [[class module][module]], [[class
    component][component]], [[class parameter-object][parameter-object]], [[class
    entity-with-signals][entity-with-signals]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    None.


***** Parameters

- field :: a =coord=. Default: =(MAKE-COORD 30.0d0 30.0d0)=. Size of network deployment field
- num-nodes :: a =fixnum=. Default: =30=. Number of nodes in network
- num-physical-processes :: a =fixnum=. Default: =1=. Number of physical processes
- deployment :: a =read=. Default: ='UNIFORM=. Node deployment specification. See [[mobility]] module on valid values for this and it's semantics.

***** Description

Network for all Wirelesss sensor networks bringing
  together a [[wireless-channel]], a set of sensing [[nodes]]
  representing motes and a number of [[physical-process]]s being
  sensed..


***** Direct Slots

# link target 2: <<field>>
# link target: <<slot field>>


****** Slot: =field=                                                             :slot:

- Value type: =coord=
- Initial value: =(MAKE-COORD 30.0d0 30.0d0)=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Size of network deployment field


******* Accessors

# link target 2: <<field>>
# link target: <<slot-accessor field>>


******** Slot Accessor: =field=                                           :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(field object)
#+END_SRC


********* Methods

- (=field= (wireless-channel           [[class wireless
  channel][=lens.wsn:wireless-channel=]]))
- (=field= (wsn [[class wsn][=lens.wsn:wsn=]]))





# link target 2: <<num-nodes>>
# link target: <<slot num-nodes>>


****** Slot: =num-nodes=                                                         :slot:

- Value type: =fixnum=
- Initial value: =30=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Number of nodes in network


******* Accessors

# link target 2: <<num-nodes>>
# link target: <<slot-accessor num-nodes>>


******** Slot Accessor: =num-nodes=                                       :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(num-nodes object)
#+END_SRC


********* Methods

- (=num-nodes= (wsn [[class wsn][=lens.wsn:wsn=]]))





# link target 2: <<num-physical-processes>>
# link target: <<slot num-physical-processes>>


****** Slot: =num-physical-processes=                                            :slot:

- Value type: =fixnum=
- Initial value: =1=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: nil


******* Description

Number of physical processes


******* Accessors

# link target 2: <<num-physical-processes>>
# link target: <<slot-accessor num-physical-processes>>


******** Slot Accessor: =num-physical-processes=                          :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(num-physical-processes object)
#+END_SRC


********* Methods

- (=num-physical-processes= (wsn [[class wsn][=lens.wsn:wsn=]]))





# link target 2: <<deployment>>
# link target: <<slot deployment>>


****** Slot: =deployment=                                                        :slot:

- Value type: =list=
- Initial value: ='UNIFORM=
- Initargs: none
- Allocation: instance
- Parameter: t
- Properties: (format read)


******* Description

Node deployment specification. See [[mobility]] module on valid values for this and it's semantics.


******* Accessors

# link target 2: <<deployment>>
# link target: <<slot-accessor deployment>>


******** Slot Accessor: =deployment=                                      :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(deployment object)
#+END_SRC


********* Methods

- (=deployment= (wsn [[class wsn][=lens.wsn:wsn=]]))







***** Indirect Slots

# link target 2: <<channels>>
# link target: <<slot channels>>


****** Internal Slot: =channels=                                                 :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<submodules>>
# link target: <<slot submodules>>


****** Internal Slot: =submodules=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<wsn-module>>
# link target: <<class wsn-module>>


**** Class: =wsn-module=                                                      :class:


***** Inheritance

- Parent classes:
    [[class with-timers][with-timers]], [[class module][module]]
- Precedence list:
    [[class wsn-module][wsn-module]], [[class with-timers][with-timers]], [[class
    module][module]], [[class component][component]], [[class parameter
    object][parameter-object]], [[class entity-with-signals][entity-with-signals]],
    [[class owned-object][owned-object]], [[class named-object][named-object]],
    [[class lens-object][lens-object]], [[class standard-object][standard-object]],
    [[class slot-object][slot-object]], [[class t][t]]
- Direct subclasses:
    [[class comms-module][comms-module]], [[class application][application]],
    [[class sensor][sensor]], [[class resources][resources]], [[class
    mobility][mobility]]


***** Parameters

None.

***** Description

[[wsn-module]]s represent all modules inside a
[[node]] on thenetwork. They inherit timers from [[with-timers]]
however the timers use [[get-simulation-time]] so that they take
account of clock drift on the node (see the [[resources]]
module). They subscribe to the [[node-shutdown]] and [[node-startup]]
event signals to [[startup]] and [[shutdown]] the module All
submodules of a node will receive this signal. For shutdown modules
[[disabled-p]] is true.


***** Direct Slots

# link target 2: <<disabled-p>>
# link target: <<slot disabled-p>>


****** External Slot: =disabled-p=                                               :slot:

- Value type: =t=
- Initial value: =T=
- Initargs: disabled-p
- Allocation: instance


******* Description

True if module is disabled (does not receive messages)


******* Accessors

# link target 2: <<disabled-p>>
# link target: <<slot-accessor disabled-p>>


******** External Slot Accessor: =disabled-p=                             :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(disabled-p object)
#+END_SRC


********* Methods

- (=disabled-p= (wsn-module [[class wsn-module][=lens.wsn:wsn-module=]]))
- (=disabled-p= (delay-channel [[class delay-channel][=delay-channel=]]))







***** Indirect Slots

# link target 2: <<timers>>
# link target: <<slot timers>>


****** Internal Slot: =timers=                                                   :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Active Timers which aren't cached in slots


# link target 2: <<gate-slots>>
# link target: <<slot gate-slots>>


****** Internal Slot: =gate-slots=                                               :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash table mapping gate names to [[gate-slot]]
    instances as specified in the =:gates= slot option in the class
    specification of subclasses.


# link target 2: <<initialized-p>>
# link target: <<slot initialized-p>>


****** External Slot: =initialized-p=                                            :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

True if this component has been initialized.


# link target 2: <<rng-map>>
# link target: <<slot rng-map>>


****** External Slot: =rng-map=                                                  :slot:

- Value type: =array=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

RNG map for this component


# link target 2: <<collect-trace-info>>
# link target: <<slot collect-trace-info>>


****** Internal Slot: =collect-trace-info=                                       :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

If true tracelog outputs will be traced for this component.


# link target 2: <<properties>>
# link target: <<slot properties>>


****** Internal Slot: =properties=                                               :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: properties
- Allocation: instance


******* Description

Per instance property list


# link target 2: <<has-ancestor-listeners>>
# link target: <<slot has-ancestor-listeners>>


****** Internal Slot: =has-ancestor-listeners=                                   :slot:

- Value type: =simple-bit-vector=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have ancestor
    listeners.


# link target 2: <<has-local-listeners>>
# link target: <<slot has-local-listeners>>


****** Internal Slot: =has-local-listeners=                                      :slot:

- Value type: =simple-bit-vector=
- Initial value: =(MAKE-ARRAY +SIGNAL-CACHE-SIZE+ :ELEMENT-TYPE 'BIT           
                   :INITIAL-ELEMENT 0)=
- Initargs: none
- Allocation: instance


******* Description

A bit map recording which signals have local listeners.


# link target 2: <<signal-table>>
# link target: <<slot signal-table>>


****** Internal Slot: =signal-table=                                             :slot:

- Value type: =hash-table=
- Initial value: =(MAKE-HASH-TABLE)=
- Initargs: none
- Allocation: instance


******* Description

Hash by signal of lists of registered listeners
    for this entity.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.





# link target 2: <<wsn-packet>>
# link target: <<class wsn-packet>>


**** Class: =wsn-packet=                                                      :class:


***** Inheritance

- Parent classes:
    [[class packet][packet]]
- Precedence list:
    [[class wsn-packet][wsn-packet]], [[class packet][packet]], [[class
    message][message]], [[class event][event]], [[class owned-object][owned
    object]], [[class named-object][named-object]], [[class lens-object][lens
    object]], [[class standard-object][standard-object]], [[class slot-object][slot
    object]], [[class t][t]]
- Direct subclasses:
    [[class mac-packet][mac-packet]], [[class routing-packet][routing-packet]]


***** Description

Base class for network and link layer packets. Have
  a [[source]] and [[destination]] address relevant to the protocol
  layer and a [[header-overhead]]. Also provides [[sequence-number]]
  for identifying packets.


***** Direct Slots

# link target 2: <<header-overhead>>
# link target: <<slot header-overhead>>


****** Slot: =header-overhead=                                                   :slot:

- Value type: =t=
- Initial value: =0=
- Initargs: byte-length, header-overhead
- Allocation: instance


******* Description

In bytes


******* Accessors

# link target 2: <<header-overhead>>
# link target: <<slot-accessor header-overhead>>


******** Slot Accessor: =header-overhead=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(header-overhead object)
#+END_SRC


********* Methods

- (=header-overhead= (comms-module                     [[class comms
  module][=lens.wsn:comms-module=]]))
- (=header-overhead= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=header-overhead= (application [[class
  application][=lens.wsn:application=]]))
- (=header-overhead= (wireless-signal-end                     [[class wireless
  signal-end][=lens.wsn::wireless-signal-end=]]))





# link target 2: <<source>>
# link target: <<slot source>>


****** Internal Slot: =source=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: source
- Allocation: instance


******* Description

the  source address of the received packet


******* Accessors

# link target 2: <<source>>
# link target: <<slot-accessor source>>


******** Internal Slot Accessor: =source=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(source object)
#+END_SRC


********* Methods

- (=source= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=source= (app-net-control-info            [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<destination>>
# link target: <<slot destination>>


****** Internal Slot: =destination=                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: destination
- Allocation: instance


******* Description

the destination address of the packet to be sent


******* Accessors

# link target 2: <<destination>>
# link target: <<slot-accessor destination>>


******** Internal Slot Accessor: =destination=                            :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(destination object)
#+END_SRC


********* Methods

- (=destination= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=destination= (app-net-control-info                 [[class app-net-control
  info][=lens.wsn:app-net-control-info=]]))





# link target 2: <<sequence-number>>
# link target: <<slot sequence-number>>


****** Slot: =sequence-number=                                                   :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: sequence-number, seqnum
- Allocation: instance


******* Description

a field to distinguish between packets


******* Accessors

# link target 2: <<sequence-number>>
# link target: <<slot-accessor sequence-number>>


******** Slot Accessor: =sequence-number=                                 :reader:writer:


********* Syntax

#+BEGIN_SRC lisp
(sequence-number object)
#+END_SRC


********* Methods

- (=sequence-number= (wsn-packet [[class wsn-packet][=lens.wsn:wsn-packet=]]))
- (=sequence-number= (application-packet                     [[class
  application-packet][=lens.wsn:application-packet=]]))







***** Indirect Slots

# link target 2: <<bit-error-p>>
# link target: <<slot bit-error-p>>


****** External Slot: =bit-error-p=                                              :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The result of error modelling after the packet is
sent through a channel that has a nonzero packet error rate (PER) or
bit error rate (BER). It is up to the receiver to examine this flag
after having received the packet, and to act upon it.


# link target 2: <<reception-start-p>>
# link target: <<slot reception-start-p>>


****** Internal Slot: =reception-start-p=                                        :slot:

- Value type: =boolean=
- Initial value: =NIL=
- Initargs: deliver-on-reception-start
- Allocation: instance


******* Description

Identify whether this packet represents the start
or the end of the reception after the packet travelled through a
channel with a data rate. This flag is controlled by the
deliver-on-reception-start flag of the receiving gate.


# link target 2: <<control-info>>
# link target: <<slot control-info>>


****** External Slot: =control-info=                                             :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: control-info
- Allocation: instance


******* Description

Additional data to be passed with packet between
    protocol layers.


# link target 2: <<duration>>
# link target: <<slot duration>>


****** External Slot: =duration=                                                 :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: none
- Allocation: instance


******* Description

Duration of last transmission


# link target 2: <<encapsulated-packet>>
# link target: <<slot encapsulated-packet>>


****** Internal Slot: =encapsulated-packet=                                      :slot:

- Value type: =packet=
- Initial value: =NIL=
- Initargs: encapsulated-packet
- Allocation: instance


******* Description

Higher level encapsulated protocol packet.


# link target 2: <<timestamp>>
# link target: <<slot timestamp>>


****** External Slot: =timestamp=                                                :slot:

- Value type: =time-type=
- Initial value: =0.0d0=
- Initargs: timestamp
- Allocation: instance


******* Description

Utility time stamp field for user


# link target 2: <<to>>
# link target: <<slot to>>


****** Internal Slot: =to=                                                       :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or Gate which finally receices message (after a delay if appropriate)


# link target 2: <<from>>
# link target: <<slot from>>


****** Internal Slot: =from=                                                     :slot:

- Value type: =t=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Module or gate from which message was originally sent.


# link target 2: <<creation-time>>
# link target: <<slot creation-time>>


****** External Slot: =creation-time=                                            :slot:

- Value type: =time-type=
- Initial value: =(SIMULATION-TIME)=
- Initargs: none
- Allocation: instance


******* Description

The creation time of the message. With cloned
messages (see [[duplicate]] later), the creation time of the original message
is returned and not the time of the cloning operation. This is
particularly useful when modeling communication protocols, because
many protocols clone the transmitted packages to be able to do
retransmissions and/or segmentation/reassembly.


# link target 2: <<root-event>>
# link target: <<slot root-event>>


****** External Slot: =root-event=                                               :slot:

- Value type: =event=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

Top level root for cloned messages


# link target 2: <<schedule-id>>
# link target: <<slot schedule-id>>


****** Internal Slot: =schedule-id=                                              :slot:

- Value type: =integer=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Used to ensure events with same time and
   priority are scheduled in order of scheduling


# link target 2: <<priority>>
# link target: <<slot priority>>


****** Internal Slot: =priority=                                                 :slot:

- Value type: =fixnum=
- Initial value: =0=
- Initargs: priority
- Allocation: instance


******* Description

Determines delivery of messages with same arrival time


# link target 2: <<arrival-time>>
# link target: <<slot arrival-time>>


****** External Slot: =arrival-time=                                             :slot:

- Value type: =time-type=
- Initial value: =-1.0d0=
- Initargs: time
- Allocation: instance


******* Description

simulation time at which event is to be handled


# link target 2: <<sent-time>>
# link target: <<slot sent-time>>


****** External Slot: =sent-time=                                                :slot:

- Value type: =double-float=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


******* Description

The simulation time the message was sent.


# link target 2: <<rank>>
# link target: <<slot rank>>


****** Internal Slot: =rank=                                                     :slot:

- Value type: =fixnum=
- Initial value: =-1=
- Initargs: none
- Allocation: instance


******* Description

Rank in priority queue - used internally for
         efficient removal from queue.


# link target 2: <<owner>>
# link target: <<slot owner>>


****** External Slot: =owner=                                                    :slot:

- Value type: =named-object=
- Initial value: =NIL=
- Initargs: owner
- Allocation: instance


******* Description

Object which owns this in object heirarchy


# link target 2: <<index>>
# link target: <<slot index>>


****** External Slot: =index=                                                    :slot:

- Value type: =fixnum=
- Initial value: =NIL=
- Initargs: index
- Allocation: instance


******* Description

Position in an object vector (if it is in an
          object array)


# link target 2: <<name>>
# link target: <<slot name>>


****** External Slot: =name=                                                     :slot:

- Value type: =symbol=
- Initial value: =NIL=
- Initargs: name
- Allocation: instance


******* Description

Name of this object - used when addressing
         the object internally or through simulation paramaters.







*** External Structures

# link target 2: <<cell>>
# link target: <<structure cell>>


**** Structure: =cell=                                                    :structure:


***** Description

An area of radio coverage with the list
of nodes wthin it and a list of [[path-loss]] records to other
cells.


***** Slots

# link target 2: <<coord>>
# link target: <<slot coord>>


****** External Slot: =coord=                                                    :slot:

- Value type: =coord=
- Initial value: =(MAKE-COORD)=
- Initargs: none
- Allocation: instance


# link target 2: <<occupation>>
# link target: <<slot occupation>>


****** Slot: =occupation=                                                        :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance


# link target 2: <<path-loss>>
# link target: <<slot path-loss>>


****** Slot: =path-loss=                                                         :slot:

- Value type: =list=
- Initial value: =NIL=
- Initargs: none
- Allocation: instance







*** External Types

# link target 2: <<radio-control-command-name>>
# link target: <<type radio-control-command-name>>


**** Type: =radio-control-command-name=                                        :type:

The allowed radio control commands




*** External Constants

# link target 2: <<broadcast-mac-address>>
# link target: <<constant broadcast-mac-address>>


**** Constant: =broadcast-mac-address=                                     :constant:


***** Value

: -1

Type: =fixnum=


***** Description

Not documented.



# link target 2: <<broadcast-network-address>>
# link target: <<constant broadcast-network-address>>


**** Constant: =broadcast-network-address=                                 :constant:


***** Value

: -1

Type: =fixnum=


***** Description

Not documented.





*** External Global Variables

# link target: <<variable network>>


**** External Variable: =network=                                          :variable:


***** Value

: NIL

Type: =null=


***** Description

Network name for current run



# link target: <<variable network>>


**** External Variable: =network=                                          :variable:


***** Value

: NIL

Type: =null=


***** Description

Network name for current run





*** External Functions

# link target 2: <<applicationid>>
# link target: <<function applicationid>>


**** Function: =applicationid=                                             :function:


***** Syntax

#+BEGIN_SRC lisp
(applicationid object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<argument>>
# link target: <<function argument>>


**** Function: =argument=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(argument object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<attempt-tx>>
# link target: <<function attempt-tx>>


**** Function: =attempt-tx=                                                :function:


***** Syntax

#+BEGIN_SRC lisp
(attempt-tx module &optional description)
#+END_SRC

***** Arguments


- module :: a [[wsn-module]] (usually a [[mac]] instance)
- description :: a /string/

***** Description


Attempt to transmit next packet in /packet-buffer/ from
  /module/. Description added to tracelog if present.


# link target 2: <<bits-per-symbol>>
# link target: <<function bits-per-symbol>>


**** Function: =bits-per-symbol=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(bits-per-symbol entity)
#+END_SRC


***** Description

Not documented.



# link target 2: <<buffer>>
# link target: <<function buffer>>


**** Internal Function: =buffer=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(buffer object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<buffer-size>>
# link target: <<function buffer-size>>


**** External Function: =buffer-size=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(buffer-size object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<buffer-size>>
# link target: <<function buffer-size>>


**** External Function: =buffer-size=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(buffer-size object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<channel-clear-status>>
# link target: <<function channel-clear-status>>


**** Function: =channel-clear-status=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(channel-clear-status radio)
#+END_SRC


***** Description

Not documented.



# link target 2: <<clock-drift>>
# link target: <<function clock-drift>>


**** Function: =clock-drift=                                               :function:


***** Syntax

#+BEGIN_SRC lisp
(clock-drift object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<collision-model>>
# link target: <<function collision-model>>


**** Function: =collision-model=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(collision-model object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<command>>
# link target: <<function command>>


**** Function: =command=                                                   :function:


***** Syntax

#+BEGIN_SRC lisp
(command object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<data-rate>>
# link target: <<function data-rate>>


**** Function: =data-rate=                                                 :function:


***** Syntax

#+BEGIN_SRC lisp
(data-rate entity)
#+END_SRC

***** Arguments


- entity :: a [[radio]] or [[mac-base]] instance

***** Description


Return the physical layer data rate in bps - needed by mac layer
  to determine transmission times etc.


# link target 2: <<deployment>>
# link target: <<function deployment>>


**** Function: =deployment=                                                :function:


***** Syntax

#+BEGIN_SRC lisp
(deployment object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<description>>
# link target: <<function description>>


**** Function: =description=                                               :function:


***** Syntax

#+BEGIN_SRC lisp
(description object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<destination>>
# link target: <<function destination>>


**** Internal Function: =destination=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(destination object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<disabled-p>>
# link target: <<function disabled-p>>


**** External Function: =disabled-p=                                       :function:


***** Syntax

#+BEGIN_SRC lisp
(disabled-p object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<disabled-p>>
# link target: <<function disabled-p>>


**** External Function: =disabled-p=                                       :function:


***** Syntax

#+BEGIN_SRC lisp
(disabled-p object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<exponential>>
# link target: <<function exponential>>


**** External Function: =exponential=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(exponential mean &optional (rng 0))
#+END_SRC

***** Arguments


- mean :: a =real= number

***** Optional Arguments


- rng :: an =integer= (default 0)

***** Description


Returns a random variate =double float= from the exponential
distribution with the given mean /mean/ (that is, with parameter
lambda=1/mean/) from random number stream /rng/ in the current
context.


# link target 2: <<exponential>>
# link target: <<function exponential>>


**** External Function: =exponential=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(exponential mean &optional (rng 0))
#+END_SRC

***** Arguments


- mean :: a =real= number

***** Optional Arguments


- rng :: an =integer= (default 0)

***** Description


Returns a random variate =double float= from the exponential
distribution with the given mean /mean/ (that is, with parameter
lambda=1/mean/) from random number stream /rng/ in the current
context.


# link target 2: <<field>>
# link target: <<function field>>


**** Function: =field=                                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(field object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<get-clock>>
# link target: <<function get-clock>>


**** Function: =get-clock=                                                 :function:


***** Syntax

#+BEGIN_SRC lisp
(get-clock instance)
#+END_SRC

***** Arguments


- module :: a [[wsn-module]]

***** Description


Return local value for absolute time taking account of the clock drift
for the local clock as determined by the [[resources]] module.


# link target 2: <<get-simulation-time>>
# link target: <<function get-simulation-time>>


**** Function: =get-simulation-time=                                       :function:


***** Syntax

#+BEGIN_SRC lisp
(get-simulation-time module local-time)
#+END_SRC

***** Arguments


- module :: a [[wsn-module]]
- local-time :: a [[time-type]]

***** Description


Convert a time value /local-time/ value into a simulation time taking
account of the clock drift for the local clock as determined by the
[[resources]] module.


# link target 2: <<handle-control-command>>
# link target: <<function handle-control-command>>


**** Function: =handle-control-command=                                    :function:


***** Syntax

#+BEGIN_SRC lisp
(handle-control-command module command argument)
#+END_SRC

***** Arguments


- module :: a [[wsn-module]] representation a communications protocol
- command :: a =symbol= representing the control command.
- argument :: a =list= of other arguments associated with this command

***** Description


Communications protocol modules should specialise this to receive and
handle control commands from higher layers.


# link target 2: <<handle-sensor-reading>>
# link target: <<function handle-sensor-reading>>


**** Function: =handle-sensor-reading=                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(handle-sensor-reading application measurement)
#+END_SRC

***** Arguments


- application :: a [[application]]

- measurement :: a [[measurement]] or a =real=

***** Description


Called to pass a measured value from a [[sensor]] to an [[application]] module.
It must be specialised for all applications which

Must be implemented by applications to handle
  sensor readings


# link target 2: <<header-overhead>>
# link target: <<function header-overhead>>


**** Function: =header-overhead=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(header-overhead object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<last-hop>>
# link target: <<function last-hop>>


**** Function: =last-hop=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(last-hop object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<last-sequence-number>>
# link target: <<function last-sequence-number>>


**** Function: =last-sequence-number=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(last-sequence-number object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<location>>
# link target: <<function location>>


**** Function: =location=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(location object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<lqi>>
# link target: <<function lqi>>


**** Function: =lqi=                                                       :function:


***** Syntax

#+BEGIN_SRC lisp
(lqi object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<mac-address>>
# link target: <<function mac-address>>


**** Function: =mac-address=                                               :function:


***** Syntax

#+BEGIN_SRC lisp
(mac-address object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<max-mac-frame-size>>
# link target: <<function max-mac-frame-size>>


**** Function: =max-mac-frame-size=                                        :function:


***** Syntax

#+BEGIN_SRC lisp
(max-mac-frame-size object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<max-net-frame-size>>
# link target: <<function max-net-frame-size>>


**** Function: =max-net-frame-size=                                        :function:


***** Syntax

#+BEGIN_SRC lisp
(max-net-frame-size object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<measure>>
# link target: <<function measure>>


**** Function: =measure=                                                   :function:


***** Syntax

#+BEGIN_SRC lisp
(measure physical-process measurand location time)
#+END_SRC

***** Arguments


- physical-process :: a [[physical-process]]
- measurand :: a [[hs:symbol]] signifying what is being measured
- location :: a [[coord]]
- time :: a [[time-type]]

***** Description


Return the real value of specified measurand from a
physical process at given time and location. Must be specialised for all [[physical-process]]s. 


# link target: <<function network>>


**** External Function: =network=                                          :function:


***** Syntax

#+BEGIN_SRC lisp
(network object)
#+END_SRC


***** Description

Not documented.



# link target: <<function network>>


**** External Function: =network=                                          :function:


***** Syntax

#+BEGIN_SRC lisp
(network object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<network-address>>
# link target: <<function network-address>>


**** Function: =network-address=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(network-address object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<next-hop>>
# link target: <<function next-hop>>


**** Function: =next-hop=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(next-hop object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<next-sequence-number>>
# link target: <<function next-sequence-number>>


**** Function: =next-sequence-number=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(next-sequence-number instance)
#+END_SRC

***** Arguments


- instance :: a [[module]]

***** Description


Returns the next packet sequence number to be used by a source module.


# link target: <<function node>>


**** Function: =node=                                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(node module)
#+END_SRC

***** Arguments


- module :: a [[wsn-module]]

***** Description


Return the parent [[node]] module for /module//.


# link target 2: <<nodeid>>
# link target: <<function nodeid>>


**** Function: =nodeid=                                                    :function:


***** Syntax

#+BEGIN_SRC lisp
(nodeid object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<nodes>>
# link target: <<function nodes>>


**** Function: =nodes=                                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(nodes network)
#+END_SRC

***** Arguments


- network :: a network

***** Description


Returns a vector of all nodes in the wireless sensor network.


# link target 2: <<num-nodes>>
# link target: <<function num-nodes>>


**** Function: =num-nodes=                                                 :function:


***** Syntax

#+BEGIN_SRC lisp
(num-nodes object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<packet-history>>
# link target: <<function packet-history>>


**** Function: =packet-history=                                            :function:


***** Syntax

#+BEGIN_SRC lisp
(packet-history object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<packet-size>>
# link target: <<function packet-size>>


**** Function: =packet-size=                                               :function:


***** Syntax

#+BEGIN_SRC lisp
(packet-size application data)
#+END_SRC

***** Arguments


- application :: an [[application]] module
- data :: application data

***** Description


Returns the size in bytes to be used as the [[byte-length]] of application packets sent by /application/ when sending /data/. Default implementation returns the sum of the =header-overhead= and =payload-overhead= parameters of the /application/.


# link target 2: <<parent-network-address>>
# link target: <<function parent-network-address>>


**** Function: =parent-network-address=                                    :function:


***** Syntax

#+BEGIN_SRC lisp
(parent-network-address entity)
#+END_SRC

***** Attributes


- entity :: an [[application]] or other [[wsn-module]]

***** Description


Return the address of parent node for aggregation applications. Default
is =parent= however some applications take this as a parameter.


# link target 2: <<payload>>
# link target: <<function payload>>


**** Function: =payload=                                                   :function:


***** Syntax

#+BEGIN_SRC lisp
(payload object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<payload-overhead>>
# link target: <<function payload-overhead>>


**** Function: =payload-overhead=                                          :function:


***** Syntax

#+BEGIN_SRC lisp
(payload-overhead object)
#+END_SRC


***** Description

Not documented.



# link target: <<function physical-process>>


**** Function: =physical-process=                                          :function:


***** Syntax

#+BEGIN_SRC lisp
(physical-process object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<priority>>
# link target: <<function priority>>


**** Internal Function: =priority=                                         :function:


***** Syntax

#+BEGIN_SRC lisp
(priority object)
#+END_SRC


***** Description

Not documented.



# link target: <<function radio>>


**** Function: =radio=                                                     :function:


***** Syntax

#+BEGIN_SRC lisp
(radio object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<ram-store>>
# link target: <<function ram-store>>


**** Function: =ram-store=                                                 :function:


***** Syntax

#+BEGIN_SRC lisp
(ram-store instance num-bytes)
#+END_SRC


***** Description

Record the change in use of ram



# link target 2: <<read-rssi>>
# link target: <<function read-rssi>>


**** Function: =read-rssi=                                                 :function:


***** Syntax

#+BEGIN_SRC lisp
(read-rssi radio)
#+END_SRC


***** Description

Not documented.



# link target 2: <<resolve-network-address>>
# link target: <<function resolve-network-address>>


**** Function: =resolve-network-address=                                   :function:


***** Syntax

#+BEGIN_SRC lisp
(resolve-network-address routing network-address)
#+END_SRC

***** Arguments


- routing :: a [[routing]] module
- network-address :: a network-address designator

***** Description


Return resolved mac address from given network address


# link target 2: <<rssi>>
# link target: <<function rssi>>


**** Function: =rssi=                                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(rssi object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<sensor-request>>
# link target: <<function sensor-request>>


**** Function: =sensor-request=                                            :function:


***** Syntax

#+BEGIN_SRC lisp
(sensor-request application &optional (sensor-index 0))
#+END_SRC

***** Arguments


- application :: a [[application]]

***** Optional Arguments


- sensor-index :: an =integer= (default 0)

***** Description


Sends a request for a reading from /application/ to the sensor
indicated by /sensor-index/. There may be a delay in the reading. The
/application/ must implement [[handle-sensor-reading]] to receive the
returned measured value.


# link target 2: <<sequence-number>>
# link target: <<function sequence-number>>


**** Function: =sequence-number=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(sequence-number object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<set-state>>
# link target: <<function set-state>>


**** Function: =set-state=                                                 :function:


***** Syntax

#+BEGIN_SRC lisp
(set-state instance state &optional description)
#+END_SRC

***** Arguments


- instance :: an module with state handling.
- state :: a new state identifier
- description :: a /string/ description of reason for state change.

***** Description


For modules with the [print-state-transitions] parameter and the
[[state]] slot update the /state/ slot to new value and if
[[print-state-transitions]] is true print the change using
[[tracelog]].  /description/ may be used to add comments for
tracing.


# link target 2: <<shutdown>>
# link target: <<function shutdown>>


**** Function: =shutdown=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(shutdown module)
#+END_SRC

***** Arguments


- module :: a [[wsn-module]]

***** Description


Called to shutdown a module when it receives the [[node-shutdown]] signal.


# link target 2: <<sink-network-address>>
# link target: <<function sink-network-address>>


**** Function: =sink-network-address=                                      :function:


***** Syntax

#+BEGIN_SRC lisp
(sink-network-address module)
#+END_SRC

***** Attributes


- module :: an [[application]] or other [[wsn-module]]

***** Description


Return the address of sink node for reporting applications. Default
is =sink= however some applications take this as a parameter.


# link target 2: <<sink-p>>
# link target: <<function sink-p>>


**** Function: =sink-p=                                                    :function:


***** Syntax

#+BEGIN_SRC lisp
(sink-p entity)
#+END_SRC

***** Attributes


- entity :: an [[application]] or other [[wsn-module]]

***** Description


Return true if an application (or router) is on a sink node


# link target 2: <<sleep>>
# link target: <<function sleep>>


**** Inherited Function: =sleep=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(sleep seconds)
#+END_SRC


***** Description

This function causes execution to be suspended for SECONDS. SECONDS may be
any non-negative real number.



# link target 2: <<sleep>>
# link target: <<function sleep>>


**** Inherited Function: =sleep=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(sleep seconds)
#+END_SRC


***** Description

This function causes execution to be suspended for SECONDS. SECONDS may be
any non-negative real number.



# link target 2: <<sleep-interval>>
# link target: <<function sleep-interval>>


**** Function: =sleep-interval=                                            :function:


***** Syntax

#+BEGIN_SRC lisp
(sleep-interval object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<source>>
# link target: <<function source>>


**** Internal Function: =source=                                           :function:


***** Syntax

#+BEGIN_SRC lisp
(source object)
#+END_SRC


***** Description

Not documented.



# link target 2: <<startup>>
# link target: <<function startup>>


**** Function: =startup=                                                   :function:


***** Syntax

#+BEGIN_SRC lisp
(startup module)
#+END_SRC

***** Arguments


- module :: a [[wsn-module]]

***** Description


Called to start a module when it receives the [[node-startup]] signal.


# link target 2: <<state>>
# link target: <<function state>>


**** Internal Function: =state=                                            :function:


***** Syntax

#+BEGIN_SRC lisp
(state instance)
#+END_SRC

***** Arguments


- instance :: an object with state handling.

***** Description


Return current state identifier of /instance/


# link target 2: <<symbol-length>>
# link target: <<function symbol-length>>


**** Function: =symbol-length=                                             :function:


***** Syntax

#+BEGIN_SRC lisp
(symbol-length entity)
#+END_SRC

***** Arguments


- entity :: a [[radio]] or [[mac-base]]

***** Description


Return the duration in bit lengths of physical layer symbols.


# link target 2: <<to-mac>>
# link target: <<function to-mac>>


**** Function: =to-mac=                                                    :function:


***** Syntax

#+BEGIN_SRC lisp
(to-mac routing entity &optional next-hop-mac-address)
#+END_SRC

***** Arguments


- routing :: a [[routing]] implementation
- entity :: a [[message]] or [[communications-control-command]]
- next-hop-mac-address :: MAC address for MAC layer to forward to

***** Description


Send /entity/ from [[routing]] to [[mac]] layer module.


# link target 2: <<to-network>>
# link target: <<function to-network>>


**** Function: =to-network=                                                :function:


***** Syntax

#+BEGIN_SRC lisp
(to-network application entity &optional destination)
#+END_SRC

***** Arguments


- application :: an [[application]] or [[mac]]
- entity      :: a [[application-packet]] or [[communications-control-command]]
                 from an application or  [[routing-packet]] from a mac

***** Optional Arguments


- destination :: a network routing destination address

***** Description


Send message, packet or data to a [[routing]] module. This may be an
[[application-packet]] or [[communications-control-command]] from an
[[application]] module.


# link target 2: <<to-radio>>
# link target: <<function to-radio>>


**** Function: =to-radio=                                                  :function:


***** Syntax

#+BEGIN_SRC lisp
(to-radio mac entity)
#+END_SRC

***** Arguments


- mac :: a [[mac]] module instance
- entity :: a [[radio-control-command]] or [[mac-packet]]
   or a cons of a control command and arguments

***** Description


Send a packet or control command to a [[radio]] module via the radio gate.


# link target 2: <<transition-delay>>
# link target: <<function transition-delay>>


**** Function: =transition-delay=                                          :function:


***** Syntax

#+BEGIN_SRC lisp
(transition-delay entity state1 state2)
#+END_SRC

***** Arguments


- entity :: a state machine
- state1 :: a state representation
- state2 :: a state representation

***** Description


Return the delay for the transition from /state1/ to /state2/ for /entity/.


# link target 2: <<tx-time>>
# link target: <<function tx-time>>


**** Function: =tx-time=                                                   :function:


***** Syntax

#+BEGIN_SRC lisp
(tx-time entity no-octets)
#+END_SRC

***** Arguments


- entity :: a [[radio]] or [[mac]] module
- no-octets :: an /integer/ or [[mac-packet]]

***** Description


Return the transmission time for /no-octets/ octets or a packet from
/entity/ taking account of transmission rate.


# link target: <<function wireless-channel>>


**** Function: =wireless-channel=                                          :function:


***** Syntax

#+BEGIN_SRC lisp
(wireless-channel object)
#+END_SRC


***** Description

Not documented.






** Ambiguous Symbols


*** Wireless-Channel

# target: <<wireless-channel>>
Disambiguation.

- Function: [[function wireless-channel][=lens.wsn:wireless-channel=]]
- Class: [[class wireless-channel][=lens.wsn:wireless-channel=]]



*** Radio

# target: <<radio>>
Disambiguation.

- Function: [[function radio][=lens.wsn:radio=]]
- Class: [[class radio][=lens.wsn:radio=]]



*** Physical-Process

# target: <<physical-process>>
Disambiguation.

- Function: [[function physical-process][=lens.wsn:physical-process=]]
- Class: [[class physical-process][=lens.wsn:physical-process=]]



*** Node

# target: <<node>>
Disambiguation.

- Function: [[function node][=lens.wsn:node=]]
- Class: [[class node][=lens.wsn:node=]]



*** Network

# target: <<network>>
Disambiguation.

- Variable: [[variable network][=network=]]
- Function: [[function network][=network=]]
- Class: [[class network][=network=]]




** Index

 [[index A][A]]  [[index B][B]]  [[index C][C]]  [[index D][D]]  [[index E][E]]
 [[index F][F]]  [[index G][G]]  [[index H][H]]  [[index L][L]]  [[index M][M]]
 [[index N][N]]  [[index P][P]]  [[index R][R]]  [[index S][S]]  [[index T][T]]
 [[index V][V]]  [[index W][W]]  


*** A


# link target: <<index A>>
- [[class app-net-control-info][=lens.wsn:app-net-control-info=]], Class
- [[class application][=lens.wsn:application=]], Class
- [[class application-packet][=lens.wsn:application-packet=]], Class
- [[function applicationid][=lens.wsn:applicationid=]], Function
- [[function argument][=lens.wsn:argument=]], Function
- [[function attempt-tx][=lens.wsn:attempt-tx=]], Function



*** B


# link target: <<index B>>
- [[function bits-per-symbol][=lens.wsn:bits-per-symbol=]], Function
- [[constant broadcast-mac-address][=lens.wsn:broadcast-mac-address=]],
  Constant
- [[constant broadcast-network-address][=lens.wsn:broadcast-network-address=]],
  Constant
- [[function buffer][=lens.wsn:buffer=]], Function
- [[function buffer-size][=buffer-size=]], Function
- [[function buffer-size][=buffer-size=]], Function
- [[class bypass-mac][=lens.wsn:bypass-mac=]], Class
- [[class bypass-routing][=lens.wsn:bypass-routing=]], Class



*** C


# link target: <<index C>>
- [[structure cell][=lens.wsn:cell=]], Structure
- [[function channel-clear-status][=lens.wsn:channel-clear-status=]], Function
- [[function clock-drift][=lens.wsn:clock-drift=]], Function
- [[function collision-model][=lens.wsn:collision-model=]], Function
- [[function command][=lens.wsn:command=]], Function
- [[class comms-module][=lens.wsn:comms-module=]], Class
- [[class communications][=lens.wsn:communications=]], Class
- [[class connectivity-map][=lens.wsn:connectivity-map=]], Class



*** D


# link target: <<index D>>
- [[function data-rate][=lens.wsn:data-rate=]], Function
- [[function deployment][=lens.wsn:deployment=]], Function
- [[function description][=lens.wsn:description=]], Function
- [[function destination][=lens.wsn:destination=]], Function
- [[class direct-node-physical-process][=lens.wsn:direct-node-physical
  process=]], Class
- [[function disabled-p][=disabled-p=]], Function
- [[function disabled-p][=disabled-p=]], Function



*** E


# link target: <<index E>>
- [[function exponential][=exponential=]], Function
- [[function exponential][=exponential=]], Function



*** F


# link target: <<index F>>
- [[function field][=lens.wsn:field=]], Function



*** G


# link target: <<index G>>
- [[function get-clock][=lens.wsn:get-clock=]], Function
- [[function get-simulation-time][=lens.wsn:get-simulation-time=]], Function



*** H


# link target: <<index H>>
- [[function handle-control-command][=lens.wsn:handle-control-command=]],
  Function
- [[function handle-sensor-reading][=lens.wsn:handle-sensor-reading=]],
  Function
- [[function header-overhead][=lens.wsn:header-overhead=]], Function



*** L


# link target: <<index L>>
- [[function last-hop][=lens.wsn:last-hop=]], Function
- [[function last-sequence-number][=lens.wsn:last-sequence-number=]], Function
- [[class leach-routing][=lens.wsn:leach-routing=]], Class
- [[class line-mobility][=lens.wsn:line-mobility=]], Class
- [[function location][=lens.wsn:location=]], Function
- [[function lqi][=lens.wsn:lqi=]], Function



*** M


# link target: <<index M>>
- [[class mac][=lens.wsn:mac=]], Class
- [[function mac-address][=lens.wsn:mac-address=]], Function
- [[class mac-control-command][=lens.wsn:mac-control-command=]], Class
- [[class mac-control-message][=lens.wsn:mac-control-message=]], Class
- [[class mac-packet][=lens.wsn:mac-packet=]], Class
- [[class mac-radio-control-info][=lens.wsn:mac-radio-control-info=]], Class
- [[class mac802.15.4][=lens.wsn:mac802.15.4=]], Class
- [[function max-mac-frame-size][=lens.wsn:max-mac-frame-size=]], Function
- [[function max-net-frame-size][=lens.wsn:max-net-frame-size=]], Function
- [[function measure][=lens.wsn:measure=]], Function
- [[class mobility][=lens.wsn:mobility=]], Class
- [[class multipath-rings-routing][=lens.wsn:multipath-rings-routing=]], Class



*** N


# link target: <<index N>>
- [[class net-mac-control-info][=lens.wsn:net-mac-control-info=]], Class
- [[variable network][=network=]], Variable
- [[function network][=network=]], Function
- [[class network][=network=]], Class
- [[variable network][=network=]], Variable
- [[function network][=network=]], Function
- [[class network][=network=]], Class
- [[function network-address][=lens.wsn:network-address=]], Function
- [[class network-control-command][=lens.wsn:network-control-command=]], Class
- [[class network-control-message][=lens.wsn:network-control-message=]], Class
- [[function next-hop][=lens.wsn:next-hop=]], Function
- [[function next-sequence-number][=lens.wsn:next-sequence-number=]], Function
- [[class no-mobility][=lens.wsn:no-mobility=]], Class
- [[function node][=lens.wsn:node=]], Function
- [[class node][=lens.wsn:node=]], Class
- [[function nodeid][=lens.wsn:nodeid=]], Function
- [[function nodes][=lens.wsn:nodes=]], Function
- [[function num-nodes][=lens.wsn:num-nodes=]], Function



*** P


# link target: <<index P>>
- [[function packet-history][=lens.wsn:packet-history=]], Function
- [[function packet-size][=lens.wsn:packet-size=]], Function
- [[function parent-network-address][=lens.wsn:parent-network-address=]],
  Function
- [[function payload][=lens.wsn:payload=]], Function
- [[function payload-overhead][=lens.wsn:payload-overhead=]], Function
- [[function physical-process][=lens.wsn:physical-process=]], Function
- [[class physical-process][=lens.wsn:physical-process=]], Class
- [[function priority][=lens.wsn:priority=]], Function



*** R


# link target: <<index R>>
- [[function radio][=lens.wsn:radio=]], Function
- [[class radio][=lens.wsn:radio=]], Class
- [[class radio-control-command][=lens.wsn:radio-control-command=]], Class
- [[type radio-control-command-name][=lens.wsn:radio-control-command-name=]],
  Type
- [[class radio-control-message][=lens.wsn:radio-control-message=]], Class
- [[function ram-store][=lens.wsn:ram-store=]], Function
- [[function read-rssi][=lens.wsn:read-rssi=]], Function
- [[function resolve-network-address][=lens.wsn:resolve-network-address=]],
  Function
- [[class resources][=lens.wsn:resources=]], Class
- [[class routing][=lens.wsn:routing=]], Class
- [[class routing-packet][=lens.wsn:routing-packet=]], Class
- [[function rssi][=lens.wsn:rssi=]], Function



*** S


# link target: <<index S>>
- [[class scenario-physical-process][=lens.wsn:scenario-physical-process=]],
  Class
- [[function sensor-request][=lens.wsn:sensor-request=]], Function
- [[function sequence-number][=lens.wsn:sequence-number=]], Function
- [[function set-state][=lens.wsn:set-state=]], Function
- [[function shutdown][=lens.wsn:shutdown=]], Function
- [[class simple-aggregation][=lens.wsn:simple-aggregation=]], Class
- [[function sink-network-address][=lens.wsn:sink-network-address=]], Function
- [[function sink-p][=lens.wsn:sink-p=]], Function
- [[function sleep][=sleep=]], Function
- [[function sleep][=sleep=]], Function
- [[function sleep-interval][=lens.wsn:sleep-interval=]], Function
- [[function source][=lens.wsn:source=]], Function
- [[function startup][=lens.wsn:startup=]], Function
- [[function state][=lens.wsn:state=]], Function
- [[function symbol-length][=lens.wsn:symbol-length=]], Function



*** T


# link target: <<index T>>
- [[class throughput-test][=lens.wsn:throughput-test=]], Class
- [[class tmac][=lens.wsn:tmac=]], Class
- [[function to-mac][=lens.wsn:to-mac=]], Function
- [[function to-network][=lens.wsn:to-network=]], Function
- [[function to-radio][=lens.wsn:to-radio=]], Function
- [[function transition-delay][=lens.wsn:transition-delay=]], Function
- [[class tuneable-mac][=lens.wsn:tuneable-mac=]], Class
- [[function tx-time][=lens.wsn:tx-time=]], Function



*** V


# link target: <<index V>>
- [[class value-propagation][=lens.wsn:value-propagation=]], Class
- [[class value-reporting][=lens.wsn:value-reporting=]], Class



*** W


# link target: <<index W>>
- [[function wireless-channel][=lens.wsn:wireless-channel=]], Function
- [[class wireless-channel][=lens.wsn:wireless-channel=]], Class
- [[class wsn][=lens.wsn:wsn=]], Class
- [[class wsn-module][=lens.wsn:wsn-module=]], Class
- [[class wsn-packet][=lens.wsn:wsn-packet=]], Class





* Colophon

This documentation was generated from Common Lisp source code using CLOD, version 1.0.
The latest version of CLOD is available [[http://bitbucket.org/eeeickythump/clod/][here]].
